
BatterController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000066e  00000702  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000066e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800104  00800104  00000706  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000706  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000738  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bec  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000956  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b7  00000000  00000000  00001d62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  0000241c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000596  00000000  00000000  00002578  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002dc  00000000  00000000  00002b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002dea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 01 	jmp	0x290	; 0x290 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 37 01 	call	0x26e	; 0x26e <main>
  9e:	0c 94 35 03 	jmp	0x66a	; 0x66a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z22beginCoolingRegulationv>:

static int temp = 0;

void beginCoolingRegulation()
{
	DDRB |= (1 << PORTB1);
  a6:	21 9a       	sbi	0x04, 1	; 4
	DDRC &= ~(1 << PORTC3);
  a8:	3b 98       	cbi	0x07, 3	; 7
	// timer 1 fast PWM mode 50 Hz
	TCCR1A |= (1 << COM1A1) | (1 << WGM11); //A1 clear on compare match, top = ICR1
  aa:	e0 e8       	ldi	r30, 0x80	; 128
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	82 68       	ori	r24, 0x82	; 130
  b2:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13) | (1 << CS11); //Prescaler 8
  b4:	e1 e8       	ldi	r30, 0x81	; 129
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	8a 61       	ori	r24, 0x1A	; 26
  bc:	80 83       	st	Z, r24
	ICR1 = 39999; // freq 50 hz
  be:	8f e3       	ldi	r24, 0x3F	; 63
  c0:	9c e9       	ldi	r25, 0x9C	; 156
  c2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
  c6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	OCR1A = 20000;
  ca:	80 e2       	ldi	r24, 0x20	; 32
  cc:	9e e4       	ldi	r25, 0x4E	; 78
  ce:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  d2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	// timer 0 CTC mode, 100 hz
	TCNT0 = 0;
  d6:	16 bc       	out	0x26, r1	; 38
	TCCR0A |= (1 << WGM01); // Set CTC mode
  d8:	84 b5       	in	r24, 0x24	; 36
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00) | (1 << CS02); // Prescaler 1024
  de:	85 b5       	in	r24, 0x25	; 37
  e0:	85 60       	ori	r24, 0x05	; 5
  e2:	85 bd       	out	0x25, r24	; 37
	OCR0A = 67; // Compare register
  e4:	83 e4       	ldi	r24, 0x43	; 67
  e6:	87 bd       	out	0x27, r24	; 39
	//TIMSK0 |= (1 << OCIE0A); // Enable interrupt on compare match
	// ADC init
	ADCSRA |= (1 << ADPS1); // Set ADC prescaler to 4
  e8:	ea e7       	ldi	r30, 0x7A	; 122
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	82 60       	ori	r24, 0x02	; 2
  f0:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR) | (1 << MUX0) | (1 << MUX1); // Left shift ADC reg, ADC port 3
  f2:	ac e7       	ldi	r26, 0x7C	; 124
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	8c 91       	ld	r24, X
  f8:	83 62       	ori	r24, 0x23	; 35
  fa:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADEN) | (1 << ADATE) | (1 << ADIE); // ADC enable, autotrigger and interrupt enable
  fc:	80 81       	ld	r24, Z
  fe:	88 6a       	ori	r24, 0xA8	; 168
 100:	80 83       	st	Z, r24
	ADCSRB |= (1 << ADTS1) | (1 << ADTS0); // set autotrigger to timer0 compare A
 102:	eb e7       	ldi	r30, 0x7B	; 123
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	83 60       	ori	r24, 0x03	; 3
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret

0000010e <__vector_21>:
}

ISR(ADC_vect) {
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
	temp = ADC >> 6; // Read ADC
 120:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 124:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	// Set OCR1A for PWM.
	ADCSRA |= (1 << ADIF); //Clear interrupt
 128:	ea e7       	ldi	r30, 0x7A	; 122
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 61       	ori	r24, 0x10	; 16
 130:	80 83       	st	Z, r24
 132:	ff 91       	pop	r31
 134:	ef 91       	pop	r30
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <_Z19initBatterDispenserv>:
volatile unsigned int cycle;
volatile unsigned int servoTop = extended;
volatile unsigned int servoBottom = retracted;

void initBatterDispenser() {
	cycle = 0;
 144:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 148:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
	DDRB |= (1 << PORTB2) | (1 << PORTB3);
 14c:	84 b1       	in	r24, 0x04	; 4
 14e:	8c 60       	ori	r24, 0x0C	; 12
 150:	84 b9       	out	0x04, r24	; 4
	// timer 1 fast PWM mode 50 Hz
	TCCR1A |= (1 << COM1B1) | (1 << WGM11); //B1 clear on compare match, top = ICR1
 152:	e0 e8       	ldi	r30, 0x80	; 128
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	82 62       	ori	r24, 0x22	; 34
 15a:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13) | (1 << CS11); //Prescaler 8
 15c:	e1 e8       	ldi	r30, 0x81	; 129
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	8a 61       	ori	r24, 0x1A	; 26
 164:	80 83       	st	Z, r24
	ICR1 = 39999; // freq 50 hz
 166:	8f e3       	ldi	r24, 0x3F	; 63
 168:	9c e9       	ldi	r25, 0x9C	; 156
 16a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 16e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	TIMSK1 |= (1 << TOIE1); // Enable overflow interrupt for timer 1
 172:	ef e6       	ldi	r30, 0x6F	; 111
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	81 60       	ori	r24, 0x01	; 1
 17a:	80 83       	st	Z, r24
 17c:	08 95       	ret

0000017e <_Z8addDoughv>:
}


void addDough()
{
	servoTop = extended;
 17e:	20 ea       	ldi	r18, 0xA0	; 160
 180:	3f e0       	ldi	r19, 0x0F	; 15
 182:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <servoTop+0x1>
 186:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <servoTop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18a:	4f ef       	ldi	r20, 0xFF	; 255
 18c:	51 ee       	ldi	r21, 0xE1	; 225
 18e:	64 e0       	ldi	r22, 0x04	; 4
 190:	41 50       	subi	r20, 0x01	; 1
 192:	50 40       	sbci	r21, 0x00	; 0
 194:	60 40       	sbci	r22, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <_Z8addDoughv+0x12>
 198:	00 c0       	rjmp	.+0      	; 0x19a <_Z8addDoughv+0x1c>
 19a:	00 00       	nop
	_delay_ms(100);
	servoBottom = retracted;
 19c:	80 ed       	ldi	r24, 0xD0	; 208
 19e:	97 e0       	ldi	r25, 0x07	; 7
 1a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1a8:	4f ef       	ldi	r20, 0xFF	; 255
 1aa:	51 ee       	ldi	r21, 0xE1	; 225
 1ac:	64 e0       	ldi	r22, 0x04	; 4
 1ae:	41 50       	subi	r20, 0x01	; 1
 1b0:	50 40       	sbci	r21, 0x00	; 0
 1b2:	60 40       	sbci	r22, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <_Z8addDoughv+0x30>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <_Z8addDoughv+0x3a>
 1b8:	00 00       	nop
	_delay_ms(100);
	servoBottom = extended;
 1ba:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 1be:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 1c2:	2f ef       	ldi	r18, 0xFF	; 255
 1c4:	31 ee       	ldi	r19, 0xE1	; 225
 1c6:	44 e0       	ldi	r20, 0x04	; 4
 1c8:	21 50       	subi	r18, 0x01	; 1
 1ca:	30 40       	sbci	r19, 0x00	; 0
 1cc:	40 40       	sbci	r20, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <_Z8addDoughv+0x4a>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <_Z8addDoughv+0x54>
 1d2:	00 00       	nop
	_delay_ms(100);
	servoTop = retracted;
 1d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <servoTop+0x1>
 1d8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <servoTop>
 1dc:	08 95       	ret

000001de <__vector_13>:
	return;
}

ISR(TIMER1_OVF_vect) {
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
	cycle++;
 1ec:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1f0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1fa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	if (cycle == cycleCount - 1) {
 1fe:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 202:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 206:	04 97       	sbiw	r24, 0x04	; 4
 208:	49 f4       	brne	.+18     	; 0x21c <__vector_13+0x3e>
		OCR1B = servoBottom;
 20a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 20e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 212:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 216:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 21a:	22 c0       	rjmp	.+68     	; 0x260 <__vector_13+0x82>
	} else if (cycle == cycleCount) {
 21c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 220:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 224:	05 97       	sbiw	r24, 0x05	; 5
 226:	11 f4       	brne	.+4      	; 0x22c <__vector_13+0x4e>
		PORTB |= (1 << PORTB3);		
 228:	2b 9a       	sbi	0x05, 3	; 5
 22a:	1a c0       	rjmp	.+52     	; 0x260 <__vector_13+0x82>
	} else if (cycle == cycleCount * 2 - 1) {
 22c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 230:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 234:	09 97       	sbiw	r24, 0x09	; 9
 236:	49 f4       	brne	.+18     	; 0x24a <__vector_13+0x6c>
		OCR1B = servoTop;	
 238:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <servoTop>
 23c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <servoTop+0x1>
 240:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 244:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 248:	0b c0       	rjmp	.+22     	; 0x260 <__vector_13+0x82>
	} else if (cycle == cycleCount * 2) {
 24a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 24e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 252:	0a 97       	sbiw	r24, 0x0a	; 10
 254:	29 f4       	brne	.+10     	; 0x260 <__vector_13+0x82>
		cycle = 0;	
 256:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 25a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
		PORTB &= ~(1 << PORTB3);
 25e:	2b 98       	cbi	0x05, 3	; 5
	}
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <main>:
#include "PanController/PanController.h"


int main(void)
{
	beginCoolingRegulation();
 26e:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z22beginCoolingRegulationv>
	initBatterDispenser();
 272:	0e 94 a2 00 	call	0x144	; 0x144 <_Z19initBatterDispenserv>
	sei();
 276:	78 94       	sei
    /* Replace with your application code */
    while (1) 
    {
		addDough();
 278:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z8addDoughv>
 27c:	2f ef       	ldi	r18, 0xFF	; 255
 27e:	83 ed       	ldi	r24, 0xD3	; 211
 280:	90 e3       	ldi	r25, 0x30	; 48
 282:	21 50       	subi	r18, 0x01	; 1
 284:	80 40       	sbci	r24, 0x00	; 0
 286:	90 40       	sbci	r25, 0x00	; 0
 288:	e1 f7       	brne	.-8      	; 0x282 <main+0x14>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <main+0x1e>
 28c:	00 00       	nop
 28e:	f4 cf       	rjmp	.-24     	; 0x278 <main+0xa>

00000290 <__vector_1>:
#include "UltraSonic.h"

uint16_t batterLevel_ = 0;
bool isEcho_ = false;

ISR(INT0_vect) {
 290:	1f 92       	push	r1
 292:	0f 92       	push	r0
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	0f 92       	push	r0
 298:	11 24       	eor	r1, r1
 29a:	2f 93       	push	r18
 29c:	3f 93       	push	r19
 29e:	4f 93       	push	r20
 2a0:	5f 93       	push	r21
 2a2:	6f 93       	push	r22
 2a4:	7f 93       	push	r23
 2a6:	8f 93       	push	r24
 2a8:	9f 93       	push	r25
 2aa:	af 93       	push	r26
 2ac:	bf 93       	push	r27
 2ae:	ef 93       	push	r30
 2b0:	ff 93       	push	r31
	/* If currently timing PW */
	if (isEcho_)
 2b2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <isEcho_>
 2b6:	88 23       	and	r24, r24
 2b8:	19 f1       	breq	.+70     	; 0x300 <__vector_1+0x70>
	{
		/* Turn off timer2 */
		TCCR2B = 0;
 2ba:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
		
		/* Calculate and save distance */
		batterLevel_ = static_cast<uint16_t>(10*REGRESSION(TCNT2)); // Distance in cm
 2be:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 3c 02 	call	0x478	; 0x478 <__floatsisf>
 2cc:	29 ee       	ldi	r18, 0xE9	; 233
 2ce:	38 e4       	ldi	r19, 0x48	; 72
 2d0:	4e e8       	ldi	r20, 0x8E	; 142
 2d2:	5e e3       	ldi	r21, 0x3E	; 62
 2d4:	0e 94 c8 02 	call	0x590	; 0x590 <__mulsf3>
 2d8:	2a ee       	ldi	r18, 0xEA	; 234
 2da:	34 e0       	ldi	r19, 0x04	; 4
 2dc:	44 e7       	ldi	r20, 0x74	; 116
 2de:	5e e3       	ldi	r21, 0x3E	; 62
 2e0:	0e 94 9e 01 	call	0x33c	; 0x33c <__subsf3>
 2e4:	20 e0       	ldi	r18, 0x00	; 0
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	40 e2       	ldi	r20, 0x20	; 32
 2ea:	51 e4       	ldi	r21, 0x41	; 65
 2ec:	0e 94 c8 02 	call	0x590	; 0x590 <__mulsf3>
 2f0:	0e 94 0b 02 	call	0x416	; 0x416 <__fixunssfsi>
 2f4:	70 93 08 01 	sts	0x0108, r23	; 0x800108 <batterLevel_+0x1>
 2f8:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <batterLevel_>
		
		/* Turn off external interrupt */
		EIMSK &= ~(1<<INT0);
 2fc:	e8 98       	cbi	0x1d, 0	; 29
 2fe:	0d c0       	rjmp	.+26     	; 0x31a <__vector_1+0x8a>
	}
	else
	{
		/* Reset and start timer2 */
		TCNT2 = 0;
 300:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
		TCCR2B = 0b00000110;
 304:	86 e0       	ldi	r24, 0x06	; 6
 306:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
		
		isEcho_ = true;
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <isEcho_>
		/* Switch to falling edge */
		EICRA &= ~(1<<ISC00);
 310:	e9 e6       	ldi	r30, 0x69	; 105
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	8e 7f       	andi	r24, 0xFE	; 254
 318:	80 83       	st	Z, r24
	}
}
 31a:	ff 91       	pop	r31
 31c:	ef 91       	pop	r30
 31e:	bf 91       	pop	r27
 320:	af 91       	pop	r26
 322:	9f 91       	pop	r25
 324:	8f 91       	pop	r24
 326:	7f 91       	pop	r23
 328:	6f 91       	pop	r22
 32a:	5f 91       	pop	r21
 32c:	4f 91       	pop	r20
 32e:	3f 91       	pop	r19
 330:	2f 91       	pop	r18
 332:	0f 90       	pop	r0
 334:	0f be       	out	0x3f, r0	; 63
 336:	0f 90       	pop	r0
 338:	1f 90       	pop	r1
 33a:	18 95       	reti

0000033c <__subsf3>:
 33c:	50 58       	subi	r21, 0x80	; 128

0000033e <__addsf3>:
 33e:	bb 27       	eor	r27, r27
 340:	aa 27       	eor	r26, r26
 342:	0e 94 b6 01 	call	0x36c	; 0x36c <__addsf3x>
 346:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__fp_round>
 34a:	0e 94 80 02 	call	0x500	; 0x500 <__fp_pscA>
 34e:	38 f0       	brcs	.+14     	; 0x35e <__addsf3+0x20>
 350:	0e 94 87 02 	call	0x50e	; 0x50e <__fp_pscB>
 354:	20 f0       	brcs	.+8      	; 0x35e <__addsf3+0x20>
 356:	39 f4       	brne	.+14     	; 0x366 <__addsf3+0x28>
 358:	9f 3f       	cpi	r25, 0xFF	; 255
 35a:	19 f4       	brne	.+6      	; 0x362 <__addsf3+0x24>
 35c:	26 f4       	brtc	.+8      	; 0x366 <__addsf3+0x28>
 35e:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__fp_nan>
 362:	0e f4       	brtc	.+2      	; 0x366 <__addsf3+0x28>
 364:	e0 95       	com	r30
 366:	e7 fb       	bst	r30, 7
 368:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__fp_inf>

0000036c <__addsf3x>:
 36c:	e9 2f       	mov	r30, r25
 36e:	0e 94 9f 02 	call	0x53e	; 0x53e <__fp_split3>
 372:	58 f3       	brcs	.-42     	; 0x34a <__addsf3+0xc>
 374:	ba 17       	cp	r27, r26
 376:	62 07       	cpc	r22, r18
 378:	73 07       	cpc	r23, r19
 37a:	84 07       	cpc	r24, r20
 37c:	95 07       	cpc	r25, r21
 37e:	20 f0       	brcs	.+8      	; 0x388 <__addsf3x+0x1c>
 380:	79 f4       	brne	.+30     	; 0x3a0 <__addsf3x+0x34>
 382:	a6 f5       	brtc	.+104    	; 0x3ec <__addsf3x+0x80>
 384:	0c 94 c1 02 	jmp	0x582	; 0x582 <__fp_zero>
 388:	0e f4       	brtc	.+2      	; 0x38c <__addsf3x+0x20>
 38a:	e0 95       	com	r30
 38c:	0b 2e       	mov	r0, r27
 38e:	ba 2f       	mov	r27, r26
 390:	a0 2d       	mov	r26, r0
 392:	0b 01       	movw	r0, r22
 394:	b9 01       	movw	r22, r18
 396:	90 01       	movw	r18, r0
 398:	0c 01       	movw	r0, r24
 39a:	ca 01       	movw	r24, r20
 39c:	a0 01       	movw	r20, r0
 39e:	11 24       	eor	r1, r1
 3a0:	ff 27       	eor	r31, r31
 3a2:	59 1b       	sub	r21, r25
 3a4:	99 f0       	breq	.+38     	; 0x3cc <__addsf3x+0x60>
 3a6:	59 3f       	cpi	r21, 0xF9	; 249
 3a8:	50 f4       	brcc	.+20     	; 0x3be <__addsf3x+0x52>
 3aa:	50 3e       	cpi	r21, 0xE0	; 224
 3ac:	68 f1       	brcs	.+90     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3ae:	1a 16       	cp	r1, r26
 3b0:	f0 40       	sbci	r31, 0x00	; 0
 3b2:	a2 2f       	mov	r26, r18
 3b4:	23 2f       	mov	r18, r19
 3b6:	34 2f       	mov	r19, r20
 3b8:	44 27       	eor	r20, r20
 3ba:	58 5f       	subi	r21, 0xF8	; 248
 3bc:	f3 cf       	rjmp	.-26     	; 0x3a4 <__addsf3x+0x38>
 3be:	46 95       	lsr	r20
 3c0:	37 95       	ror	r19
 3c2:	27 95       	ror	r18
 3c4:	a7 95       	ror	r26
 3c6:	f0 40       	sbci	r31, 0x00	; 0
 3c8:	53 95       	inc	r21
 3ca:	c9 f7       	brne	.-14     	; 0x3be <__addsf3x+0x52>
 3cc:	7e f4       	brtc	.+30     	; 0x3ec <__addsf3x+0x80>
 3ce:	1f 16       	cp	r1, r31
 3d0:	ba 0b       	sbc	r27, r26
 3d2:	62 0b       	sbc	r22, r18
 3d4:	73 0b       	sbc	r23, r19
 3d6:	84 0b       	sbc	r24, r20
 3d8:	ba f0       	brmi	.+46     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3da:	91 50       	subi	r25, 0x01	; 1
 3dc:	a1 f0       	breq	.+40     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3de:	ff 0f       	add	r31, r31
 3e0:	bb 1f       	adc	r27, r27
 3e2:	66 1f       	adc	r22, r22
 3e4:	77 1f       	adc	r23, r23
 3e6:	88 1f       	adc	r24, r24
 3e8:	c2 f7       	brpl	.-16     	; 0x3da <__addsf3x+0x6e>
 3ea:	0e c0       	rjmp	.+28     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3ec:	ba 0f       	add	r27, r26
 3ee:	62 1f       	adc	r22, r18
 3f0:	73 1f       	adc	r23, r19
 3f2:	84 1f       	adc	r24, r20
 3f4:	48 f4       	brcc	.+18     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3f6:	87 95       	ror	r24
 3f8:	77 95       	ror	r23
 3fa:	67 95       	ror	r22
 3fc:	b7 95       	ror	r27
 3fe:	f7 95       	ror	r31
 400:	9e 3f       	cpi	r25, 0xFE	; 254
 402:	08 f0       	brcs	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 404:	b0 cf       	rjmp	.-160    	; 0x366 <__addsf3+0x28>
 406:	93 95       	inc	r25
 408:	88 0f       	add	r24, r24
 40a:	08 f0       	brcs	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40c:	99 27       	eor	r25, r25
 40e:	ee 0f       	add	r30, r30
 410:	97 95       	ror	r25
 412:	87 95       	ror	r24
 414:	08 95       	ret

00000416 <__fixunssfsi>:
 416:	0e 94 a7 02 	call	0x54e	; 0x54e <__fp_splitA>
 41a:	88 f0       	brcs	.+34     	; 0x43e <__fixunssfsi+0x28>
 41c:	9f 57       	subi	r25, 0x7F	; 127
 41e:	98 f0       	brcs	.+38     	; 0x446 <__fixunssfsi+0x30>
 420:	b9 2f       	mov	r27, r25
 422:	99 27       	eor	r25, r25
 424:	b7 51       	subi	r27, 0x17	; 23
 426:	b0 f0       	brcs	.+44     	; 0x454 <__fixunssfsi+0x3e>
 428:	e1 f0       	breq	.+56     	; 0x462 <__fixunssfsi+0x4c>
 42a:	66 0f       	add	r22, r22
 42c:	77 1f       	adc	r23, r23
 42e:	88 1f       	adc	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	1a f0       	brmi	.+6      	; 0x43a <__fixunssfsi+0x24>
 434:	ba 95       	dec	r27
 436:	c9 f7       	brne	.-14     	; 0x42a <__fixunssfsi+0x14>
 438:	14 c0       	rjmp	.+40     	; 0x462 <__fixunssfsi+0x4c>
 43a:	b1 30       	cpi	r27, 0x01	; 1
 43c:	91 f0       	breq	.+36     	; 0x462 <__fixunssfsi+0x4c>
 43e:	0e 94 c1 02 	call	0x582	; 0x582 <__fp_zero>
 442:	b1 e0       	ldi	r27, 0x01	; 1
 444:	08 95       	ret
 446:	0c 94 c1 02 	jmp	0x582	; 0x582 <__fp_zero>
 44a:	67 2f       	mov	r22, r23
 44c:	78 2f       	mov	r23, r24
 44e:	88 27       	eor	r24, r24
 450:	b8 5f       	subi	r27, 0xF8	; 248
 452:	39 f0       	breq	.+14     	; 0x462 <__fixunssfsi+0x4c>
 454:	b9 3f       	cpi	r27, 0xF9	; 249
 456:	cc f3       	brlt	.-14     	; 0x44a <__fixunssfsi+0x34>
 458:	86 95       	lsr	r24
 45a:	77 95       	ror	r23
 45c:	67 95       	ror	r22
 45e:	b3 95       	inc	r27
 460:	d9 f7       	brne	.-10     	; 0x458 <__fixunssfsi+0x42>
 462:	3e f4       	brtc	.+14     	; 0x472 <__fixunssfsi+0x5c>
 464:	90 95       	com	r25
 466:	80 95       	com	r24
 468:	70 95       	com	r23
 46a:	61 95       	neg	r22
 46c:	7f 4f       	sbci	r23, 0xFF	; 255
 46e:	8f 4f       	sbci	r24, 0xFF	; 255
 470:	9f 4f       	sbci	r25, 0xFF	; 255
 472:	08 95       	ret

00000474 <__floatunsisf>:
 474:	e8 94       	clt
 476:	09 c0       	rjmp	.+18     	; 0x48a <__floatsisf+0x12>

00000478 <__floatsisf>:
 478:	97 fb       	bst	r25, 7
 47a:	3e f4       	brtc	.+14     	; 0x48a <__floatsisf+0x12>
 47c:	90 95       	com	r25
 47e:	80 95       	com	r24
 480:	70 95       	com	r23
 482:	61 95       	neg	r22
 484:	7f 4f       	sbci	r23, 0xFF	; 255
 486:	8f 4f       	sbci	r24, 0xFF	; 255
 488:	9f 4f       	sbci	r25, 0xFF	; 255
 48a:	99 23       	and	r25, r25
 48c:	a9 f0       	breq	.+42     	; 0x4b8 <__floatsisf+0x40>
 48e:	f9 2f       	mov	r31, r25
 490:	96 e9       	ldi	r25, 0x96	; 150
 492:	bb 27       	eor	r27, r27
 494:	93 95       	inc	r25
 496:	f6 95       	lsr	r31
 498:	87 95       	ror	r24
 49a:	77 95       	ror	r23
 49c:	67 95       	ror	r22
 49e:	b7 95       	ror	r27
 4a0:	f1 11       	cpse	r31, r1
 4a2:	f8 cf       	rjmp	.-16     	; 0x494 <__floatsisf+0x1c>
 4a4:	fa f4       	brpl	.+62     	; 0x4e4 <__floatsisf+0x6c>
 4a6:	bb 0f       	add	r27, r27
 4a8:	11 f4       	brne	.+4      	; 0x4ae <__floatsisf+0x36>
 4aa:	60 ff       	sbrs	r22, 0
 4ac:	1b c0       	rjmp	.+54     	; 0x4e4 <__floatsisf+0x6c>
 4ae:	6f 5f       	subi	r22, 0xFF	; 255
 4b0:	7f 4f       	sbci	r23, 0xFF	; 255
 4b2:	8f 4f       	sbci	r24, 0xFF	; 255
 4b4:	9f 4f       	sbci	r25, 0xFF	; 255
 4b6:	16 c0       	rjmp	.+44     	; 0x4e4 <__floatsisf+0x6c>
 4b8:	88 23       	and	r24, r24
 4ba:	11 f0       	breq	.+4      	; 0x4c0 <__floatsisf+0x48>
 4bc:	96 e9       	ldi	r25, 0x96	; 150
 4be:	11 c0       	rjmp	.+34     	; 0x4e2 <__floatsisf+0x6a>
 4c0:	77 23       	and	r23, r23
 4c2:	21 f0       	breq	.+8      	; 0x4cc <__floatsisf+0x54>
 4c4:	9e e8       	ldi	r25, 0x8E	; 142
 4c6:	87 2f       	mov	r24, r23
 4c8:	76 2f       	mov	r23, r22
 4ca:	05 c0       	rjmp	.+10     	; 0x4d6 <__floatsisf+0x5e>
 4cc:	66 23       	and	r22, r22
 4ce:	71 f0       	breq	.+28     	; 0x4ec <__floatsisf+0x74>
 4d0:	96 e8       	ldi	r25, 0x86	; 134
 4d2:	86 2f       	mov	r24, r22
 4d4:	70 e0       	ldi	r23, 0x00	; 0
 4d6:	60 e0       	ldi	r22, 0x00	; 0
 4d8:	2a f0       	brmi	.+10     	; 0x4e4 <__floatsisf+0x6c>
 4da:	9a 95       	dec	r25
 4dc:	66 0f       	add	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	88 1f       	adc	r24, r24
 4e2:	da f7       	brpl	.-10     	; 0x4da <__floatsisf+0x62>
 4e4:	88 0f       	add	r24, r24
 4e6:	96 95       	lsr	r25
 4e8:	87 95       	ror	r24
 4ea:	97 f9       	bld	r25, 7
 4ec:	08 95       	ret

000004ee <__fp_inf>:
 4ee:	97 f9       	bld	r25, 7
 4f0:	9f 67       	ori	r25, 0x7F	; 127
 4f2:	80 e8       	ldi	r24, 0x80	; 128
 4f4:	70 e0       	ldi	r23, 0x00	; 0
 4f6:	60 e0       	ldi	r22, 0x00	; 0
 4f8:	08 95       	ret

000004fa <__fp_nan>:
 4fa:	9f ef       	ldi	r25, 0xFF	; 255
 4fc:	80 ec       	ldi	r24, 0xC0	; 192
 4fe:	08 95       	ret

00000500 <__fp_pscA>:
 500:	00 24       	eor	r0, r0
 502:	0a 94       	dec	r0
 504:	16 16       	cp	r1, r22
 506:	17 06       	cpc	r1, r23
 508:	18 06       	cpc	r1, r24
 50a:	09 06       	cpc	r0, r25
 50c:	08 95       	ret

0000050e <__fp_pscB>:
 50e:	00 24       	eor	r0, r0
 510:	0a 94       	dec	r0
 512:	12 16       	cp	r1, r18
 514:	13 06       	cpc	r1, r19
 516:	14 06       	cpc	r1, r20
 518:	05 06       	cpc	r0, r21
 51a:	08 95       	ret

0000051c <__fp_round>:
 51c:	09 2e       	mov	r0, r25
 51e:	03 94       	inc	r0
 520:	00 0c       	add	r0, r0
 522:	11 f4       	brne	.+4      	; 0x528 <__fp_round+0xc>
 524:	88 23       	and	r24, r24
 526:	52 f0       	brmi	.+20     	; 0x53c <__fp_round+0x20>
 528:	bb 0f       	add	r27, r27
 52a:	40 f4       	brcc	.+16     	; 0x53c <__fp_round+0x20>
 52c:	bf 2b       	or	r27, r31
 52e:	11 f4       	brne	.+4      	; 0x534 <__fp_round+0x18>
 530:	60 ff       	sbrs	r22, 0
 532:	04 c0       	rjmp	.+8      	; 0x53c <__fp_round+0x20>
 534:	6f 5f       	subi	r22, 0xFF	; 255
 536:	7f 4f       	sbci	r23, 0xFF	; 255
 538:	8f 4f       	sbci	r24, 0xFF	; 255
 53a:	9f 4f       	sbci	r25, 0xFF	; 255
 53c:	08 95       	ret

0000053e <__fp_split3>:
 53e:	57 fd       	sbrc	r21, 7
 540:	90 58       	subi	r25, 0x80	; 128
 542:	44 0f       	add	r20, r20
 544:	55 1f       	adc	r21, r21
 546:	59 f0       	breq	.+22     	; 0x55e <__fp_splitA+0x10>
 548:	5f 3f       	cpi	r21, 0xFF	; 255
 54a:	71 f0       	breq	.+28     	; 0x568 <__fp_splitA+0x1a>
 54c:	47 95       	ror	r20

0000054e <__fp_splitA>:
 54e:	88 0f       	add	r24, r24
 550:	97 fb       	bst	r25, 7
 552:	99 1f       	adc	r25, r25
 554:	61 f0       	breq	.+24     	; 0x56e <__fp_splitA+0x20>
 556:	9f 3f       	cpi	r25, 0xFF	; 255
 558:	79 f0       	breq	.+30     	; 0x578 <__fp_splitA+0x2a>
 55a:	87 95       	ror	r24
 55c:	08 95       	ret
 55e:	12 16       	cp	r1, r18
 560:	13 06       	cpc	r1, r19
 562:	14 06       	cpc	r1, r20
 564:	55 1f       	adc	r21, r21
 566:	f2 cf       	rjmp	.-28     	; 0x54c <__fp_split3+0xe>
 568:	46 95       	lsr	r20
 56a:	f1 df       	rcall	.-30     	; 0x54e <__fp_splitA>
 56c:	08 c0       	rjmp	.+16     	; 0x57e <__fp_splitA+0x30>
 56e:	16 16       	cp	r1, r22
 570:	17 06       	cpc	r1, r23
 572:	18 06       	cpc	r1, r24
 574:	99 1f       	adc	r25, r25
 576:	f1 cf       	rjmp	.-30     	; 0x55a <__fp_splitA+0xc>
 578:	86 95       	lsr	r24
 57a:	71 05       	cpc	r23, r1
 57c:	61 05       	cpc	r22, r1
 57e:	08 94       	sec
 580:	08 95       	ret

00000582 <__fp_zero>:
 582:	e8 94       	clt

00000584 <__fp_szero>:
 584:	bb 27       	eor	r27, r27
 586:	66 27       	eor	r22, r22
 588:	77 27       	eor	r23, r23
 58a:	cb 01       	movw	r24, r22
 58c:	97 f9       	bld	r25, 7
 58e:	08 95       	ret

00000590 <__mulsf3>:
 590:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__mulsf3x>
 594:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__fp_round>
 598:	0e 94 80 02 	call	0x500	; 0x500 <__fp_pscA>
 59c:	38 f0       	brcs	.+14     	; 0x5ac <__mulsf3+0x1c>
 59e:	0e 94 87 02 	call	0x50e	; 0x50e <__fp_pscB>
 5a2:	20 f0       	brcs	.+8      	; 0x5ac <__mulsf3+0x1c>
 5a4:	95 23       	and	r25, r21
 5a6:	11 f0       	breq	.+4      	; 0x5ac <__mulsf3+0x1c>
 5a8:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__fp_inf>
 5ac:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__fp_nan>
 5b0:	11 24       	eor	r1, r1
 5b2:	0c 94 c2 02 	jmp	0x584	; 0x584 <__fp_szero>

000005b6 <__mulsf3x>:
 5b6:	0e 94 9f 02 	call	0x53e	; 0x53e <__fp_split3>
 5ba:	70 f3       	brcs	.-36     	; 0x598 <__mulsf3+0x8>

000005bc <__mulsf3_pse>:
 5bc:	95 9f       	mul	r25, r21
 5be:	c1 f3       	breq	.-16     	; 0x5b0 <__mulsf3+0x20>
 5c0:	95 0f       	add	r25, r21
 5c2:	50 e0       	ldi	r21, 0x00	; 0
 5c4:	55 1f       	adc	r21, r21
 5c6:	62 9f       	mul	r22, r18
 5c8:	f0 01       	movw	r30, r0
 5ca:	72 9f       	mul	r23, r18
 5cc:	bb 27       	eor	r27, r27
 5ce:	f0 0d       	add	r31, r0
 5d0:	b1 1d       	adc	r27, r1
 5d2:	63 9f       	mul	r22, r19
 5d4:	aa 27       	eor	r26, r26
 5d6:	f0 0d       	add	r31, r0
 5d8:	b1 1d       	adc	r27, r1
 5da:	aa 1f       	adc	r26, r26
 5dc:	64 9f       	mul	r22, r20
 5de:	66 27       	eor	r22, r22
 5e0:	b0 0d       	add	r27, r0
 5e2:	a1 1d       	adc	r26, r1
 5e4:	66 1f       	adc	r22, r22
 5e6:	82 9f       	mul	r24, r18
 5e8:	22 27       	eor	r18, r18
 5ea:	b0 0d       	add	r27, r0
 5ec:	a1 1d       	adc	r26, r1
 5ee:	62 1f       	adc	r22, r18
 5f0:	73 9f       	mul	r23, r19
 5f2:	b0 0d       	add	r27, r0
 5f4:	a1 1d       	adc	r26, r1
 5f6:	62 1f       	adc	r22, r18
 5f8:	83 9f       	mul	r24, r19
 5fa:	a0 0d       	add	r26, r0
 5fc:	61 1d       	adc	r22, r1
 5fe:	22 1f       	adc	r18, r18
 600:	74 9f       	mul	r23, r20
 602:	33 27       	eor	r19, r19
 604:	a0 0d       	add	r26, r0
 606:	61 1d       	adc	r22, r1
 608:	23 1f       	adc	r18, r19
 60a:	84 9f       	mul	r24, r20
 60c:	60 0d       	add	r22, r0
 60e:	21 1d       	adc	r18, r1
 610:	82 2f       	mov	r24, r18
 612:	76 2f       	mov	r23, r22
 614:	6a 2f       	mov	r22, r26
 616:	11 24       	eor	r1, r1
 618:	9f 57       	subi	r25, 0x7F	; 127
 61a:	50 40       	sbci	r21, 0x00	; 0
 61c:	9a f0       	brmi	.+38     	; 0x644 <__mulsf3_pse+0x88>
 61e:	f1 f0       	breq	.+60     	; 0x65c <__mulsf3_pse+0xa0>
 620:	88 23       	and	r24, r24
 622:	4a f0       	brmi	.+18     	; 0x636 <__mulsf3_pse+0x7a>
 624:	ee 0f       	add	r30, r30
 626:	ff 1f       	adc	r31, r31
 628:	bb 1f       	adc	r27, r27
 62a:	66 1f       	adc	r22, r22
 62c:	77 1f       	adc	r23, r23
 62e:	88 1f       	adc	r24, r24
 630:	91 50       	subi	r25, 0x01	; 1
 632:	50 40       	sbci	r21, 0x00	; 0
 634:	a9 f7       	brne	.-22     	; 0x620 <__mulsf3_pse+0x64>
 636:	9e 3f       	cpi	r25, 0xFE	; 254
 638:	51 05       	cpc	r21, r1
 63a:	80 f0       	brcs	.+32     	; 0x65c <__mulsf3_pse+0xa0>
 63c:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__fp_inf>
 640:	0c 94 c2 02 	jmp	0x584	; 0x584 <__fp_szero>
 644:	5f 3f       	cpi	r21, 0xFF	; 255
 646:	e4 f3       	brlt	.-8      	; 0x640 <__mulsf3_pse+0x84>
 648:	98 3e       	cpi	r25, 0xE8	; 232
 64a:	d4 f3       	brlt	.-12     	; 0x640 <__mulsf3_pse+0x84>
 64c:	86 95       	lsr	r24
 64e:	77 95       	ror	r23
 650:	67 95       	ror	r22
 652:	b7 95       	ror	r27
 654:	f7 95       	ror	r31
 656:	e7 95       	ror	r30
 658:	9f 5f       	subi	r25, 0xFF	; 255
 65a:	c1 f7       	brne	.-16     	; 0x64c <__mulsf3_pse+0x90>
 65c:	fe 2b       	or	r31, r30
 65e:	88 0f       	add	r24, r24
 660:	91 1d       	adc	r25, r1
 662:	96 95       	lsr	r25
 664:	87 95       	ror	r24
 666:	97 f9       	bld	r25, 7
 668:	08 95       	ret

0000066a <_exit>:
 66a:	f8 94       	cli

0000066c <__stop_program>:
 66c:	ff cf       	rjmp	.-2      	; 0x66c <__stop_program>
