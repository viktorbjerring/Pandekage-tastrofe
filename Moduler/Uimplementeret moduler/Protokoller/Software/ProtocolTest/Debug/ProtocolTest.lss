
ProtocolTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000082e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800100  00800100  0000082e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000082e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000860  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f9b  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5c  00000000  00000000  0000191b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a04  00000000  00000000  00002377  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  00002d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000823  00000000  00000000  00002fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000548  00000000  00000000  000037ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003d37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 31       	cpi	r26, 0x13	; 19
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 06 03 	call	0x60c	; 0x60c <main>
  88:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_SLAVE_sendData>:
	//Reset I2C module
	TWCR &= ~(1 << TWEN);

	I2C_MASTER_hw_mutex = false;
	return 	I2C_SEND_FAIL;
}
  90:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <I2C_SLAVE_startRecived>
  94:	99 23       	and	r25, r25
  96:	21 f0       	breq	.+8      	; 0xa0 <I2C_SLAVE_sendData+0x10>
  98:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <I2C_SLAVE_canSend>
  9c:	99 23       	and	r25, r25
  9e:	c1 f3       	breq	.-16     	; 0x90 <I2C_SLAVE_sendData>
  a0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <I2C_SLAVE_canSend>
  a4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <I2C_SLAVE_toSend>
  a8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <I2C_SLAVE_haveSended>
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <I2C_SLAVE_dataReady>
  b2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <I2C_SLAVE_beginHold>
  b6:	88 23       	and	r24, r24
  b8:	09 f4       	brne	.+2      	; 0xbc <I2C_SLAVE_sendData+0x2c>
  ba:	4a c0       	rjmp	.+148    	; 0x150 <I2C_SLAVE_sendData+0xc0>
  bc:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <I2C_SLAVE_beginHold>
  c0:	e8 e6       	ldi	r30, 0x68	; 104
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	8b 7f       	andi	r24, 0xFB	; 251
  c8:	80 83       	st	Z, r24
  ca:	2b b1       	in	r18, 0x0b	; 11
  cc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <I2C_SLAVE_toSend>
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	80 95       	com	r24
  d4:	90 95       	com	r25
  d6:	88 0f       	add	r24, r24
  d8:	89 2f       	mov	r24, r25
  da:	88 1f       	adc	r24, r24
  dc:	99 0b       	sbc	r25, r25
  de:	82 95       	swap	r24
  e0:	92 95       	swap	r25
  e2:	90 7f       	andi	r25, 0xF0	; 240
  e4:	98 27       	eor	r25, r24
  e6:	80 7f       	andi	r24, 0xF0	; 240
  e8:	98 27       	eor	r25, r24
  ea:	80 71       	andi	r24, 0x10	; 16
  ec:	92 2f       	mov	r25, r18
  ee:	9f 7e       	andi	r25, 0xEF	; 239
  f0:	89 0f       	add	r24, r25
  f2:	8a b9       	out	0x0a, r24	; 10
  f4:	2b b1       	in	r18, 0x0b	; 11
  f6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <I2C_SLAVE_toSend>
  fa:	88 1f       	adc	r24, r24
  fc:	88 27       	eor	r24, r24
  fe:	88 1f       	adc	r24, r24
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	82 95       	swap	r24
 104:	92 95       	swap	r25
 106:	90 7f       	andi	r25, 0xF0	; 240
 108:	98 27       	eor	r25, r24
 10a:	80 7f       	andi	r24, 0xF0	; 240
 10c:	98 27       	eor	r25, r24
 10e:	80 71       	andi	r24, 0x10	; 16
 110:	92 2f       	mov	r25, r18
 112:	9f 7e       	andi	r25, 0xEF	; 239
 114:	89 0f       	add	r24, r25
 116:	8b b9       	out	0x0b, r24	; 11
 118:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <I2C_SLAVE_haveSended>
 11c:	8f 5f       	subi	r24, 0xFF	; 255
 11e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <I2C_SLAVE_haveSended>
 122:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <I2C_SLAVE_toSend>
 126:	29 b1       	in	r18, 0x09	; 9
 128:	88 1f       	adc	r24, r24
 12a:	88 27       	eor	r24, r24
 12c:	88 1f       	adc	r24, r24
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	82 95       	swap	r24
 132:	92 95       	swap	r25
 134:	90 7f       	andi	r25, 0xF0	; 240
 136:	98 27       	eor	r25, r24
 138:	80 7f       	andi	r24, 0xF0	; 240
 13a:	98 27       	eor	r25, r24
 13c:	20 71       	andi	r18, 0x10	; 16
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	82 17       	cp	r24, r18
 142:	93 07       	cpc	r25, r19
 144:	71 f7       	brne	.-36     	; 0x122 <I2C_SLAVE_sendData+0x92>
 146:	e8 e6       	ldi	r30, 0x68	; 104
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	84 60       	ori	r24, 0x04	; 4
 14e:	80 83       	st	Z, r24
 150:	52 98       	cbi	0x0a, 2	; 10
 152:	5a 9a       	sbi	0x0b, 2	; 11
 154:	08 95       	ret

00000156 <I2C_SLAVE_init>:
 156:	e9 e6       	ldi	r30, 0x69	; 105
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	82 60       	ori	r24, 0x02	; 2
 15e:	80 83       	st	Z, r24
 160:	80 81       	ld	r24, Z
 162:	81 60       	ori	r24, 0x01	; 1
 164:	80 83       	st	Z, r24
 166:	e8 e6       	ldi	r30, 0x68	; 104
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	80 61       	ori	r24, 0x10	; 16
 16e:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>
 172:	80 81       	ld	r24, Z
 174:	84 60       	ori	r24, 0x04	; 4
 176:	80 83       	st	Z, r24
 178:	e8 9a       	sbi	0x1d, 0	; 29
 17a:	8a b1       	in	r24, 0x0a	; 10
 17c:	8b 7e       	andi	r24, 0xEB	; 235
 17e:	8a b9       	out	0x0a, r24	; 10
 180:	8b b1       	in	r24, 0x0b	; 11
 182:	84 61       	ori	r24, 0x14	; 20
 184:	8b b9       	out	0x0b, r24	; 11
 186:	08 95       	ret

00000188 <I2C_SLAVE_sendBit>:
 188:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <I2C_SLAVE_dataReady>
 18c:	91 30       	cpi	r25, 0x01	; 1
 18e:	41 f4       	brne	.+16     	; 0x1a0 <I2C_SLAVE_sendBit+0x18>
 190:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <I2C_SLAVE_toSend>
 194:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <I2C_SLAVE_tempSave>
 198:	92 e0       	ldi	r25, 0x02	; 2
 19a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <I2C_SLAVE_dataReady>
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <I2C_SLAVE_sendBit+0x1e>
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <I2C_SLAVE_dataReady>
 1a6:	87 95       	ror	r24
 1a8:	88 27       	eor	r24, r24
 1aa:	87 95       	ror	r24
 1ac:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <I2C_SLAVE_toSend>
 1b0:	87 e0       	ldi	r24, 0x07	; 7
 1b2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <I2C_SLAVE_haveSended>
 1b6:	08 95       	ret

000001b8 <I2C_SLAVE_beginSend>:
 1b8:	e9 e6       	ldi	r30, 0x69	; 105
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	82 60       	ori	r24, 0x02	; 2
 1c0:	80 83       	st	Z, r24
 1c2:	80 81       	ld	r24, Z
 1c4:	8e 7f       	andi	r24, 0xFE	; 254
 1c6:	80 83       	st	Z, r24
 1c8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <I2C_SLAVE_dataReady>
 1cc:	82 30       	cpi	r24, 0x02	; 2
 1ce:	21 f4       	brne	.+8      	; 0x1d8 <I2C_SLAVE_beginSend+0x20>
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <I2C_SLAVE_dataReady>
 1d6:	08 95       	ret
 1d8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <I2C_SLAVE_dataReady>
 1dc:	08 95       	ret

000001de <__vector_1>:
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	2f 93       	push	r18
 1ea:	3f 93       	push	r19
 1ec:	4f 93       	push	r20
 1ee:	5f 93       	push	r21
 1f0:	6f 93       	push	r22
 1f2:	7f 93       	push	r23
 1f4:	8f 93       	push	r24
 1f6:	9f 93       	push	r25
 1f8:	af 93       	push	r26
 1fa:	bf 93       	push	r27
 1fc:	ef 93       	push	r30
 1fe:	ff 93       	push	r31
 200:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <I2C_SLAVE_startRecived>
 204:	88 23       	and	r24, r24
 206:	09 f4       	brne	.+2      	; 0x20a <__vector_1+0x2c>
 208:	55 c1       	rjmp	.+682    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 20a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 20e:	83 70       	andi	r24, 0x03	; 3
 210:	83 30       	cpi	r24, 0x03	; 3
 212:	09 f0       	breq	.+2      	; 0x216 <__vector_1+0x38>
 214:	af c0       	rjmp	.+350    	; 0x374 <__vector_1+0x196>
 216:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <I2C_SLAVE_haveSended>
 21a:	88 30       	cpi	r24, 0x08	; 8
 21c:	40 f0       	brcs	.+16     	; 0x22e <__vector_1+0x50>
 21e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <I2C_SLAVE_haveSended>
 222:	8a b1       	in	r24, 0x0a	; 10
 224:	8b 7e       	andi	r24, 0xEB	; 235
 226:	8a b9       	out	0x0a, r24	; 10
 228:	8b b1       	in	r24, 0x0b	; 11
 22a:	84 61       	ori	r24, 0x14	; 20
 22c:	8b b9       	out	0x0b, r24	; 11
 22e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <I2C_SLAVE_recevedBits>
 232:	87 30       	cpi	r24, 0x07	; 7
 234:	20 f5       	brcc	.+72     	; 0x27e <__vector_1+0xa0>
 236:	66 e0       	ldi	r22, 0x06	; 6
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	68 1b       	sub	r22, r24
 23c:	71 09       	sbc	r23, r1
 23e:	21 e0       	ldi	r18, 0x01	; 1
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	a9 01       	movw	r20, r18
 244:	06 2e       	mov	r0, r22
 246:	02 c0       	rjmp	.+4      	; 0x24c <__vector_1+0x6e>
 248:	44 0f       	add	r20, r20
 24a:	55 1f       	adc	r21, r21
 24c:	0a 94       	dec	r0
 24e:	e2 f7       	brpl	.-8      	; 0x248 <__vector_1+0x6a>
 250:	99 b1       	in	r25, 0x09	; 9
 252:	54 2f       	mov	r21, r20
 254:	50 95       	com	r21
 256:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <I2C_SLAVE_recevedAddr>
 25a:	52 23       	and	r21, r18
 25c:	92 95       	swap	r25
 25e:	9f 70       	andi	r25, 0x0F	; 15
 260:	29 2f       	mov	r18, r25
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <__vector_1+0x8c>
 266:	22 0f       	add	r18, r18
 268:	33 1f       	adc	r19, r19
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <__vector_1+0x88>
 26e:	24 23       	and	r18, r20
 270:	25 0f       	add	r18, r21
 272:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <I2C_SLAVE_recevedAddr>
 276:	8f 5f       	subi	r24, 0xFF	; 255
 278:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <I2C_SLAVE_recevedBits>
 27c:	1b c1       	rjmp	.+566    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 27e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <I2C_SLAVE_recevedAddr>
 282:	90 37       	cpi	r25, 0x70	; 112
 284:	09 f0       	breq	.+2      	; 0x288 <__vector_1+0xaa>
 286:	16 c1       	rjmp	.+556    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 288:	88 30       	cpi	r24, 0x08	; 8
 28a:	b8 f4       	brcc	.+46     	; 0x2ba <__vector_1+0xdc>
 28c:	8f 5f       	subi	r24, 0xFF	; 255
 28e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <I2C_SLAVE_recevedBits>
 292:	89 b1       	in	r24, 0x09	; 9
 294:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 298:	9e 7f       	andi	r25, 0xFE	; 254
 29a:	82 95       	swap	r24
 29c:	81 70       	andi	r24, 0x01	; 1
 29e:	89 0f       	add	r24, r25
 2a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 2a4:	88 23       	and	r24, r24
 2a6:	19 f0       	breq	.+6      	; 0x2ae <__vector_1+0xd0>
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <I2C_SLAVE_beginHold>
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	0e 94 c4 00 	call	0x188	; 0x188 <I2C_SLAVE_sendBit>
 2b4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <I2C_SLAVE_beginSend>
 2b8:	fd c0       	rjmp	.+506    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 2ba:	81 31       	cpi	r24, 0x11	; 17
 2bc:	08 f0       	brcs	.+2      	; 0x2c0 <__vector_1+0xe2>
 2be:	fa c0       	rjmp	.+500    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 2c0:	6f e0       	ldi	r22, 0x0F	; 15
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	68 1b       	sub	r22, r24
 2c6:	71 09       	sbc	r23, r1
 2c8:	21 e0       	ldi	r18, 0x01	; 1
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	a9 01       	movw	r20, r18
 2ce:	06 2e       	mov	r0, r22
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <__vector_1+0xf8>
 2d2:	44 0f       	add	r20, r20
 2d4:	55 1f       	adc	r21, r21
 2d6:	0a 94       	dec	r0
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <__vector_1+0xf4>
 2da:	99 b1       	in	r25, 0x09	; 9
 2dc:	54 2f       	mov	r21, r20
 2de:	50 95       	com	r21
 2e0:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <I2C_SLAVE_recevedData>
 2e4:	52 23       	and	r21, r18
 2e6:	92 95       	swap	r25
 2e8:	9f 70       	andi	r25, 0x0F	; 15
 2ea:	29 2f       	mov	r18, r25
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <__vector_1+0x116>
 2f0:	22 0f       	add	r18, r18
 2f2:	33 1f       	adc	r19, r19
 2f4:	6a 95       	dec	r22
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <__vector_1+0x112>
 2f8:	24 23       	and	r18, r20
 2fa:	25 0f       	add	r18, r21
 2fc:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <I2C_SLAVE_recevedData>
 300:	8f 5f       	subi	r24, 0xFF	; 255
 302:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <I2C_SLAVE_recevedBits>
 306:	80 31       	cpi	r24, 0x10	; 16
 308:	09 f0       	breq	.+2      	; 0x30c <__vector_1+0x12e>
 30a:	d4 c0       	rjmp	.+424    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 30c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <I2C_SLAVE_full>
 310:	88 23       	and	r24, r24
 312:	69 f0       	breq	.+26     	; 0x32e <__vector_1+0x150>
 314:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <I2C_SLAVE_first>
 318:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <I2C_SLAVE_first>
 31c:	8f 5f       	subi	r24, 0xFF	; 255
 31e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <I2C_SLAVE_first>
 322:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <I2C_SLAVE_first>
 326:	82 30       	cpi	r24, 0x02	; 2
 328:	10 f0       	brcs	.+4      	; 0x32e <__vector_1+0x150>
 32a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <I2C_SLAVE_first>
 32e:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <I2C_SLAVE_last>
 332:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <I2C_SLAVE_last>
 336:	8f 5f       	subi	r24, 0xFF	; 255
 338:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <I2C_SLAVE_last>
 33c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <I2C_SLAVE_last>
 340:	82 30       	cpi	r24, 0x02	; 2
 342:	10 f0       	brcs	.+4      	; 0x348 <__vector_1+0x16a>
 344:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <I2C_SLAVE_last>
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	e2 5f       	subi	r30, 0xF2	; 242
 34c:	fe 4f       	sbci	r31, 0xFE	; 254
 34e:	20 83       	st	Z, r18
 350:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <I2C_SLAVE_last>
 354:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <I2C_SLAVE_first>
 358:	98 13       	cpse	r25, r24
 35a:	03 c0       	rjmp	.+6      	; 0x362 <__vector_1+0x184>
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <I2C_SLAVE_full>
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	0e 94 c4 00 	call	0x188	; 0x188 <I2C_SLAVE_sendBit>
 368:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <I2C_SLAVE_beginSend>
 36c:	88 e0       	ldi	r24, 0x08	; 8
 36e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <I2C_SLAVE_recevedBits>
 372:	a0 c0       	rjmp	.+320    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 374:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 378:	83 70       	andi	r24, 0x03	; 3
 37a:	82 30       	cpi	r24, 0x02	; 2
 37c:	09 f0       	breq	.+2      	; 0x380 <__vector_1+0x1a2>
 37e:	9a c0       	rjmp	.+308    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 380:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <I2C_SLAVE_haveSended>
 384:	38 30       	cpi	r19, 0x08	; 8
 386:	08 f4       	brcc	.+2      	; 0x38a <__vector_1+0x1ac>
 388:	5d c0       	rjmp	.+186    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 38a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <I2C_SLAVE_dataReady>
 38e:	82 50       	subi	r24, 0x02	; 2
 390:	82 30       	cpi	r24, 0x02	; 2
 392:	c8 f5       	brcc	.+114    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <I2C_SLAVE_dataReady>
 39a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_SLAVE_tempSave>
 39e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <I2C_SLAVE_toSend>
 3a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 3a6:	88 23       	and	r24, r24
 3a8:	59 f1       	breq	.+86     	; 0x400 <__LOCK_REGION_LENGTH__>
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <I2C_SLAVE_haveSended>
 3b0:	2a b1       	in	r18, 0x0a	; 10
 3b2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <I2C_SLAVE_toSend>
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	80 95       	com	r24
 3ba:	90 95       	com	r25
 3bc:	88 0f       	add	r24, r24
 3be:	89 2f       	mov	r24, r25
 3c0:	88 1f       	adc	r24, r24
 3c2:	99 0b       	sbc	r25, r25
 3c4:	82 95       	swap	r24
 3c6:	92 95       	swap	r25
 3c8:	90 7f       	andi	r25, 0xF0	; 240
 3ca:	98 27       	eor	r25, r24
 3cc:	80 7f       	andi	r24, 0xF0	; 240
 3ce:	98 27       	eor	r25, r24
 3d0:	80 71       	andi	r24, 0x10	; 16
 3d2:	92 2f       	mov	r25, r18
 3d4:	9f 7e       	andi	r25, 0xEF	; 239
 3d6:	89 0f       	add	r24, r25
 3d8:	8a b9       	out	0x0a, r24	; 10
 3da:	2b b1       	in	r18, 0x0b	; 11
 3dc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <I2C_SLAVE_toSend>
 3e0:	88 1f       	adc	r24, r24
 3e2:	88 27       	eor	r24, r24
 3e4:	88 1f       	adc	r24, r24
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	82 95       	swap	r24
 3ea:	92 95       	swap	r25
 3ec:	90 7f       	andi	r25, 0xF0	; 240
 3ee:	98 27       	eor	r25, r24
 3f0:	80 7f       	andi	r24, 0xF0	; 240
 3f2:	98 27       	eor	r25, r24
 3f4:	80 71       	andi	r24, 0x10	; 16
 3f6:	92 2f       	mov	r25, r18
 3f8:	9f 7e       	andi	r25, 0xEF	; 239
 3fa:	89 0f       	add	r24, r25
 3fc:	8b b9       	out	0x0b, r24	; 11
 3fe:	07 c0       	rjmp	.+14     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 400:	54 98       	cbi	0x0a, 4	; 10
 402:	5c 9a       	sbi	0x0b, 4	; 11
 404:	04 c0       	rjmp	.+8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 406:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <I2C_SLAVE_dataReady>
 40a:	54 98       	cbi	0x0a, 4	; 10
 40c:	5c 9a       	sbi	0x0b, 4	; 11
 40e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <I2C_SLAVE_beginHold>
 412:	88 23       	and	r24, r24
 414:	71 f0       	breq	.+28     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 416:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <I2C_SLAVE_dataReady>
 41a:	81 50       	subi	r24, 0x01	; 1
 41c:	82 30       	cpi	r24, 0x02	; 2
 41e:	18 f4       	brcc	.+6      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 420:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <I2C_SLAVE_beginHold>
 424:	47 c0       	rjmp	.+142    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <I2C_SLAVE_canSend>
 42c:	52 9a       	sbi	0x0a, 2	; 10
 42e:	5a 98       	cbi	0x0b, 2	; 11
 430:	41 c0       	rjmp	.+130    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 432:	e9 e6       	ldi	r30, 0x69	; 105
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	80 81       	ld	r24, Z
 438:	82 60       	ori	r24, 0x02	; 2
 43a:	80 83       	st	Z, r24
 43c:	80 81       	ld	r24, Z
 43e:	81 60       	ori	r24, 0x01	; 1
 440:	80 83       	st	Z, r24
 442:	38 c0       	rjmp	.+112    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 444:	2a b1       	in	r18, 0x0a	; 10
 446:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <I2C_SLAVE_toSend>
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	80 95       	com	r24
 44e:	90 95       	com	r25
 450:	47 e0       	ldi	r20, 0x07	; 7
 452:	50 e0       	ldi	r21, 0x00	; 0
 454:	ba 01       	movw	r22, r20
 456:	63 1b       	sub	r22, r19
 458:	71 09       	sbc	r23, r1
 45a:	02 c0       	rjmp	.+4      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 45c:	95 95       	asr	r25
 45e:	87 95       	ror	r24
 460:	6a 95       	dec	r22
 462:	e2 f7       	brpl	.-8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 464:	82 95       	swap	r24
 466:	92 95       	swap	r25
 468:	90 7f       	andi	r25, 0xF0	; 240
 46a:	98 27       	eor	r25, r24
 46c:	80 7f       	andi	r24, 0xF0	; 240
 46e:	98 27       	eor	r25, r24
 470:	80 71       	andi	r24, 0x10	; 16
 472:	92 2f       	mov	r25, r18
 474:	9f 7e       	andi	r25, 0xEF	; 239
 476:	89 0f       	add	r24, r25
 478:	8a b9       	out	0x0a, r24	; 10
 47a:	2b b1       	in	r18, 0x0b	; 11
 47c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <I2C_SLAVE_toSend>
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <I2C_SLAVE_haveSended>
 486:	43 1b       	sub	r20, r19
 488:	51 09       	sbc	r21, r1
 48a:	02 c0       	rjmp	.+4      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 48c:	95 95       	asr	r25
 48e:	87 95       	ror	r24
 490:	4a 95       	dec	r20
 492:	e2 f7       	brpl	.-8      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 494:	82 95       	swap	r24
 496:	92 95       	swap	r25
 498:	90 7f       	andi	r25, 0xF0	; 240
 49a:	98 27       	eor	r25, r24
 49c:	80 7f       	andi	r24, 0xF0	; 240
 49e:	98 27       	eor	r25, r24
 4a0:	80 71       	andi	r24, 0x10	; 16
 4a2:	92 2f       	mov	r25, r18
 4a4:	9f 7e       	andi	r25, 0xEF	; 239
 4a6:	89 0f       	add	r24, r25
 4a8:	8b b9       	out	0x0b, r24	; 11
 4aa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <I2C_SLAVE_haveSended>
 4ae:	8f 5f       	subi	r24, 0xFF	; 255
 4b0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <I2C_SLAVE_haveSended>
 4b4:	ff 91       	pop	r31
 4b6:	ef 91       	pop	r30
 4b8:	bf 91       	pop	r27
 4ba:	af 91       	pop	r26
 4bc:	9f 91       	pop	r25
 4be:	8f 91       	pop	r24
 4c0:	7f 91       	pop	r23
 4c2:	6f 91       	pop	r22
 4c4:	5f 91       	pop	r21
 4c6:	4f 91       	pop	r20
 4c8:	3f 91       	pop	r19
 4ca:	2f 91       	pop	r18
 4cc:	0f 90       	pop	r0
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	0f 90       	pop	r0
 4d2:	1f 90       	pop	r1
 4d4:	18 95       	reti

000004d6 <__vector_5>:
 4d6:	1f 92       	push	r1
 4d8:	0f 92       	push	r0
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	0f 92       	push	r0
 4de:	11 24       	eor	r1, r1
 4e0:	8f 93       	push	r24
 4e2:	ef 93       	push	r30
 4e4:	ff 93       	push	r31
 4e6:	4a 9b       	sbis	0x09, 2	; 9
 4e8:	1e c0       	rjmp	.+60     	; 0x526 <__vector_5+0x50>
 4ea:	4c 9b       	sbis	0x09, 4	; 9
 4ec:	03 c0       	rjmp	.+6      	; 0x4f4 <__vector_5+0x1e>
 4ee:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <I2C_SLAVE_startRecived>
 4f2:	03 c0       	rjmp	.+6      	; 0x4fa <__vector_5+0x24>
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <I2C_SLAVE_startRecived>
 4fa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <I2C_SLAVE_startRecived>
 4fe:	81 11       	cpse	r24, r1
 500:	12 c0       	rjmp	.+36     	; 0x526 <__vector_5+0x50>
 502:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <I2C_SLAVE_beginHold>
 506:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <I2C_SLAVE_canSend>
 50a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <I2C_SLAVE_recevedAddr>
 50e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 512:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <I2C_SLAVE_recevedBits>
 516:	e9 e6       	ldi	r30, 0x69	; 105
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	80 81       	ld	r24, Z
 51c:	82 60       	ori	r24, 0x02	; 2
 51e:	80 83       	st	Z, r24
 520:	80 81       	ld	r24, Z
 522:	81 60       	ori	r24, 0x01	; 1
 524:	80 83       	st	Z, r24
 526:	ff 91       	pop	r31
 528:	ef 91       	pop	r30
 52a:	8f 91       	pop	r24
 52c:	0f 90       	pop	r0
 52e:	0f be       	out	0x3f, r0	; 63
 530:	0f 90       	pop	r0
 532:	1f 90       	pop	r1
 534:	18 95       	reti

00000536 <I2C_MASTER_readData>:

I2C_err_t I2C_MASTER_readData(char addr) {

	//Lock mutex
	if (I2C_MASTER_hw_mutex)
 536:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <I2C_MASTER_hw_mutex>
 53a:	91 11       	cpse	r25, r1
 53c:	37 c0       	rjmp	.+110    	; 0x5ac <I2C_MASTER_readData+0x76>
	return I2C_NOT_EXCLUSIVE;
	
	I2C_MASTER_hw_mutex = true;
 53e:	91 e0       	ldi	r25, 0x01	; 1
 540:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <I2C_MASTER_hw_mutex>

	//Start by sending a start condition
	TWCR = (1 << TWEN) | (1 << TWSTA) | (1 << TWINT);
 544:	94 ea       	ldi	r25, 0xA4	; 164
 546:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	//Wait for start to transmit
	while (!(TWCR & (1<<TWINT)));
 54a:	ec eb       	ldi	r30, 0xBC	; 188
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	90 81       	ld	r25, Z
 550:	99 23       	and	r25, r25
 552:	ec f7       	brge	.-6      	; 0x54e <I2C_MASTER_readData+0x18>
	if ((TWSR & 0xF8) != 0x08)
 554:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 558:	98 7f       	andi	r25, 0xF8	; 248
 55a:	98 30       	cpi	r25, 0x08	; 8
 55c:	b1 f4       	brne	.+44     	; 0x58a <I2C_MASTER_readData+0x54>
	goto I2C_read_fail;
	
	
	//Insert slave ADDR and read bit to data register
	TWDR = (addr << 1) + I2C_read;
 55e:	88 0f       	add	r24, r24
 560:	8f 5f       	subi	r24, 0xFF	; 255
 562:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	
	//Send addr and R
	TWCR = (1 << TWEN) | (1 << TWINT);
 566:	84 e8       	ldi	r24, 0x84	; 132
 568:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	//Wait for status
	while (!(TWCR & (1 << TWINT))){}
 56c:	ec eb       	ldi	r30, 0xBC	; 188
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	80 81       	ld	r24, Z
 572:	88 23       	and	r24, r24
 574:	ec f7       	brge	.-6      	; 0x570 <I2C_MASTER_readData+0x3a>
	if ((TWSR & 0xF8) == 0x48)
 576:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 57a:	88 7f       	andi	r24, 0xF8	; 248
 57c:	88 34       	cpi	r24, 0x48	; 72
 57e:	29 f0       	breq	.+10     	; 0x58a <I2C_MASTER_readData+0x54>
	goto I2C_read_fail;
	//Enable read interrupt, so CPU can do other stuff
	TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT);
 580:	85 e8       	ldi	r24, 0x85	; 133
 582:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	return I2C_OK;
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	08 95       	ret
	//Do NOT unlock mutex before data is read
	
	I2C_read_fail:
	//Send stop and stop interrupts
	TWCR = (1 << TWEN) | (1 << TWSTO) | (1 << TWINT);
 58a:	84 e9       	ldi	r24, 0x94	; 148
 58c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	//Wait for stop-bit send
	while(TWCR & (1 << TWSTO));
 590:	ec eb       	ldi	r30, 0xBC	; 188
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	80 81       	ld	r24, Z
 596:	84 fd       	sbrc	r24, 4
 598:	fd cf       	rjmp	.-6      	; 0x594 <I2C_MASTER_readData+0x5e>

	//Reset I2C module
	TWCR &= ~(1 << TWEN);
 59a:	ec eb       	ldi	r30, 0xBC	; 188
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	80 81       	ld	r24, Z
 5a0:	8b 7f       	andi	r24, 0xFB	; 251
 5a2:	80 83       	st	Z, r24

	I2C_MASTER_hw_mutex = false;
 5a4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <I2C_MASTER_hw_mutex>
	return I2C_READ_FAIL;
 5a8:	82 e0       	ldi	r24, 0x02	; 2
 5aa:	08 95       	ret

I2C_err_t I2C_MASTER_readData(char addr) {

	//Lock mutex
	if (I2C_MASTER_hw_mutex)
	return I2C_NOT_EXCLUSIVE;
 5ac:	83 e0       	ldi	r24, 0x03	; 3
	//Reset I2C module
	TWCR &= ~(1 << TWEN);

	I2C_MASTER_hw_mutex = false;
	return I2C_READ_FAIL;
}
 5ae:	08 95       	ret

000005b0 <I2C_MASTER_checkData>:

volatile bool I2C_MASTER_checkData() {
	return data_ready_flag;
 5b0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <data_ready_flag>
}
 5b4:	08 95       	ret

000005b6 <I2C_MASTER_getData>:

char I2C_MASTER_getData() {
	
	//Block if no data
	while(!I2C_MASTER_checkData());
 5b6:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <I2C_MASTER_checkData>
 5ba:	88 23       	and	r24, r24
 5bc:	e1 f3       	breq	.-8      	; 0x5b6 <I2C_MASTER_getData>
	
	//Update status
	data_ready_flag = false;
 5be:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <data_ready_flag>
	
	//Return data
	return local_read_data;
 5c2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <local_read_data>
}
 5c6:	08 95       	ret

000005c8 <__vector_24>:

//Read data from TWI
ISR(TWI_vect) {
 5c8:	1f 92       	push	r1
 5ca:	0f 92       	push	r0
 5cc:	0f b6       	in	r0, 0x3f	; 63
 5ce:	0f 92       	push	r0
 5d0:	11 24       	eor	r1, r1
 5d2:	8f 93       	push	r24
 5d4:	ef 93       	push	r30
 5d6:	ff 93       	push	r31

	//Save data
	local_read_data = TWDR;
 5d8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 5dc:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <local_read_data>
	
	//Set flag
	data_ready_flag = true;
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <data_ready_flag>
	
	//Send stop and stop interrupts
	TWCR = (1 << TWEN) | (1 << TWSTO) | (1 << TWINT);
 5e6:	84 e9       	ldi	r24, 0x94	; 148
 5e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	//Enable interrupt nesting
	sei();
 5ec:	78 94       	sei
	
	//Wait for stop-bit send
	while(TWCR & (1 << TWSTO));
 5ee:	ec eb       	ldi	r30, 0xBC	; 188
 5f0:	f0 e0       	ldi	r31, 0x00	; 0
 5f2:	80 81       	ld	r24, Z
 5f4:	84 fd       	sbrc	r24, 4
 5f6:	fd cf       	rjmp	.-6      	; 0x5f2 <__vector_24+0x2a>

	//Unlock mutex from read
	I2C_MASTER_hw_mutex = false;
 5f8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <I2C_MASTER_hw_mutex>
	
}
 5fc:	ff 91       	pop	r31
 5fe:	ef 91       	pop	r30
 600:	8f 91       	pop	r24
 602:	0f 90       	pop	r0
 604:	0f be       	out	0x3f, r0	; 63
 606:	0f 90       	pop	r0
 608:	1f 90       	pop	r1
 60a:	18 95       	reti

0000060c <main>:

void wait();

int main(void)
{
	DDRB|= 1<<5 ;
 60c:	25 9a       	sbi	0x04, 5	; 4
	PORTB = 0 << 5;
 60e:	15 b8       	out	0x05, r1	; 5
	uint8_t c = 0x00;
	I2C_SLAVE_init();
 610:	0e 94 ab 00 	call	0x156	; 0x156 <I2C_SLAVE_init>
static volatile uint8_t local_read_data = 0;
static volatile bool data_ready_flag = false;

void I2C_MASTER_init(char bitRate, I2C_MASTER_prescale_t pre)
{
	TWBR = bitRate;	//Set bitRate
 614:	8f ef       	ldi	r24, 0xFF	; 255
 616:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
	TWSR = (char)pre;	//Set prescaler
 61a:	83 e0       	ldi	r24, 0x03	; 3
 61c:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	
	TWCR = (1 << TWEN);	//Setup TWI to send NACK when data is recieved and enable HW
 620:	84 e0       	ldi	r24, 0x04	; 4
 622:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	I2C_MASTER_init(255,I2C_MASTER_PRESCALE_64);
	I2C_SLAVE_SCL_INT_ENAB(1);
 626:	e8 9a       	sbi	0x1d, 0	; 29
	sei();
 628:	78 94       	sei
	initUART(9600, 8, 1, 0);
 62a:	00 e0       	ldi	r16, 0x00	; 0
 62c:	21 e0       	ldi	r18, 0x01	; 1
 62e:	48 e0       	ldi	r20, 0x08	; 8
 630:	60 e8       	ldi	r22, 0x80	; 128
 632:	75 e2       	ldi	r23, 0x25	; 37
 634:	80 e0       	ldi	r24, 0x00	; 0
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	0e 94 42 03 	call	0x684	; 0x684 <initUART>

int main(void)
{
	DDRB|= 1<<5 ;
	PORTB = 0 << 5;
	uint8_t c = 0x00;
 63c:	c0 e0       	ldi	r28, 0x00	; 0
	initUART(9600, 8, 1, 0);
	//DDRB = 0x1<<5;
	//sendChar('A');
    while (1) 
    {
		I2C_SLAVE_sendData(c);
 63e:	8c 2f       	mov	r24, r28
 640:	0e 94 48 00 	call	0x90	; 0x90 <I2C_SLAVE_sendData>
		I2C_MASTER_readData(0x70);
 644:	80 e7       	ldi	r24, 0x70	; 112
 646:	0e 94 9b 02 	call	0x536	; 0x536 <I2C_MASTER_readData>
		PORTB = 0 << 5;
 64a:	15 b8       	out	0x05, r1	; 5
		if(c == 255)
 64c:	cf 3f       	cpi	r28, 0xFF	; 255
 64e:	11 f0       	breq	.+4      	; 0x654 <main+0x48>
		{
			c = 0;
		}
		else
		{
			c++;
 650:	cf 5f       	subi	r28, 0xFF	; 255
 652:	01 c0       	rjmp	.+2      	; 0x656 <main+0x4a>
		I2C_SLAVE_sendData(c);
		I2C_MASTER_readData(0x70);
		PORTB = 0 << 5;
		if(c == 255)
		{
			c = 0;
 654:	c0 e0       	ldi	r28, 0x00	; 0
		}
		else
		{
			c++;
		}
		wait();
 656:	0e 94 32 03 	call	0x664	; 0x664 <wait>
		sendChar(I2C_MASTER_getData());
 65a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <I2C_MASTER_getData>
 65e:	0e 94 b1 03 	call	0x762	; 0x762 <sendChar>
		
		
    }
 662:	ed cf       	rjmp	.-38     	; 0x63e <main+0x32>

00000664 <wait>:
}

#pragma GCC optimize 0
void wait()
{
 664:	cf 93       	push	r28
 666:	df 93       	push	r29
 668:	cd b7       	in	r28, 0x3d	; 61
 66a:	de b7       	in	r29, 0x3e	; 62
	while(!I2C_MASTER_checkData())
 66c:	00 00       	nop
 66e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <I2C_MASTER_checkData>
 672:	98 2f       	mov	r25, r24
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	89 27       	eor	r24, r25
 678:	88 23       	and	r24, r24
 67a:	c9 f7       	brne	.-14     	; 0x66e <wait+0xa>
	{
	}
}
 67c:	00 00       	nop
 67e:	df 91       	pop	r29
 680:	cf 91       	pop	r28
 682:	08 95       	ret

00000684 <initUART>:
char readChar()
{
	while(!(UCSR0A & (1<<7)))
	{}
	return UDR0;
}
 684:	cf 92       	push	r12
 686:	df 92       	push	r13
 688:	ef 92       	push	r14
 68a:	ff 92       	push	r15
 68c:	0f 93       	push	r16
 68e:	6b 01       	movw	r12, r22
 690:	7c 01       	movw	r14, r24
 692:	3c e2       	ldi	r19, 0x2C	; 44
 694:	c3 1a       	sub	r12, r19
 696:	31 e0       	ldi	r19, 0x01	; 1
 698:	d3 0a       	sbc	r13, r19
 69a:	e1 08       	sbc	r14, r1
 69c:	f1 08       	sbc	r15, r1
 69e:	35 ed       	ldi	r19, 0xD5	; 213
 6a0:	c3 16       	cp	r12, r19
 6a2:	30 ec       	ldi	r19, 0xC0	; 192
 6a4:	d3 06       	cpc	r13, r19
 6a6:	31 e0       	ldi	r19, 0x01	; 1
 6a8:	e3 06       	cpc	r14, r19
 6aa:	f1 04       	cpc	r15, r1
 6ac:	08 f0       	brcs	.+2      	; 0x6b0 <initUART+0x2c>
 6ae:	53 c0       	rjmp	.+166    	; 0x756 <initUART+0xd2>
 6b0:	45 50       	subi	r20, 0x05	; 5
 6b2:	44 30       	cpi	r20, 0x04	; 4
 6b4:	08 f0       	brcs	.+2      	; 0x6b8 <initUART+0x34>
 6b6:	4f c0       	rjmp	.+158    	; 0x756 <initUART+0xd2>
 6b8:	38 e1       	ldi	r19, 0x18	; 24
 6ba:	30 93 c1 00 	sts	0x00C1, r19	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 6be:	44 0f       	add	r20, r20
 6c0:	40 93 c2 00 	sts	0x00C2, r20	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 6c4:	22 23       	and	r18, r18
 6c6:	29 f0       	breq	.+10     	; 0x6d2 <initUART+0x4e>
 6c8:	e1 ec       	ldi	r30, 0xC1	; 193
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	20 81       	ld	r18, Z
 6ce:	20 68       	ori	r18, 0x80	; 128
 6d0:	20 83       	st	Z, r18
 6d2:	05 34       	cpi	r16, 0x45	; 69
 6d4:	31 f4       	brne	.+12     	; 0x6e2 <initUART+0x5e>
 6d6:	e2 ec       	ldi	r30, 0xC2	; 194
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	20 81       	ld	r18, Z
 6dc:	20 62       	ori	r18, 0x20	; 32
 6de:	20 83       	st	Z, r18
 6e0:	07 c0       	rjmp	.+14     	; 0x6f0 <initUART+0x6c>
 6e2:	0f 34       	cpi	r16, 0x4F	; 79
 6e4:	29 f4       	brne	.+10     	; 0x6f0 <initUART+0x6c>
 6e6:	e2 ec       	ldi	r30, 0xC2	; 194
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	20 81       	ld	r18, Z
 6ec:	20 63       	ori	r18, 0x30	; 48
 6ee:	20 83       	st	Z, r18
 6f0:	6b 01       	movw	r12, r22
 6f2:	7c 01       	movw	r14, r24
 6f4:	20 e8       	ldi	r18, 0x80	; 128
 6f6:	c2 0e       	add	r12, r18
 6f8:	24 e8       	ldi	r18, 0x84	; 132
 6fa:	d2 1e       	adc	r13, r18
 6fc:	2e e1       	ldi	r18, 0x1E	; 30
 6fe:	e2 1e       	adc	r14, r18
 700:	f1 1c       	adc	r15, r1
 702:	cc 0c       	add	r12, r12
 704:	dd 1c       	adc	r13, r13
 706:	ee 1c       	adc	r14, r14
 708:	ff 1c       	adc	r15, r15
 70a:	cc 0c       	add	r12, r12
 70c:	dd 1c       	adc	r13, r13
 70e:	ee 1c       	adc	r14, r14
 710:	ff 1c       	adc	r15, r15
 712:	cc 0c       	add	r12, r12
 714:	dd 1c       	adc	r13, r13
 716:	ee 1c       	adc	r14, r14
 718:	ff 1c       	adc	r15, r15
 71a:	dc 01       	movw	r26, r24
 71c:	cb 01       	movw	r24, r22
 71e:	88 0f       	add	r24, r24
 720:	99 1f       	adc	r25, r25
 722:	aa 1f       	adc	r26, r26
 724:	bb 1f       	adc	r27, r27
 726:	88 0f       	add	r24, r24
 728:	99 1f       	adc	r25, r25
 72a:	aa 1f       	adc	r26, r26
 72c:	bb 1f       	adc	r27, r27
 72e:	9c 01       	movw	r18, r24
 730:	ad 01       	movw	r20, r26
 732:	22 0f       	add	r18, r18
 734:	33 1f       	adc	r19, r19
 736:	44 1f       	adc	r20, r20
 738:	55 1f       	adc	r21, r21
 73a:	22 0f       	add	r18, r18
 73c:	33 1f       	adc	r19, r19
 73e:	44 1f       	adc	r20, r20
 740:	55 1f       	adc	r21, r21
 742:	c7 01       	movw	r24, r14
 744:	b6 01       	movw	r22, r12
 746:	0e 94 b9 03 	call	0x772	; 0x772 <__udivmodsi4>
 74a:	21 50       	subi	r18, 0x01	; 1
 74c:	31 09       	sbc	r19, r1
 74e:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 752:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 756:	0f 91       	pop	r16
 758:	ff 90       	pop	r15
 75a:	ef 90       	pop	r14
 75c:	df 90       	pop	r13
 75e:	cf 90       	pop	r12
 760:	08 95       	ret

00000762 <sendChar>:
void sendChar(char sChar)
{
	while(!(UCSR0A & (1<<5)))
 762:	e0 ec       	ldi	r30, 0xC0	; 192
 764:	f0 e0       	ldi	r31, 0x00	; 0
 766:	90 81       	ld	r25, Z
 768:	95 ff       	sbrs	r25, 5
 76a:	fd cf       	rjmp	.-6      	; 0x766 <sendChar+0x4>
	{}
	UDR0 = sChar;
 76c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 770:	08 95       	ret

00000772 <__udivmodsi4>:
 772:	a1 e2       	ldi	r26, 0x21	; 33
 774:	1a 2e       	mov	r1, r26
 776:	aa 1b       	sub	r26, r26
 778:	bb 1b       	sub	r27, r27
 77a:	fd 01       	movw	r30, r26
 77c:	0d c0       	rjmp	.+26     	; 0x798 <__udivmodsi4_ep>

0000077e <__udivmodsi4_loop>:
 77e:	aa 1f       	adc	r26, r26
 780:	bb 1f       	adc	r27, r27
 782:	ee 1f       	adc	r30, r30
 784:	ff 1f       	adc	r31, r31
 786:	a2 17       	cp	r26, r18
 788:	b3 07       	cpc	r27, r19
 78a:	e4 07       	cpc	r30, r20
 78c:	f5 07       	cpc	r31, r21
 78e:	20 f0       	brcs	.+8      	; 0x798 <__udivmodsi4_ep>
 790:	a2 1b       	sub	r26, r18
 792:	b3 0b       	sbc	r27, r19
 794:	e4 0b       	sbc	r30, r20
 796:	f5 0b       	sbc	r31, r21

00000798 <__udivmodsi4_ep>:
 798:	66 1f       	adc	r22, r22
 79a:	77 1f       	adc	r23, r23
 79c:	88 1f       	adc	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	1a 94       	dec	r1
 7a2:	69 f7       	brne	.-38     	; 0x77e <__udivmodsi4_loop>
 7a4:	60 95       	com	r22
 7a6:	70 95       	com	r23
 7a8:	80 95       	com	r24
 7aa:	90 95       	com	r25
 7ac:	9b 01       	movw	r18, r22
 7ae:	ac 01       	movw	r20, r24
 7b0:	bd 01       	movw	r22, r26
 7b2:	cf 01       	movw	r24, r30
 7b4:	08 95       	ret

000007b6 <_exit>:
 7b6:	f8 94       	cli

000007b8 <__stop_program>:
 7b8:	ff cf       	rjmp	.-2      	; 0x7b8 <__stop_program>
