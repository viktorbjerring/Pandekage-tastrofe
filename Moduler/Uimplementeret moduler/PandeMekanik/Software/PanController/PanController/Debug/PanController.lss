
PanController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000f66  00000ffa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  00800102  00800102  00000ffc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000102c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000100c  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000094a  00000000  00000000  00002158  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ad1  00000000  00000000  00002aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e8  00000000  00000000  00003574  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000084d  00000000  00000000  0000385c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000069b  00000000  00000000  000040a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004744  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 13 01 	jmp	0x226	; 0x226 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 32       	cpi	r26, 0x28	; 40
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 27 05 	call	0xa4e	; 0xa4e <main>
  9e:	0c 94 b1 07 	jmp	0xf62	; 0xf62 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_SLAVE_sendBit>:

static void I2C_SLAVE_sendBit(char bit)
{
	//Workaround implementer so ack-bit can be send without the toSend buffer is lost.
	//If data buffer is already updated the toSend buffer is temporarily stored.
	if(I2C_SLAVE_dataReady == 1)
  a6:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <I2C_SLAVE_dataReady>
  aa:	91 30       	cpi	r25, 0x01	; 1
  ac:	41 f4       	brne	.+16     	; 0xbe <I2C_SLAVE_sendBit+0x18>
	{
		//Saves  toSend in temporary buffer.
		I2C_SLAVE_tempSave = I2C_SLAVE_toSend;
  ae:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <I2C_SLAVE_toSend>
  b2:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <I2C_SLAVE_tempSave>
		//Sets data ready to 2 to indicate that the send buffer should be reverted back to the temporary buffer after sending.
		I2C_SLAVE_dataReady = 2;
  b6:	92 e0       	ldi	r25, 0x02	; 2
  b8:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <I2C_SLAVE_dataReady>
  bc:	03 c0       	rjmp	.+6      	; 0xc4 <I2C_SLAVE_sendBit+0x1e>
	}
	else
	{
		//If the data buffer isn't set, then there is no need to store anything in the temporary buffer.
		I2C_SLAVE_dataReady = 1;
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <I2C_SLAVE_dataReady>
	}
	//Only one bit should be send, therefore bit number 7 is set high and have sended
	//is set to 7, so the byte sending functionality can be utilized for sending only one bit.
	I2C_SLAVE_toSend = bit << 7;
  c4:	87 95       	ror	r24
  c6:	88 27       	eor	r24, r24
  c8:	87 95       	ror	r24
  ca:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <I2C_SLAVE_toSend>
	I2C_SLAVE_haveSended = 7;
  ce:	87 e0       	ldi	r24, 0x07	; 7
  d0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <I2C_SLAVE_haveSended>
  d4:	08 95       	ret

000000d6 <I2C_SLAVE_beginSend>:
}

static void I2C_SLAVE_beginSend()
{
	//sending bits should be updated on a falling edge. SCL int trigger is changed accordingly.
	I2C_SLAVE_SCL_FALLING();
  d6:	e9 e6       	ldi	r30, 0x69	; 105
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	80 83       	st	Z, r24
  e0:	80 81       	ld	r24, Z
  e2:	8e 7f       	andi	r24, 0xFE	; 254
  e4:	80 83       	st	Z, r24
	//If the temporary buffer is used dataReady is set to 3, to indicate that sending has begun and
	//that the buffer should be updated.
	if(I2C_SLAVE_dataReady == 2)
  e6:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <I2C_SLAVE_dataReady>
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	21 f4       	brne	.+8      	; 0xf6 <I2C_SLAVE_beginSend+0x20>
		I2C_SLAVE_dataReady = 3;
  ee:	83 e0       	ldi	r24, 0x03	; 3
  f0:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <I2C_SLAVE_dataReady>
  f4:	08 95       	ret
	else
	//If the temporary buffer isn't used, then it is reverted to show that there is no new data in the toSend buffer. 
		I2C_SLAVE_dataReady = 0;
  f6:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <I2C_SLAVE_dataReady>
  fa:	08 95       	ret

000000fc <setMotorPWM>:

static volatile uint16_t curr_time = 0;	
static volatile bool motor_flipping = MOTOR1;

static void setMotorPWM(uint8_t PWM, bool motor) {
	if (motor == MOTOR1) {
  fc:	61 11       	cpse	r22, r1
  fe:	1f c0       	rjmp	.+62     	; 0x13e <setMotorPWM+0x42>
		OCR0A = (TIMER0_TOP - ceil(((TIMER0_TOP/100) * (PWM > 100? 100 : PWM))));
 100:	85 36       	cpi	r24, 0x65	; 101
 102:	58 f4       	brcc	.+22     	; 0x11a <setMotorPWM+0x1e>
 104:	68 2f       	mov	r22, r24
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	66 0f       	add	r22, r22
 10a:	77 1f       	adc	r23, r23
 10c:	07 2e       	mov	r0, r23
 10e:	00 0c       	add	r0, r0
 110:	88 0b       	sbc	r24, r24
 112:	99 0b       	sbc	r25, r25
 114:	0e 94 77 06 	call	0xcee	; 0xcee <__floatsisf>
 118:	04 c0       	rjmp	.+8      	; 0x122 <setMotorPWM+0x26>
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	88 e4       	ldi	r24, 0x48	; 72
 120:	93 e4       	ldi	r25, 0x43	; 67
 122:	0e 94 2f 06 	call	0xc5e	; 0xc5e <ceil>
 126:	9b 01       	movw	r18, r22
 128:	ac 01       	movw	r20, r24
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	8f e7       	ldi	r24, 0x7F	; 127
 130:	93 e4       	ldi	r25, 0x43	; 67
 132:	0e 94 c2 05 	call	0xb84	; 0xb84 <__subsf3>
 136:	0e 94 46 06 	call	0xc8c	; 0xc8c <__fixunssfsi>
 13a:	67 bd       	out	0x27, r22	; 39
 13c:	08 95       	ret
	}
	else {
		OCR0B = (TIMER0_TOP - ceil(((TIMER0_TOP/100) * (PWM > 100? 100 : PWM))));
 13e:	85 36       	cpi	r24, 0x65	; 101
 140:	58 f4       	brcc	.+22     	; 0x158 <setMotorPWM+0x5c>
 142:	68 2f       	mov	r22, r24
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	66 0f       	add	r22, r22
 148:	77 1f       	adc	r23, r23
 14a:	07 2e       	mov	r0, r23
 14c:	00 0c       	add	r0, r0
 14e:	88 0b       	sbc	r24, r24
 150:	99 0b       	sbc	r25, r25
 152:	0e 94 77 06 	call	0xcee	; 0xcee <__floatsisf>
 156:	04 c0       	rjmp	.+8      	; 0x160 <setMotorPWM+0x64>
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	88 e4       	ldi	r24, 0x48	; 72
 15e:	93 e4       	ldi	r25, 0x43	; 67
 160:	0e 94 2f 06 	call	0xc5e	; 0xc5e <ceil>
 164:	9b 01       	movw	r18, r22
 166:	ac 01       	movw	r20, r24
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	8f e7       	ldi	r24, 0x7F	; 127
 16e:	93 e4       	ldi	r25, 0x43	; 67
 170:	0e 94 c2 05 	call	0xb84	; 0xb84 <__subsf3>
 174:	0e 94 46 06 	call	0xc8c	; 0xc8c <__fixunssfsi>
 178:	68 bd       	out	0x28, r22	; 40
 17a:	08 95       	ret

0000017c <init_digital_comm>:
#define DIGITAL_PROTOCOL_vect	PCINT0_vect

void init_digital_comm() {
	//Pin setup
	//Set Heat on/off as input and PANCAKE_DONE as output
	DDRB &= ~(HEAT_ON_OFF_PIN);
 17c:	20 98       	cbi	0x04, 0	; 4
	DDRB |= PANCAKE_DONE_PIN;	
 17e:	24 9a       	sbi	0x04, 4	; 4
	
	PORTB &= ~(PANCAKE_DONE_PIN | HEAT_ON_OFF_PIN);		//Set PANCAKE_DONE line to low and no pullup for heat on/off
 180:	85 b1       	in	r24, 0x05	; 5
 182:	8e 7e       	andi	r24, 0xEE	; 238
 184:	85 b9       	out	0x05, r24	; 5
	
	//Interrupt setup
	PCICR |= PCIE0;						//Enable pin change interrupt 0
 186:	e8 e6       	ldi	r30, 0x68	; 104
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	80 83       	st	Z, r24
	PCMSK0 |=  (1 << PCINT0);			//Set pin B0 as an interrupt pin
 18e:	eb e6       	ldi	r30, 0x6B	; 107
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	81 60       	ori	r24, 0x01	; 1
 196:	80 83       	st	Z, r24
 198:	08 95       	ret

0000019a <pancakeDone>:
	
}

void pancakeDone(){
	
	if (pancake_done) {
 19a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pancake_done>
 19e:	88 23       	and	r24, r24
 1a0:	21 f0       	breq	.+8      	; 0x1aa <pancakeDone+0x10>
		PORTB |= PANCAKE_DONE_PIN;
 1a2:	2c 9a       	sbi	0x05, 4	; 5
		pancake_done = false;
 1a4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pancake_done>
 1a8:	08 95       	ret
	}
	else {
		PORTB &= ~(PANCAKE_DONE_PIN);
 1aa:	2c 98       	cbi	0x05, 4	; 5
 1ac:	08 95       	ret

000001ae <__vector_3>:
		heat_on_ctrl = !heat_on_ctrl;		//Toggle the heat control variable
	}
}

//PAN_ON/OFF interrupt
ISR(DIGITAL_PROTOCOL_vect){
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
	}

}

static void turnOnPans() {
	if(PINB & HEAT_ON_OFF_PIN){
 1bc:	18 9b       	sbis	0x03, 0	; 3
 1be:	06 c0       	rjmp	.+12     	; 0x1cc <__vector_3+0x1e>
		heat_on_ctrl = !heat_on_ctrl;		//Toggle the heat control variable
 1c0:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <heat_on_ctrl>
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	89 27       	eor	r24, r25
 1c8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <heat_on_ctrl>
}

//PAN_ON/OFF interrupt
ISR(DIGITAL_PROTOCOL_vect){
	turnOnPans();
}
 1cc:	9f 91       	pop	r25
 1ce:	8f 91       	pop	r24
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <init_regulation>:


void init_regulation(){
	
	//Setup ADC
	PRR &= ~(1 << PRADC);	//Power manegment enabling of adc
 1da:	e4 e6       	ldi	r30, 0x64	; 100
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	8e 7f       	andi	r24, 0xFE	; 254
 1e2:	80 83       	st	Z, r24
	DDRC &= 0xFC;			//Port C 0 and 1 is input
 1e4:	87 b1       	in	r24, 0x07	; 7
 1e6:	8c 7f       	andi	r24, 0xFC	; 252
 1e8:	87 b9       	out	0x07, r24	; 7
	ADMUX =	(1 << REFS0);	//REF = VCC, ADC0 selected
 1ea:	80 e4       	ldi	r24, 0x40	; 64
 1ec:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	
	ADCSRA |= (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);	//Enable ADC, Enable ADC convertion interrupt , prescaler = 128
 1f0:	ea e7       	ldi	r30, 0x7A	; 122
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	8f 68       	ori	r24, 0x8F	; 143
 1f8:	80 83       	st	Z, r24
	
	//Setup for power PWM using OCR1B and OCR1A
	DDRB |= (1 << PORTB2) | (1 << PORTB1);	//Output for power PWM at PB2 and PB1
 1fa:	84 b1       	in	r24, 0x04	; 4
 1fc:	86 60       	ori	r24, 0x06	; 6
 1fe:	84 b9       	out	0x04, r24	; 4
	
	OCR1A = TIMER_1HZ_TOP;			//Set PWM level to 0 for pan1
 200:	83 e2       	ldi	r24, 0x23	; 35
 202:	94 ef       	ldi	r25, 0xF4	; 244
 204:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 208:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	OCR1B = TIMER_1HZ_TOP;			//Set PWM level to 0 for pan2
 20c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 210:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
	
	//OCR1A and B is set on compare match and cleared at bottom (0)
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1);
 214:	a0 e8       	ldi	r26, 0x80	; 128
 216:	b0 e0       	ldi	r27, 0x00	; 0
 218:	8c 91       	ld	r24, X
 21a:	80 6a       	ori	r24, 0xA0	; 160
 21c:	8c 93       	st	X, r24
	
	//Start the regulation loop
	ADCSRA |= (1 << ADSC);
 21e:	80 81       	ld	r24, Z
 220:	80 64       	ori	r24, 0x40	; 64
 222:	80 83       	st	Z, r24
 224:	08 95       	ret

00000226 <__vector_21>:
#define KI		((double) 0.001)
#define DT		((double)((128*13)/F_CPU)) //Time for single convertion ~ 1/16000000/(128*13)	(one convertion = 13 clock cyckles)

//Regulation loop - not time critical
ISR(ADC_vect, ISR_NOBLOCK)
{
 226:	78 94       	sei
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	cf 92       	push	r12
 234:	df 92       	push	r13
 236:	ef 92       	push	r14
 238:	ff 92       	push	r15
 23a:	2f 93       	push	r18
 23c:	3f 93       	push	r19
 23e:	4f 93       	push	r20
 240:	5f 93       	push	r21
 242:	6f 93       	push	r22
 244:	7f 93       	push	r23
 246:	8f 93       	push	r24
 248:	9f 93       	push	r25
 24a:	af 93       	push	r26
 24c:	bf 93       	push	r27
 24e:	ef 93       	push	r30
 250:	ff 93       	push	r31
}

static uint16_t readHeatLevel(){
	
	//Read ADCL first - it is important
	uint8_t temp = ADCL;
 252:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	return ((ADCH & 0x03) << 8) + temp;
 256:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 25a:	83 70       	andi	r24, 0x03	; 3
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	98 2f       	mov	r25, r24
 260:	88 27       	eor	r24, r24
 262:	82 0f       	add	r24, r18
 264:	91 1d       	adc	r25, r1
{
	
	uint16_t temp = readHeatLevel();
	
	//Change pan
	curr_pan = !curr_pan;
 266:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <curr_pan>
 26a:	21 e0       	ldi	r18, 0x01	; 1
 26c:	32 27       	eor	r19, r18
 26e:	30 93 27 01 	sts	0x0127, r19	; 0x800127 <curr_pan>
	
	ADMUX ^= 0x01;		//Change between ADC0 and ADC1
 272:	ec e7       	ldi	r30, 0x7C	; 124
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	30 81       	ld	r19, Z
 278:	23 27       	eor	r18, r19
 27a:	20 83       	st	Z, r18
	
	//Check heat level
	if (temp >= TRIGGER_LOW && temp <= TRIGGER_HIGH){
 27c:	9c 01       	movw	r18, r24
 27e:	2c 5a       	subi	r18, 0xAC	; 172
 280:	33 40       	sbci	r19, 0x03	; 3
 282:	2d 30       	cpi	r18, 0x0D	; 13
 284:	31 05       	cpc	r19, r1
 286:	20 f4       	brcc	.+8      	; 0x290 <__vector_21+0x6a>
		heat_ok = true;
 288:	21 e0       	ldi	r18, 0x01	; 1
 28a:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <heat_ok>
 28e:	02 c0       	rjmp	.+4      	; 0x294 <__vector_21+0x6e>
	}
	else {
		heat_ok = false;
 290:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <heat_ok>
	}
	
	//If no heating control - turn off the pans
	if (!heat_on_ctrl)		
 294:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <heat_on_ctrl>
 298:	21 11       	cpse	r18, r1
 29a:	1f c0       	rjmp	.+62     	; 0x2da <__vector_21+0xb4>
	{
		integral = 0;
 29c:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <integral>
 2a0:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <integral+0x1>
 2a4:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <integral+0x2>
 2a8:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <integral+0x3>

static volatile bool curr_pan = PAN1;

static void setPWMLevel(uint16_t PWM_level){	//Sets the PWM level for the heating
	
	if (curr_pan)
 2ac:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <curr_pan>
 2b0:	88 23       	and	r24, r24
 2b2:	39 f0       	breq	.+14     	; 0x2c2 <__vector_21+0x9c>
		OCR1B = ceil(TIMER_1HZ_TOP - ((TIMER_1HZ_TOP/100) * (PWM_level > 100 ? 100 : PWM_level)));
 2b4:	83 e2       	ldi	r24, 0x23	; 35
 2b6:	94 ef       	ldi	r25, 0xF4	; 244
 2b8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 2bc:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 2c0:	06 c0       	rjmp	.+12     	; 0x2ce <__vector_21+0xa8>
	else
		OCR1A = ceil(TIMER_1HZ_TOP - ((TIMER_1HZ_TOP/100) * (PWM_level > 100 ? 100 : PWM_level)));
 2c2:	83 e2       	ldi	r24, 0x23	; 35
 2c4:	94 ef       	ldi	r25, 0xF4	; 244
 2c6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 2ca:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	if (!heat_on_ctrl)		
	{
		integral = 0;
		setPWMLevel(0);
		//Restart ADC
		ADCSRA |= (1 << ADSC);
 2ce:	ea e7       	ldi	r30, 0x7A	; 122
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	80 81       	ld	r24, Z
 2d4:	80 64       	ori	r24, 0x40	; 64
 2d6:	80 83       	st	Z, r24
		return;
 2d8:	41 c0       	rjmp	.+130    	; 0x35c <__vector_21+0x136>
	}
	
	//Calculate the values for the PI controller
	int16_t error = OPTIMUM_TEMP - temp;
	integral += error*DT;
 2da:	c0 90 23 01 	lds	r12, 0x0123	; 0x800123 <integral>
 2de:	d0 90 24 01 	lds	r13, 0x0124	; 0x800124 <integral+0x1>
 2e2:	e0 90 25 01 	lds	r14, 0x0125	; 0x800125 <integral+0x2>
 2e6:	f0 90 26 01 	lds	r15, 0x0126	; 0x800126 <integral+0x3>
 2ea:	62 eb       	ldi	r22, 0xB2	; 178
 2ec:	73 e0       	ldi	r23, 0x03	; 3
 2ee:	68 1b       	sub	r22, r24
 2f0:	79 0b       	sbc	r23, r25
 2f2:	07 2e       	mov	r0, r23
 2f4:	00 0c       	add	r0, r0
 2f6:	88 0b       	sbc	r24, r24
 2f8:	99 0b       	sbc	r25, r25
 2fa:	0e 94 77 06 	call	0xcee	; 0xcee <__floatsisf>
 2fe:	20 e0       	ldi	r18, 0x00	; 0
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	a9 01       	movw	r20, r18
 304:	0e 94 44 07 	call	0xe88	; 0xe88 <__mulsf3>
 308:	a7 01       	movw	r20, r14
 30a:	96 01       	movw	r18, r12
 30c:	0e 94 c3 05 	call	0xb86	; 0xb86 <__addsf3>
 310:	60 93 23 01 	sts	0x0123, r22	; 0x800123 <integral>
 314:	70 93 24 01 	sts	0x0124, r23	; 0x800124 <integral+0x1>
 318:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <integral+0x2>
 31c:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <integral+0x3>
	
	//Calculate the output
	int16_t output = error*KP + integral*KI;
 320:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <integral>
 324:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <integral+0x1>
 328:	a0 91 25 01 	lds	r26, 0x0125	; 0x800125 <integral+0x2>
 32c:	b0 91 26 01 	lds	r27, 0x0126	; 0x800126 <integral+0x3>

static volatile bool curr_pan = PAN1;

static void setPWMLevel(uint16_t PWM_level){	//Sets the PWM level for the heating
	
	if (curr_pan)
 330:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <curr_pan>
 334:	88 23       	and	r24, r24
 336:	39 f0       	breq	.+14     	; 0x346 <__vector_21+0x120>
		OCR1B = ceil(TIMER_1HZ_TOP - ((TIMER_1HZ_TOP/100) * (PWM_level > 100 ? 100 : PWM_level)));
 338:	83 e4       	ldi	r24, 0x43	; 67
 33a:	9a e7       	ldi	r25, 0x7A	; 122
 33c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 340:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 344:	06 c0       	rjmp	.+12     	; 0x352 <__vector_21+0x12c>
	else
		OCR1A = ceil(TIMER_1HZ_TOP - ((TIMER_1HZ_TOP/100) * (PWM_level > 100 ? 100 : PWM_level)));
 346:	83 e4       	ldi	r24, 0x43	; 67
 348:	9a e7       	ldi	r25, 0x7A	; 122
 34a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 34e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	//Set PWM
	output = 50;
	setPWMLevel((output < 0? 0 : output));
	
	//Restart conversion
	ADCSRA |= (1 << ADSC);
 352:	ea e7       	ldi	r30, 0x7A	; 122
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	80 64       	ori	r24, 0x40	; 64
 35a:	80 83       	st	Z, r24
}
 35c:	ff 91       	pop	r31
 35e:	ef 91       	pop	r30
 360:	bf 91       	pop	r27
 362:	af 91       	pop	r26
 364:	9f 91       	pop	r25
 366:	8f 91       	pop	r24
 368:	7f 91       	pop	r23
 36a:	6f 91       	pop	r22
 36c:	5f 91       	pop	r21
 36e:	4f 91       	pop	r20
 370:	3f 91       	pop	r19
 372:	2f 91       	pop	r18
 374:	ff 90       	pop	r15
 376:	ef 90       	pop	r14
 378:	df 90       	pop	r13
 37a:	cf 90       	pop	r12
 37c:	0f 90       	pop	r0
 37e:	0f be       	out	0x3f, r0	; 63
 380:	0f 90       	pop	r0
 382:	1f 90       	pop	r1
 384:	18 95       	reti

00000386 <I2C_SLAVE_checkData>:
// ## Definitions bellow ##

volatile bool I2C_SLAVE_checkData()
{
	//Checks if all data has been read.
	if(I2C_SLAVE_first != I2C_SLAVE_last || I2C_SLAVE_full)
 386:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <I2C_SLAVE_first>
 38a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <I2C_SLAVE_last>
 38e:	98 13       	cpse	r25, r24
 390:	03 c0       	rjmp	.+6      	; 0x398 <I2C_SLAVE_checkData+0x12>
 392:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <I2C_SLAVE_full>
 396:	08 95       	ret
	{
		return true;
 398:	81 e0       	ldi	r24, 0x01	; 1
	}
	return false;
}
 39a:	08 95       	ret

0000039c <I2C_SLAVE_sendData>:

void I2C_SLAVE_sendData(char data)
{
	//Sets send data to send.
	I2C_SLAVE_toSend = data;
 39c:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <I2C_SLAVE_toSend>
	//Sets number of bits sended to 0.
	I2C_SLAVE_haveSended = 0;
 3a0:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <I2C_SLAVE_haveSended>
	//Indicates that data is needed to be send.
	I2C_SLAVE_dataReady = 1;
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <I2C_SLAVE_dataReady>
	
	
	
	//If begin hold is sat, then sending will begin imidiatly.
	if(I2C_SLAVE_beginHold)
 3aa:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <I2C_SLAVE_beginHold>
 3ae:	88 23       	and	r24, r24
 3b0:	09 f4       	brne	.+2      	; 0x3b4 <I2C_SLAVE_sendData+0x18>
 3b2:	4a c0       	rjmp	.+148    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
	{
		//Resets begin hold
		I2C_SLAVE_beginHold = false;
 3b4:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <I2C_SLAVE_beginHold>
		//Disables SDA interrupt to avoid stop bit triggering if toSind most significant is 1.
		I2C_SLAVE_SDA_INT_ENAB(0);
 3b8:	e8 e6       	ldi	r30, 0x68	; 104
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	8b 7f       	andi	r24, 0xFB	; 251
 3c0:	80 83       	st	Z, r24
		//Sets the line to most significant bit.
		I2C_SLAVE_DDR = I2C_SLAVE_SET_BIT(I2C_SLAVE_PORT, I2C_SLAVE_SDA, ~I2C_SLAVE_toSend, 7);
 3c2:	2b b1       	in	r18, 0x0b	; 11
 3c4:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <I2C_SLAVE_toSend>
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	80 95       	com	r24
 3cc:	90 95       	com	r25
 3ce:	88 0f       	add	r24, r24
 3d0:	89 2f       	mov	r24, r25
 3d2:	88 1f       	adc	r24, r24
 3d4:	99 0b       	sbc	r25, r25
 3d6:	82 95       	swap	r24
 3d8:	92 95       	swap	r25
 3da:	90 7f       	andi	r25, 0xF0	; 240
 3dc:	98 27       	eor	r25, r24
 3de:	80 7f       	andi	r24, 0xF0	; 240
 3e0:	98 27       	eor	r25, r24
 3e2:	80 71       	andi	r24, 0x10	; 16
 3e4:	92 2f       	mov	r25, r18
 3e6:	9f 7e       	andi	r25, 0xEF	; 239
 3e8:	89 0f       	add	r24, r25
 3ea:	8a b9       	out	0x0a, r24	; 10
		I2C_SLAVE_PORT = I2C_SLAVE_SET_BIT(I2C_SLAVE_PORT, I2C_SLAVE_SDA, I2C_SLAVE_toSend, 7);
 3ec:	2b b1       	in	r18, 0x0b	; 11
 3ee:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <I2C_SLAVE_toSend>
 3f2:	88 1f       	adc	r24, r24
 3f4:	88 27       	eor	r24, r24
 3f6:	88 1f       	adc	r24, r24
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	82 95       	swap	r24
 3fc:	92 95       	swap	r25
 3fe:	90 7f       	andi	r25, 0xF0	; 240
 400:	98 27       	eor	r25, r24
 402:	80 7f       	andi	r24, 0xF0	; 240
 404:	98 27       	eor	r25, r24
 406:	80 71       	andi	r24, 0x10	; 16
 408:	92 2f       	mov	r25, r18
 40a:	9f 7e       	andi	r25, 0xEF	; 239
 40c:	89 0f       	add	r24, r25
 40e:	8b b9       	out	0x0b, r24	; 11
		//Sets that first bit is sended.
		I2C_SLAVE_haveSended++;
 410:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <I2C_SLAVE_haveSended>
 414:	8f 5f       	subi	r24, 0xFF	; 255
 416:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <I2C_SLAVE_haveSended>
		//Waits until SDA reads the correct bit before enabling interrupt agian.
		while(((I2C_SLAVE_toSend>>7)<<I2C_SLAVE_SDA) != (I2C_SLAVE_PIN & 1 << I2C_SLAVE_SDA)){}
 41a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <I2C_SLAVE_toSend>
 41e:	29 b1       	in	r18, 0x09	; 9
 420:	88 1f       	adc	r24, r24
 422:	88 27       	eor	r24, r24
 424:	88 1f       	adc	r24, r24
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	82 95       	swap	r24
 42a:	92 95       	swap	r25
 42c:	90 7f       	andi	r25, 0xF0	; 240
 42e:	98 27       	eor	r25, r24
 430:	80 7f       	andi	r24, 0xF0	; 240
 432:	98 27       	eor	r25, r24
 434:	20 71       	andi	r18, 0x10	; 16
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	82 17       	cp	r24, r18
 43a:	93 07       	cpc	r25, r19
 43c:	71 f7       	brne	.-36     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		//enables interrupt.
		I2C_SLAVE_SDA_INT_ENAB(1);
 43e:	e8 e6       	ldi	r30, 0x68	; 104
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	80 81       	ld	r24, Z
 444:	84 60       	ori	r24, 0x04	; 4
 446:	80 83       	st	Z, r24
	}
	I2C_SLAVE_DDR &= ~(1 << I2C_SLAVE_SCL);
 448:	52 98       	cbi	0x0a, 2	; 10
	I2C_SLAVE_PORT |= 1 << I2C_SLAVE_SCL;
 44a:	5a 9a       	sbi	0x0b, 2	; 11
 44c:	08 95       	ret

0000044e <I2C_SLAVE_getData>:
}

I2C_commands_t I2C_SLAVE_getData()
{
	//Waits for data to have arrived.
	while(!I2C_SLAVE_checkData());
 44e:	0e 94 c3 01 	call	0x386	; 0x386 <I2C_SLAVE_checkData>
 452:	88 23       	and	r24, r24
 454:	e1 f3       	breq	.-8      	; 0x44e <I2C_SLAVE_getData>
}

static char I2C_SLAVE_readFirst()
{
	//If buffer is not empty then it will read the buffer.
	if(I2C_SLAVE_checkData())
 456:	0e 94 c3 01 	call	0x386	; 0x386 <I2C_SLAVE_checkData>
 45a:	88 23       	and	r24, r24
 45c:	b9 f0       	breq	.+46     	; 0x48c <I2C_SLAVE_getData+0x3e>
	{
		//After the first is read, then the buffer isn't full anymore.
		if(I2C_SLAVE_full)
 45e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <I2C_SLAVE_full>
 462:	81 11       	cpse	r24, r1
		{
			I2C_SLAVE_full = false;
 464:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <I2C_SLAVE_full>
}

static unsigned char I2C_SLAVE_inc(volatile unsigned char * num)
{
	//Save return value.
	unsigned char temp = *num;
 468:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <I2C_SLAVE_first>

	//Incrementing number 
	(*num)++;
 46c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <I2C_SLAVE_first>
 470:	8f 5f       	subi	r24, 0xFF	; 255
 472:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <I2C_SLAVE_first>
	
	//If number is higher than receive buffer length then its reset to 0.
	if(*num >= I2C_SLAVE_BUFFER_LENGTH)
 476:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <I2C_SLAVE_first>
 47a:	8a 30       	cpi	r24, 0x0A	; 10
 47c:	10 f0       	brcs	.+4      	; 0x482 <I2C_SLAVE_getData+0x34>
	{
		*num = 0;
 47e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <I2C_SLAVE_first>
		if(I2C_SLAVE_full)
		{
			I2C_SLAVE_full = false;
		}
		//Returns the buffer en increments first by 1.
		return I2C_SLAVE_Buffer[I2C_SLAVE_inc(&I2C_SLAVE_first)];
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	e4 5f       	subi	r30, 0xF4	; 244
 486:	fe 4f       	sbci	r31, 0xFE	; 254
 488:	80 81       	ld	r24, Z
 48a:	08 95       	ret
	}
	return 0;
 48c:	80 e0       	ldi	r24, 0x00	; 0
{
	//Waits for data to have arrived.
	while(!I2C_SLAVE_checkData());
	//Returns first data.
	return (I2C_commands_t)I2C_SLAVE_readFirst();
}
 48e:	08 95       	ret

00000490 <I2C_SLAVE_init>:

void I2C_SLAVE_init()
{
	//Sets SCL interrupt to rising edge trigger.
	I2C_SLAVE_SCL_RISING();
 490:	e9 e6       	ldi	r30, 0x69	; 105
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	82 60       	ori	r24, 0x02	; 2
 498:	80 83       	st	Z, r24
 49a:	80 81       	ld	r24, Z
 49c:	81 60       	ori	r24, 0x01	; 1
 49e:	80 83       	st	Z, r24

	//Sets SDA interrupt up.
	I2C_SLAVE_SDA_INT_INIT();
 4a0:	e8 e6       	ldi	r30, 0x68	; 104
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	80 81       	ld	r24, Z
 4a6:	80 61       	ori	r24, 0x10	; 16
 4a8:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>
	
	//Enables both interrupts.
	I2C_SLAVE_SDA_INT_ENAB(1);
 4ac:	80 81       	ld	r24, Z
 4ae:	84 60       	ori	r24, 0x04	; 4
 4b0:	80 83       	st	Z, r24
	I2C_SLAVE_SCL_INT_ENAB(1);
 4b2:	e8 9a       	sbi	0x1d, 0	; 29
	
	//Sets up ports to inputs with pull up.
	I2C_SLAVE_DDR &= ~(1 << I2C_SLAVE_SDA | 1 << I2C_SLAVE_SCL);
 4b4:	8a b1       	in	r24, 0x0a	; 10
 4b6:	8b 7e       	andi	r24, 0xEB	; 235
 4b8:	8a b9       	out	0x0a, r24	; 10
	I2C_SLAVE_PORT |= (1 << I2C_SLAVE_SDA | 1 << I2C_SLAVE_SCL);
 4ba:	8b b1       	in	r24, 0x0b	; 11
 4bc:	84 61       	ori	r24, 0x14	; 20
 4be:	8b b9       	out	0x0b, r24	; 11
 4c0:	08 95       	ret

000004c2 <__vector_1>:
	return 0;
}

//SCL interrupt for handling data transfer.
ISR(I2C_SLAVE_SCL_vect)
{
 4c2:	1f 92       	push	r1
 4c4:	0f 92       	push	r0
 4c6:	0f b6       	in	r0, 0x3f	; 63
 4c8:	0f 92       	push	r0
 4ca:	11 24       	eor	r1, r1
 4cc:	2f 93       	push	r18
 4ce:	3f 93       	push	r19
 4d0:	4f 93       	push	r20
 4d2:	5f 93       	push	r21
 4d4:	6f 93       	push	r22
 4d6:	7f 93       	push	r23
 4d8:	8f 93       	push	r24
 4da:	9f 93       	push	r25
 4dc:	af 93       	push	r26
 4de:	bf 93       	push	r27
 4e0:	ef 93       	push	r30
 4e2:	ff 93       	push	r31
	//If start-bit received:
	if(I2C_SLAVE_startRecived)
 4e4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <I2C_SLAVE_startRecived>
 4e8:	88 23       	and	r24, r24
 4ea:	09 f4       	brne	.+2      	; 0x4ee <__vector_1+0x2c>
 4ec:	4a c1       	rjmp	.+660    	; 0x782 <__vector_1+0x2c0>
	{
		//If SCL is triggering on rising edge i.e. it's currently reading from SDA.
		if(I2C_SLAVE_SCL_IS_RISING())
 4ee:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 4f2:	83 70       	andi	r24, 0x03	; 3
 4f4:	83 30       	cpi	r24, 0x03	; 3
 4f6:	09 f0       	breq	.+2      	; 0x4fa <__vector_1+0x38>
 4f8:	af c0       	rjmp	.+350    	; 0x658 <__vector_1+0x196>
		{
			//If it just have been writing to SDA reset pull up to high.
			if(I2C_SLAVE_haveSended > 7)
 4fa:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <I2C_SLAVE_haveSended>
 4fe:	88 30       	cpi	r24, 0x08	; 8
 500:	40 f0       	brcs	.+16     	; 0x512 <__vector_1+0x50>
			{
				I2C_SLAVE_haveSended = 0;
 502:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <I2C_SLAVE_haveSended>
				I2C_SLAVE_DDR &= ~(1 << I2C_SLAVE_SDA | 1 << I2C_SLAVE_SCL);
 506:	8a b1       	in	r24, 0x0a	; 10
 508:	8b 7e       	andi	r24, 0xEB	; 235
 50a:	8a b9       	out	0x0a, r24	; 10
				I2C_SLAVE_PORT |= (1 << I2C_SLAVE_SDA | 1 << I2C_SLAVE_SCL);
 50c:	8b b1       	in	r24, 0x0b	; 11
 50e:	84 61       	ori	r24, 0x14	; 20
 510:	8b b9       	out	0x0b, r24	; 11
			}
			//First 7 bits read Address.
			if(I2C_SLAVE_recevedBits < 7)
 512:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <I2C_SLAVE_recevedBits>
 516:	87 30       	cpi	r24, 0x07	; 7
 518:	20 f5       	brcc	.+72     	; 0x562 <__vector_1+0xa0>
			{
				I2C_SLAVE_recevedAddr = I2C_SLAVE_SET_BIT(I2C_SLAVE_recevedAddr,6-I2C_SLAVE_recevedBits,I2C_SLAVE_PIN,I2C_SLAVE_SDA);
 51a:	66 e0       	ldi	r22, 0x06	; 6
 51c:	70 e0       	ldi	r23, 0x00	; 0
 51e:	68 1b       	sub	r22, r24
 520:	71 09       	sbc	r23, r1
 522:	21 e0       	ldi	r18, 0x01	; 1
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	a9 01       	movw	r20, r18
 528:	06 2e       	mov	r0, r22
 52a:	02 c0       	rjmp	.+4      	; 0x530 <__vector_1+0x6e>
 52c:	44 0f       	add	r20, r20
 52e:	55 1f       	adc	r21, r21
 530:	0a 94       	dec	r0
 532:	e2 f7       	brpl	.-8      	; 0x52c <__vector_1+0x6a>
 534:	99 b1       	in	r25, 0x09	; 9
 536:	54 2f       	mov	r21, r20
 538:	50 95       	com	r21
 53a:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <I2C_SLAVE_recevedAddr>
 53e:	52 23       	and	r21, r18
 540:	92 95       	swap	r25
 542:	9f 70       	andi	r25, 0x0F	; 15
 544:	29 2f       	mov	r18, r25
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	02 c0       	rjmp	.+4      	; 0x54e <__vector_1+0x8c>
 54a:	22 0f       	add	r18, r18
 54c:	33 1f       	adc	r19, r19
 54e:	6a 95       	dec	r22
 550:	e2 f7       	brpl	.-8      	; 0x54a <__vector_1+0x88>
 552:	24 23       	and	r18, r20
 554:	25 0f       	add	r18, r21
 556:	20 93 21 01 	sts	0x0121, r18	; 0x800121 <I2C_SLAVE_recevedAddr>
				I2C_SLAVE_recevedBits++;
 55a:	8f 5f       	subi	r24, 0xFF	; 255
 55c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <I2C_SLAVE_recevedBits>
 560:	10 c1       	rjmp	.+544    	; 0x782 <__vector_1+0x2c0>
			}
			//If address matching:
			else if(I2C_SLAVE_recevedAddr == I2C_SLAVE_ADDR && I2C_SLAVE_recevedBits < 8)
 562:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <I2C_SLAVE_recevedAddr>
 566:	90 37       	cpi	r25, 0x70	; 112
 568:	09 f0       	breq	.+2      	; 0x56c <__vector_1+0xaa>
 56a:	0b c1       	rjmp	.+534    	; 0x782 <__vector_1+0x2c0>
 56c:	88 30       	cpi	r24, 0x08	; 8
 56e:	b8 f4       	brcc	.+46     	; 0x59e <__vector_1+0xdc>
			{
				
				I2C_SLAVE_recevedBits++;
 570:	8f 5f       	subi	r24, 0xFF	; 255
 572:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <I2C_SLAVE_recevedBits>
				//Read the readWrite bit.
				I2C_SLAVE_shouldWrite = I2C_SLAVE_SET_BIT(I2C_SLAVE_shouldWrite,0,I2C_SLAVE_PIN,I2C_SLAVE_SDA);
 576:	89 b1       	in	r24, 0x09	; 9
 578:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <I2C_SLAVE_shouldWrite>
 57c:	9e 7f       	andi	r25, 0xFE	; 254
 57e:	82 95       	swap	r24
 580:	81 70       	andi	r24, 0x01	; 1
 582:	89 0f       	add	r24, r25
 584:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <I2C_SLAVE_shouldWrite>
				//If it should write, begin hold is set to true.
				if(I2C_SLAVE_shouldWrite)
 588:	88 23       	and	r24, r24
 58a:	19 f0       	breq	.+6      	; 0x592 <__vector_1+0xd0>
				{
					//This indicates that the line should be hold right after ack i send.
					I2C_SLAVE_beginHold = true;
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <I2C_SLAVE_beginHold>
				}
				//Set buffer to ack-bit and begin sending.
				I2C_SLAVE_sendBit(0);
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_SLAVE_sendBit>
				I2C_SLAVE_beginSend();
 598:	0e 94 6b 00 	call	0xd6	; 0xd6 <I2C_SLAVE_beginSend>
 59c:	f2 c0       	rjmp	.+484    	; 0x782 <__vector_1+0x2c0>
			}
			else if(I2C_SLAVE_recevedAddr == I2C_SLAVE_ADDR && I2C_SLAVE_recevedBits < (17))
 59e:	81 31       	cpi	r24, 0x11	; 17
 5a0:	08 f0       	brcs	.+2      	; 0x5a4 <__vector_1+0xe2>
 5a2:	ef c0       	rjmp	.+478    	; 0x782 <__vector_1+0x2c0>
			{
				//If read from master after ack-send if I2C_SLAVE_shouldWrite is false.
				I2C_SLAVE_recevedData = I2C_SLAVE_SET_BIT(I2C_SLAVE_recevedData,7-(I2C_SLAVE_recevedBits-8),I2C_SLAVE_PIN,I2C_SLAVE_SDA);
 5a4:	6f e0       	ldi	r22, 0x0F	; 15
 5a6:	70 e0       	ldi	r23, 0x00	; 0
 5a8:	68 1b       	sub	r22, r24
 5aa:	71 09       	sbc	r23, r1
 5ac:	21 e0       	ldi	r18, 0x01	; 1
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	a9 01       	movw	r20, r18
 5b2:	06 2e       	mov	r0, r22
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <__vector_1+0xf8>
 5b6:	44 0f       	add	r20, r20
 5b8:	55 1f       	adc	r21, r21
 5ba:	0a 94       	dec	r0
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <__vector_1+0xf4>
 5be:	99 b1       	in	r25, 0x09	; 9
 5c0:	54 2f       	mov	r21, r20
 5c2:	50 95       	com	r21
 5c4:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <I2C_SLAVE_recevedData>
 5c8:	52 23       	and	r21, r18
 5ca:	92 95       	swap	r25
 5cc:	9f 70       	andi	r25, 0x0F	; 15
 5ce:	29 2f       	mov	r18, r25
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <__vector_1+0x116>
 5d4:	22 0f       	add	r18, r18
 5d6:	33 1f       	adc	r19, r19
 5d8:	6a 95       	dec	r22
 5da:	e2 f7       	brpl	.-8      	; 0x5d4 <__vector_1+0x112>
 5dc:	24 23       	and	r18, r20
 5de:	25 0f       	add	r18, r21
 5e0:	20 93 1b 01 	sts	0x011B, r18	; 0x80011b <I2C_SLAVE_recevedData>
				I2C_SLAVE_recevedBits++;
 5e4:	8f 5f       	subi	r24, 0xFF	; 255
 5e6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <I2C_SLAVE_recevedBits>
				if(I2C_SLAVE_recevedBits == 16)
 5ea:	80 31       	cpi	r24, 0x10	; 16
 5ec:	09 f0       	breq	.+2      	; 0x5f0 <__vector_1+0x12e>
 5ee:	c9 c0       	rjmp	.+402    	; 0x782 <__vector_1+0x2c0>
}

static void I2C_SLAVE_addData(char data)
{
	//If the buffer is full, then the oldest data will be overwritten moving first data one.
	if(I2C_SLAVE_full)
 5f0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <I2C_SLAVE_full>
 5f4:	88 23       	and	r24, r24
 5f6:	69 f0       	breq	.+26     	; 0x612 <__vector_1+0x150>
}

static unsigned char I2C_SLAVE_inc(volatile unsigned char * num)
{
	//Save return value.
	unsigned char temp = *num;
 5f8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <I2C_SLAVE_first>

	//Incrementing number 
	(*num)++;
 5fc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <I2C_SLAVE_first>
 600:	8f 5f       	subi	r24, 0xFF	; 255
 602:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <I2C_SLAVE_first>
	
	//If number is higher than receive buffer length then its reset to 0.
	if(*num >= I2C_SLAVE_BUFFER_LENGTH)
 606:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <I2C_SLAVE_first>
 60a:	8a 30       	cpi	r24, 0x0A	; 10
 60c:	10 f0       	brcs	.+4      	; 0x612 <__vector_1+0x150>
	{
		*num = 0;
 60e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <I2C_SLAVE_first>
}

static unsigned char I2C_SLAVE_inc(volatile unsigned char * num)
{
	//Save return value.
	unsigned char temp = *num;
 612:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <I2C_SLAVE_last>

	//Incrementing number 
	(*num)++;
 616:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <I2C_SLAVE_last>
 61a:	8f 5f       	subi	r24, 0xFF	; 255
 61c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <I2C_SLAVE_last>
	
	//If number is higher than receive buffer length then its reset to 0.
	if(*num >= I2C_SLAVE_BUFFER_LENGTH)
 620:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <I2C_SLAVE_last>
 624:	8a 30       	cpi	r24, 0x0A	; 10
 626:	10 f0       	brcs	.+4      	; 0x62c <__vector_1+0x16a>
	{
		*num = 0;
 628:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <I2C_SLAVE_last>
	if(I2C_SLAVE_full)
	{
		I2C_SLAVE_inc(&I2C_SLAVE_first);
	}
	//Sets last data and increments last. (Hence last will always be the length of the data in the buffer)
	I2C_SLAVE_Buffer[I2C_SLAVE_inc(&I2C_SLAVE_last)] = data;
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	e4 5f       	subi	r30, 0xF4	; 244
 630:	fe 4f       	sbci	r31, 0xFE	; 254
 632:	20 83       	st	Z, r18
	//If last position is the same as first the buffer is either full or empty. Therefor at boolean is sat if its full.
	if(I2C_SLAVE_last == I2C_SLAVE_first)
 634:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <I2C_SLAVE_last>
 638:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <I2C_SLAVE_first>
 63c:	98 13       	cpse	r25, r24
 63e:	03 c0       	rjmp	.+6      	; 0x646 <__vector_1+0x184>
	{
		I2C_SLAVE_full = true;
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <I2C_SLAVE_full>
				I2C_SLAVE_recevedBits++;
				if(I2C_SLAVE_recevedBits == 16)
				{
					//When all bits send add data and ack.
					I2C_SLAVE_addData(I2C_SLAVE_recevedData);
					I2C_SLAVE_sendBit(0);
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_SLAVE_sendBit>
					I2C_SLAVE_beginSend();
 64c:	0e 94 6b 00 	call	0xd6	; 0xd6 <I2C_SLAVE_beginSend>
					//Return to bit 8 to continue reading. (Only reading more bytes in one header is not implemented yet.)
					I2C_SLAVE_recevedBits = 8;
 650:	88 e0       	ldi	r24, 0x08	; 8
 652:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <I2C_SLAVE_recevedBits>
 656:	95 c0       	rjmp	.+298    	; 0x782 <__vector_1+0x2c0>
				}
			}
		}
		//If SCL is triggering on falling edge i.e. it's currently writing on SDA.
		else if(I2C_SLAVE_SCL_IS_FALLING())
 658:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 65c:	83 70       	andi	r24, 0x03	; 3
 65e:	82 30       	cpi	r24, 0x02	; 2
 660:	09 f0       	breq	.+2      	; 0x664 <__vector_1+0x1a2>
 662:	8f c0       	rjmp	.+286    	; 0x782 <__vector_1+0x2c0>
		{
			//Checks if all data is send.
			if(I2C_SLAVE_haveSended > 7)
 664:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <I2C_SLAVE_haveSended>
 668:	38 30       	cpi	r19, 0x08	; 8
 66a:	08 f4       	brcc	.+2      	; 0x66e <__vector_1+0x1ac>
 66c:	52 c0       	rjmp	.+164    	; 0x712 <__vector_1+0x250>
			{
				//Updates buffer with temporary buffer if I2C_SLAVE_dataReady is 2 or 3.
				if(I2C_SLAVE_dataReady == 2 || I2C_SLAVE_dataReady == 3)
 66e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <I2C_SLAVE_dataReady>
 672:	82 50       	subi	r24, 0x02	; 2
 674:	82 30       	cpi	r24, 0x02	; 2
 676:	88 f5       	brcc	.+98     	; 0x6da <__vector_1+0x218>
				{
					I2C_SLAVE_dataReady = 1;
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <I2C_SLAVE_dataReady>
					I2C_SLAVE_haveSended = 1;
 67e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <I2C_SLAVE_haveSended>
					I2C_SLAVE_toSend = I2C_SLAVE_tempSave;
 682:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <I2C_SLAVE_tempSave>
 686:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <I2C_SLAVE_toSend>
					I2C_SLAVE_DDR = I2C_SLAVE_SET_BIT(I2C_SLAVE_DDR,I2C_SLAVE_SDA,(~I2C_SLAVE_toSend),7);
 68a:	2a b1       	in	r18, 0x0a	; 10
 68c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <I2C_SLAVE_toSend>
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	80 95       	com	r24
 694:	90 95       	com	r25
 696:	88 0f       	add	r24, r24
 698:	89 2f       	mov	r24, r25
 69a:	88 1f       	adc	r24, r24
 69c:	99 0b       	sbc	r25, r25
 69e:	82 95       	swap	r24
 6a0:	92 95       	swap	r25
 6a2:	90 7f       	andi	r25, 0xF0	; 240
 6a4:	98 27       	eor	r25, r24
 6a6:	80 7f       	andi	r24, 0xF0	; 240
 6a8:	98 27       	eor	r25, r24
 6aa:	80 71       	andi	r24, 0x10	; 16
 6ac:	92 2f       	mov	r25, r18
 6ae:	9f 7e       	andi	r25, 0xEF	; 239
 6b0:	89 0f       	add	r24, r25
 6b2:	8a b9       	out	0x0a, r24	; 10
					I2C_SLAVE_PORT = I2C_SLAVE_SET_BIT(I2C_SLAVE_PORT,I2C_SLAVE_SDA,I2C_SLAVE_toSend,7);
 6b4:	2b b1       	in	r18, 0x0b	; 11
 6b6:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <I2C_SLAVE_toSend>
 6ba:	88 1f       	adc	r24, r24
 6bc:	88 27       	eor	r24, r24
 6be:	88 1f       	adc	r24, r24
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	82 95       	swap	r24
 6c4:	92 95       	swap	r25
 6c6:	90 7f       	andi	r25, 0xF0	; 240
 6c8:	98 27       	eor	r25, r24
 6ca:	80 7f       	andi	r24, 0xF0	; 240
 6cc:	98 27       	eor	r25, r24
 6ce:	80 71       	andi	r24, 0x10	; 16
 6d0:	92 2f       	mov	r25, r18
 6d2:	9f 7e       	andi	r25, 0xEF	; 239
 6d4:	89 0f       	add	r24, r25
 6d6:	8b b9       	out	0x0b, r24	; 11
 6d8:	04 c0       	rjmp	.+8      	; 0x6e2 <__vector_1+0x220>
				}
				else
				{
					I2C_SLAVE_dataReady = 0;
 6da:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <I2C_SLAVE_dataReady>
					//Frees SDA if done sending.
					I2C_SLAVE_dataReady = 0;
					I2C_SLAVE_DDR &= ~(1 << I2C_SLAVE_SDA);
 6de:	54 98       	cbi	0x0a, 4	; 10
					I2C_SLAVE_PORT |= (1 << I2C_SLAVE_SDA);	
 6e0:	5c 9a       	sbi	0x0b, 4	; 11
				}
				if(I2C_SLAVE_beginHold)
 6e2:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <I2C_SLAVE_beginHold>
 6e6:	88 23       	and	r24, r24
 6e8:	59 f0       	breq	.+22     	; 0x700 <__vector_1+0x23e>
}

static int I2C_SLAVE_hold()
{
	//If data is ready then it sets beginHold false and returns true.
	if(I2C_SLAVE_dataReady == 1 || I2C_SLAVE_dataReady == 2)
 6ea:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <I2C_SLAVE_dataReady>
 6ee:	81 50       	subi	r24, 0x01	; 1
 6f0:	82 30       	cpi	r24, 0x02	; 2
 6f2:	18 f4       	brcc	.+6      	; 0x6fa <__vector_1+0x238>
	{
		I2C_SLAVE_beginHold = false;
 6f4:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <I2C_SLAVE_beginHold>
 6f8:	44 c0       	rjmp	.+136    	; 0x782 <__vector_1+0x2c0>
		return 1;
	}
	else
	{
		//If no data is ready, then SCL is pulled low.
		I2C_SLAVE_DDR  |=  1 << I2C_SLAVE_SCL;
 6fa:	52 9a       	sbi	0x0a, 2	; 10
		I2C_SLAVE_PORT &=  ~(1 << I2C_SLAVE_SCL);
 6fc:	5a 98       	cbi	0x0b, 2	; 11
 6fe:	41 c0       	rjmp	.+130    	; 0x782 <__vector_1+0x2c0>
				}
				else
				{
					//More work here needs to be done in order to be able to write multiple bytes.
					//Returns the line to reading
					I2C_SLAVE_SCL_RISING();
 700:	e9 e6       	ldi	r30, 0x69	; 105
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	80 81       	ld	r24, Z
 706:	82 60       	ori	r24, 0x02	; 2
 708:	80 83       	st	Z, r24
 70a:	80 81       	ld	r24, Z
 70c:	81 60       	ori	r24, 0x01	; 1
 70e:	80 83       	st	Z, r24
 710:	38 c0       	rjmp	.+112    	; 0x782 <__vector_1+0x2c0>
				}
			}
			else
			{
				I2C_SLAVE_DDR = I2C_SLAVE_SET_BIT(I2C_SLAVE_DDR,I2C_SLAVE_SDA,~I2C_SLAVE_toSend,(7-I2C_SLAVE_haveSended));
 712:	2a b1       	in	r18, 0x0a	; 10
 714:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <I2C_SLAVE_toSend>
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	80 95       	com	r24
 71c:	90 95       	com	r25
 71e:	47 e0       	ldi	r20, 0x07	; 7
 720:	50 e0       	ldi	r21, 0x00	; 0
 722:	ba 01       	movw	r22, r20
 724:	63 1b       	sub	r22, r19
 726:	71 09       	sbc	r23, r1
 728:	02 c0       	rjmp	.+4      	; 0x72e <__vector_1+0x26c>
 72a:	95 95       	asr	r25
 72c:	87 95       	ror	r24
 72e:	6a 95       	dec	r22
 730:	e2 f7       	brpl	.-8      	; 0x72a <__vector_1+0x268>
 732:	82 95       	swap	r24
 734:	92 95       	swap	r25
 736:	90 7f       	andi	r25, 0xF0	; 240
 738:	98 27       	eor	r25, r24
 73a:	80 7f       	andi	r24, 0xF0	; 240
 73c:	98 27       	eor	r25, r24
 73e:	80 71       	andi	r24, 0x10	; 16
 740:	92 2f       	mov	r25, r18
 742:	9f 7e       	andi	r25, 0xEF	; 239
 744:	89 0f       	add	r24, r25
 746:	8a b9       	out	0x0a, r24	; 10
				I2C_SLAVE_PORT = I2C_SLAVE_SET_BIT(I2C_SLAVE_PORT,I2C_SLAVE_SDA,I2C_SLAVE_toSend,(7-I2C_SLAVE_haveSended));
 748:	2b b1       	in	r18, 0x0b	; 11
 74a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <I2C_SLAVE_toSend>
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <I2C_SLAVE_haveSended>
 754:	43 1b       	sub	r20, r19
 756:	51 09       	sbc	r21, r1
 758:	02 c0       	rjmp	.+4      	; 0x75e <__vector_1+0x29c>
 75a:	95 95       	asr	r25
 75c:	87 95       	ror	r24
 75e:	4a 95       	dec	r20
 760:	e2 f7       	brpl	.-8      	; 0x75a <__vector_1+0x298>
 762:	82 95       	swap	r24
 764:	92 95       	swap	r25
 766:	90 7f       	andi	r25, 0xF0	; 240
 768:	98 27       	eor	r25, r24
 76a:	80 7f       	andi	r24, 0xF0	; 240
 76c:	98 27       	eor	r25, r24
 76e:	80 71       	andi	r24, 0x10	; 16
 770:	92 2f       	mov	r25, r18
 772:	9f 7e       	andi	r25, 0xEF	; 239
 774:	89 0f       	add	r24, r25
 776:	8b b9       	out	0x0b, r24	; 11
				
				I2C_SLAVE_haveSended++;
 778:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <I2C_SLAVE_haveSended>
 77c:	8f 5f       	subi	r24, 0xFF	; 255
 77e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <I2C_SLAVE_haveSended>
			}
		}
	}
	
}
 782:	ff 91       	pop	r31
 784:	ef 91       	pop	r30
 786:	bf 91       	pop	r27
 788:	af 91       	pop	r26
 78a:	9f 91       	pop	r25
 78c:	8f 91       	pop	r24
 78e:	7f 91       	pop	r23
 790:	6f 91       	pop	r22
 792:	5f 91       	pop	r21
 794:	4f 91       	pop	r20
 796:	3f 91       	pop	r19
 798:	2f 91       	pop	r18
 79a:	0f 90       	pop	r0
 79c:	0f be       	out	0x3f, r0	; 63
 79e:	0f 90       	pop	r0
 7a0:	1f 90       	pop	r1
 7a2:	18 95       	reti

000007a4 <__vector_5>:

//SDA interrupt for handling stop and start bit.
ISR(I2C_SLAVE_SDA_vect)
{
 7a4:	1f 92       	push	r1
 7a6:	0f 92       	push	r0
 7a8:	0f b6       	in	r0, 0x3f	; 63
 7aa:	0f 92       	push	r0
 7ac:	11 24       	eor	r1, r1
 7ae:	8f 93       	push	r24
 7b0:	ef 93       	push	r30
 7b2:	ff 93       	push	r31
	//Both stop and start bit is triggered while SCL is high.
	if((I2C_SLAVE_PIN & (1 << I2C_SLAVE_SCL)) ==(1 << I2C_SLAVE_SCL))
 7b4:	4a 9b       	sbis	0x09, 2	; 9
 7b6:	16 c0       	rjmp	.+44     	; 0x7e4 <__vector_5+0x40>
	{
		//If SDA is high then the interrupt was triggered on a rising edge and therefore it's a stop-bit.
		if(I2C_SLAVE_PIN & (1 << I2C_SLAVE_SDA))
 7b8:	4c 9b       	sbis	0x09, 4	; 9
 7ba:	11 c0       	rjmp	.+34     	; 0x7de <__vector_5+0x3a>
		{
			I2C_SLAVE_startRecived = false;
 7bc:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <I2C_SLAVE_startRecived>
			I2C_SLAVE_startRecived = true;
		}
		//If it was a stop-bit reset received data, and set SCL trigger to rising.
		if(I2C_SLAVE_startRecived == false)
		{
			I2C_SLAVE_beginHold = false;
 7c0:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <I2C_SLAVE_beginHold>
			I2C_SLAVE_recevedAddr = 0;
 7c4:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <I2C_SLAVE_recevedAddr>
			I2C_SLAVE_recevedBits = 0;
 7c8:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <I2C_SLAVE_recevedBits>
			I2C_SLAVE_SCL_RISING();
 7cc:	e9 e6       	ldi	r30, 0x69	; 105
 7ce:	f0 e0       	ldi	r31, 0x00	; 0
 7d0:	80 81       	ld	r24, Z
 7d2:	82 60       	ori	r24, 0x02	; 2
 7d4:	80 83       	st	Z, r24
 7d6:	80 81       	ld	r24, Z
 7d8:	81 60       	ori	r24, 0x01	; 1
 7da:	80 83       	st	Z, r24
 7dc:	03 c0       	rjmp	.+6      	; 0x7e4 <__vector_5+0x40>
			I2C_SLAVE_startRecived = false;
		}
		//Else it is a start-bit.
		else
		{
			I2C_SLAVE_startRecived = true;
 7de:	81 e0       	ldi	r24, 0x01	; 1
 7e0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <I2C_SLAVE_startRecived>
			I2C_SLAVE_recevedAddr = 0;
			I2C_SLAVE_recevedBits = 0;
			I2C_SLAVE_SCL_RISING();
		}
	}
}
 7e4:	ff 91       	pop	r31
 7e6:	ef 91       	pop	r30
 7e8:	8f 91       	pop	r24
 7ea:	0f 90       	pop	r0
 7ec:	0f be       	out	0x3f, r0	; 63
 7ee:	0f 90       	pop	r0
 7f0:	1f 90       	pop	r1
 7f2:	18 95       	reti

000007f4 <init_motors>:

static void startTimer2();
static void stopTimer2();
static void startTimePan2();

void init_motors(){
 7f4:	1f 93       	push	r17
 7f6:	cf 93       	push	r28
 7f8:	df 93       	push	r29
	
	//Set pins as output
	MOTOR1_DIR_PORT_DDR |= (1 << MOTOR1_DIR_PIN_LOCATION1) + (1 << MOTOR1_DIR_PIN_LOCATION2);
 7fa:	8a b1       	in	r24, 0x0a	; 10
 7fc:	88 68       	ori	r24, 0x88	; 136
 7fe:	8a b9       	out	0x0a, r24	; 10
	MOTOR2_DIR_PORT_DDR |= 0b11 << MOTOR2_DIR_PIN_LOCATION;
 800:	87 b1       	in	r24, 0x07	; 7
 802:	80 63       	ori	r24, 0x30	; 48
 804:	87 b9       	out	0x07, r24	; 7
	
	//Set enable pins to output low as default
	MOTOR1_ENABLE_PORT_DDR |= (1 << MOTOR1_EN_PIN_LOCATION);
 806:	55 9a       	sbi	0x0a, 5	; 10
	MOTOR2_ENABLE_PORT_DDR |= (1 << MOTOR2_EN_PIN_LOCATION);
 808:	56 9a       	sbi	0x0a, 6	; 10
	MOTOR1_ENABLE_PORT &= ~(1 << MOTOR1_EN_PIN_LOCATION);
 80a:	5d 98       	cbi	0x0b, 5	; 11
	MOTOR2_ENABLE_PORT &= ~(1 << MOTOR2_EN_PIN_LOCATION);
 80c:	5e 98       	cbi	0x0b, 6	; 11
	
	//Set motor to off
	MOTOR1_SETING(MOTOR_OFF);
 80e:	5b 98       	cbi	0x0b, 3	; 11
 810:	5f 98       	cbi	0x0b, 7	; 11
	MOTOR2_SETING(MOTOR_OFF);
 812:	88 b1       	in	r24, 0x08	; 8
 814:	80 63       	ori	r24, 0x30	; 48
 816:	88 b9       	out	0x08, r24	; 8
	
	//Disable motors
	MOTOR1_DISABLE();
 818:	84 b5       	in	r24, 0x24	; 36
 81a:	8f 7c       	andi	r24, 0xCF	; 207
 81c:	84 bd       	out	0x24, r24	; 36
	MOTOR2_DISABLE();
 81e:	84 b5       	in	r24, 0x24	; 36
 820:	8f 73       	andi	r24, 0x3F	; 63
 822:	84 bd       	out	0x24, r24	; 36
	
		
	//Setup timer 0 PWMs for the motors
	PRR &= ~(1 << PRTIM0);
 824:	c4 e6       	ldi	r28, 0x64	; 100
 826:	d0 e0       	ldi	r29, 0x00	; 0
 828:	88 81       	ld	r24, Y
 82a:	8f 7d       	andi	r24, 0xDF	; 223
 82c:	88 83       	st	Y, r24
	
	// phase correct PWM mode, prescaler = 256, freq ~ 61,27451 Hz (8000000/(256*510)
	TCCR0A = (1 << WGM00);
 82e:	11 e0       	ldi	r17, 0x01	; 1
 830:	14 bd       	out	0x24, r17	; 36
	TCCR0B = (1 << CS02);
 832:	84 e0       	ldi	r24, 0x04	; 4
 834:	85 bd       	out	0x25, r24	; 37
	
	//Set PWM for the motors
	setMotorPWM(0, MOTOR1);
 836:	60 e0       	ldi	r22, 0x00	; 0
 838:	80 e0       	ldi	r24, 0x00	; 0
 83a:	0e 94 7e 00 	call	0xfc	; 0xfc <setMotorPWM>
	setMotorPWM(0, MOTOR2);
 83e:	61 e0       	ldi	r22, 0x01	; 1
 840:	80 e0       	ldi	r24, 0x00	; 0
 842:	0e 94 7e 00 	call	0xfc	; 0xfc <setMotorPWM>
	
	//Setup timer 2 to 125 Hz and TOF interrupt, prescaler = 256, OCRA = 249 (16000000 Hz/(256*250) = 250 Hz (error = 125 +- 1Hz)
	PRR &= ~(1 << PRTIM2);
 846:	88 81       	ld	r24, Y
 848:	8f 7b       	andi	r24, 0xBF	; 191
 84a:	88 83       	st	Y, r24
	TCCR2A = (1 << WGM21) | (1 << WGM20);
 84c:	83 e0       	ldi	r24, 0x03	; 3
 84e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
	TCCR2B = (1 << WGM22);
 852:	88 e0       	ldi	r24, 0x08	; 8
 854:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	OCR2A = TIMER2_TOP;
 858:	89 ef       	ldi	r24, 0xF9	; 249
 85a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
	TIMSK2 = (1 << TOIE2);
 85e:	10 93 70 00 	sts	0x0070, r17	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
	
}
 862:	df 91       	pop	r29
 864:	cf 91       	pop	r28
 866:	1f 91       	pop	r17
 868:	08 95       	ret

0000086a <startTimePan1>:

void startTimePan1(){
	
	//Set internal flag
	pan1_cooking_time = 0;
 86a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <pan1_cooking_time+0x1>
 86e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <pan1_cooking_time>
	pan1Free = false;
 872:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <pan1Free>
 876:	08 95       	ret

00000878 <flipPan1>:
	}
}

void flipPan1(){
	
	motor_flipping = MOTOR1;
 878:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <motor_flipping>
	setMotorPWM(MOTOR_OPTIMUM_PWM_FORWARD, motor_flipping);
 87c:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <motor_flipping>
 880:	84 e6       	ldi	r24, 0x64	; 100
 882:	0e 94 7e 00 	call	0xfc	; 0xfc <setMotorPWM>
	
	//Flip forward
	MOTOR1_SETING(MOTOR_FORWARD);
 886:	5b 98       	cbi	0x0b, 3	; 11
 888:	5f 98       	cbi	0x0b, 7	; 11
	MOTOR1_ENABLE();
 88a:	84 b5       	in	r24, 0x24	; 36
 88c:	80 63       	ori	r24, 0x30	; 48
 88e:	84 bd       	out	0x24, r24	; 36
	startTimer2();
	
}

static void startTimer2(){
	curr_time = 0;
 890:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <curr_time+0x1>
 894:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <curr_time>
	TCCR2B |= (1 << CS22) | (1 << CS20);
 898:	e1 eb       	ldi	r30, 0xB1	; 177
 89a:	f0 e0       	ldi	r31, 0x00	; 0
 89c:	80 81       	ld	r24, Z
 89e:	85 60       	ori	r24, 0x05	; 5
 8a0:	80 83       	st	Z, r24
 8a2:	08 95       	ret

000008a4 <flipPan2>:
	startTimer2();
}

void flipPan2(){
	
	motor_flipping = MOTOR2;
 8a4:	81 e0       	ldi	r24, 0x01	; 1
 8a6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <motor_flipping>
	setMotorPWM(MOTOR_OPTIMUM_PWM_FORWARD, motor_flipping);
 8aa:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <motor_flipping>
 8ae:	84 e6       	ldi	r24, 0x64	; 100
 8b0:	0e 94 7e 00 	call	0xfc	; 0xfc <setMotorPWM>
	
	//Flip forward
	MOTOR2_SETING(MOTOR_FORWARD);
 8b4:	88 b1       	in	r24, 0x08	; 8
 8b6:	8f 7c       	andi	r24, 0xCF	; 207
 8b8:	80 61       	ori	r24, 0x10	; 16
 8ba:	88 b9       	out	0x08, r24	; 8
	MOTOR2_ENABLE();
 8bc:	84 b5       	in	r24, 0x24	; 36
 8be:	80 6c       	ori	r24, 0xC0	; 192
 8c0:	84 bd       	out	0x24, r24	; 36
	startTimer2();
	
}

static void startTimer2(){
	curr_time = 0;
 8c2:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <curr_time+0x1>
 8c6:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <curr_time>
	TCCR2B |= (1 << CS22) | (1 << CS20);
 8ca:	e1 eb       	ldi	r30, 0xB1	; 177
 8cc:	f0 e0       	ldi	r31, 0x00	; 0
 8ce:	80 81       	ld	r24, Z
 8d0:	85 60       	ori	r24, 0x05	; 5
 8d2:	80 83       	st	Z, r24
 8d4:	08 95       	ret

000008d6 <__vector_9>:
	
	//Reset count
	TCNT2 = 0x00;
}

ISR(TIMER2_OVF_vect) {
 8d6:	1f 92       	push	r1
 8d8:	0f 92       	push	r0
 8da:	0f b6       	in	r0, 0x3f	; 63
 8dc:	0f 92       	push	r0
 8de:	11 24       	eor	r1, r1
 8e0:	2f 93       	push	r18
 8e2:	3f 93       	push	r19
 8e4:	4f 93       	push	r20
 8e6:	5f 93       	push	r21
 8e8:	6f 93       	push	r22
 8ea:	7f 93       	push	r23
 8ec:	8f 93       	push	r24
 8ee:	9f 93       	push	r25
 8f0:	af 93       	push	r26
 8f2:	bf 93       	push	r27
 8f4:	ef 93       	push	r30
 8f6:	ff 93       	push	r31
	
	switch (curr_time++) {
 8f8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <curr_time>
 8fc:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <curr_time+0x1>
 900:	9c 01       	movw	r18, r24
 902:	2f 5f       	subi	r18, 0xFF	; 255
 904:	3f 4f       	sbci	r19, 0xFF	; 255
 906:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <curr_time+0x1>
 90a:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <curr_time>
 90e:	86 3d       	cpi	r24, 0xD6	; 214
 910:	26 e0       	ldi	r18, 0x06	; 6
 912:	92 07       	cpc	r25, r18
 914:	79 f1       	breq	.+94     	; 0x974 <__stack+0x75>
 916:	20 f4       	brcc	.+8      	; 0x920 <__stack+0x21>
 918:	88 3e       	cpi	r24, 0xE8	; 232
 91a:	93 40       	sbci	r25, 0x03	; 3
 91c:	51 f0       	breq	.+20     	; 0x932 <__stack+0x33>
 91e:	71 c0       	rjmp	.+226    	; 0xa02 <__stack+0x103>
 920:	8e 3b       	cpi	r24, 0xBE	; 190
 922:	2a e0       	ldi	r18, 0x0A	; 10
 924:	92 07       	cpc	r25, r18
 926:	29 f0       	breq	.+10     	; 0x932 <__stack+0x33>
 928:	8c 3a       	cpi	r24, 0xAC	; 172
 92a:	9d 40       	sbci	r25, 0x0D	; 13
 92c:	09 f4       	brne	.+2      	; 0x930 <__stack+0x31>
 92e:	4a c0       	rjmp	.+148    	; 0x9c4 <__stack+0xc5>
 930:	68 c0       	rjmp	.+208    	; 0xa02 <__stack+0x103>
		
		//Mid way time to break
		case MOTOR_FORWARD_TIME_S:
		case MOTOR_BACKWARD_TIME_S:
			if (motor_flipping == MOTOR1) {
 932:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <motor_flipping>
 936:	81 11       	cpse	r24, r1
 938:	0e c0       	rjmp	.+28     	; 0x956 <__stack+0x57>
				MOTOR1_DISABLE();
 93a:	84 b5       	in	r24, 0x24	; 36
 93c:	8f 7c       	andi	r24, 0xCF	; 207
 93e:	84 bd       	out	0x24, r24	; 36
				setMotorPWM(MOTOR_OPTIMUM_PWM_BREAK, motor_flipping);
 940:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <motor_flipping>
 944:	84 e6       	ldi	r24, 0x64	; 100
 946:	0e 94 7e 00 	call	0xfc	; 0xfc <setMotorPWM>
				MOTOR1_SETING(MOTOR_BREAK);
 94a:	5b 98       	cbi	0x0b, 3	; 11
 94c:	5f 98       	cbi	0x0b, 7	; 11
				MOTOR1_ENABLE();
 94e:	84 b5       	in	r24, 0x24	; 36
 950:	80 63       	ori	r24, 0x30	; 48
 952:	84 bd       	out	0x24, r24	; 36
 954:	56 c0       	rjmp	.+172    	; 0xa02 <__stack+0x103>
			}
			else {
				MOTOR2_DISABLE();
 956:	84 b5       	in	r24, 0x24	; 36
 958:	8f 73       	andi	r24, 0x3F	; 63
 95a:	84 bd       	out	0x24, r24	; 36
				setMotorPWM(MOTOR_OPTIMUM_PWM_BREAK, motor_flipping);
 95c:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <motor_flipping>
 960:	84 e6       	ldi	r24, 0x64	; 100
 962:	0e 94 7e 00 	call	0xfc	; 0xfc <setMotorPWM>
				MOTOR2_SETING(MOTOR_BREAK);
 966:	88 b1       	in	r24, 0x08	; 8
 968:	8f 7c       	andi	r24, 0xCF	; 207
 96a:	88 b9       	out	0x08, r24	; 8
				MOTOR2_ENABLE();
 96c:	84 b5       	in	r24, 0x24	; 36
 96e:	80 6c       	ori	r24, 0xC0	; 192
 970:	84 bd       	out	0x24, r24	; 36
 972:	47 c0       	rjmp	.+142    	; 0xa02 <__stack+0x103>
			}
			break;
		
		//We have stopped the pan at pancake destination time to go back
		case MOTOR_BREAK_FORWARD_TIME_S:
			if (motor_flipping == MOTOR1) {
 974:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <motor_flipping>
 978:	81 11       	cpse	r24, r1
 97a:	14 c0       	rjmp	.+40     	; 0x9a4 <__stack+0xa5>
				MOTOR1_DISABLE();
 97c:	84 b5       	in	r24, 0x24	; 36
 97e:	8f 7c       	andi	r24, 0xCF	; 207
 980:	84 bd       	out	0x24, r24	; 36
				setMotorPWM(MOTOR_OPTIMUM_PWM_BACKWARD, motor_flipping);
 982:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <motor_flipping>
 986:	84 e6       	ldi	r24, 0x64	; 100
 988:	0e 94 7e 00 	call	0xfc	; 0xfc <setMotorPWM>
				MOTOR1_SETING(MOTOR_BACKWARD);
 98c:	5b 98       	cbi	0x0b, 3	; 11
 98e:	5f 98       	cbi	0x0b, 7	; 11
				MOTOR1_ENABLE();
 990:	84 b5       	in	r24, 0x24	; 36
 992:	80 63       	ori	r24, 0x30	; 48
 994:	84 bd       	out	0x24, r24	; 36
}

static void startTimePan2(){
	
	//Set internal flag
	pan2_cooking_time = 0;
 996:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 99a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	pan2Free = false;
 99e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 9a2:	2f c0       	rjmp	.+94     	; 0xa02 <__stack+0x103>
				MOTOR1_SETING(MOTOR_BACKWARD);
				MOTOR1_ENABLE();
				startTimePan2();
			}
			else {
				MOTOR2_DISABLE();
 9a4:	84 b5       	in	r24, 0x24	; 36
 9a6:	8f 73       	andi	r24, 0x3F	; 63
 9a8:	84 bd       	out	0x24, r24	; 36
				setMotorPWM(MOTOR_OPTIMUM_PWM_BACKWARD, motor_flipping);
 9aa:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <motor_flipping>
 9ae:	84 e6       	ldi	r24, 0x64	; 100
 9b0:	0e 94 7e 00 	call	0xfc	; 0xfc <setMotorPWM>
				MOTOR2_SETING(MOTOR_BACKWARD);
 9b4:	88 b1       	in	r24, 0x08	; 8
 9b6:	8f 7c       	andi	r24, 0xCF	; 207
 9b8:	80 62       	ori	r24, 0x20	; 32
 9ba:	88 b9       	out	0x08, r24	; 8
				MOTOR2_ENABLE();
 9bc:	84 b5       	in	r24, 0x24	; 36
 9be:	80 6c       	ori	r24, 0xC0	; 192
 9c0:	84 bd       	out	0x24, r24	; 36
 9c2:	1f c0       	rjmp	.+62     	; 0xa02 <__stack+0x103>
			}
			break;
		
		//We have reached the starting position set flags
		case MOTOR_BREAK_BACKWARD_TIME_S:
			if (motor_flipping == MOTOR1) {
 9c4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <motor_flipping>
 9c8:	81 11       	cpse	r24, r1
 9ca:	09 c0       	rjmp	.+18     	; 0x9de <__stack+0xdf>
				MOTOR1_DISABLE();
 9cc:	84 b5       	in	r24, 0x24	; 36
 9ce:	8f 7c       	andi	r24, 0xCF	; 207
 9d0:	84 bd       	out	0x24, r24	; 36
				MOTOR1_SETING(MOTOR_OFF);
 9d2:	5b 98       	cbi	0x0b, 3	; 11
 9d4:	5f 98       	cbi	0x0b, 7	; 11
				pan1Free = true;
 9d6:	81 e0       	ldi	r24, 0x01	; 1
 9d8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pan1Free>
 9dc:	0b c0       	rjmp	.+22     	; 0x9f4 <__stack+0xf5>
			}
			else {
				MOTOR2_DISABLE();
 9de:	84 b5       	in	r24, 0x24	; 36
 9e0:	8f 73       	andi	r24, 0x3F	; 63
 9e2:	84 bd       	out	0x24, r24	; 36
				MOTOR2_SETING(MOTOR_OFF);
 9e4:	88 b1       	in	r24, 0x08	; 8
 9e6:	80 63       	ori	r24, 0x30	; 48
 9e8:	88 b9       	out	0x08, r24	; 8
				pancake_done = true;
 9ea:	81 e0       	ldi	r24, 0x01	; 1
 9ec:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pancake_done>
				pan2Free = true;
 9f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	TCCR2B |= (1 << CS22) | (1 << CS20);
}

static void stopTimer2(){
	//Stop clock
	TCCR2B &= ~((1 << CS22) | (1 << CS20));
 9f4:	e1 eb       	ldi	r30, 0xB1	; 177
 9f6:	f0 e0       	ldi	r31, 0x00	; 0
 9f8:	80 81       	ld	r24, Z
 9fa:	8a 7f       	andi	r24, 0xFA	; 250
 9fc:	80 83       	st	Z, r24
	
	//Reset count
	TCNT2 = 0x00;
 9fe:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
			}
			//Stop the timer
			stopTimer2();
			break;
	}
}
 a02:	ff 91       	pop	r31
 a04:	ef 91       	pop	r30
 a06:	bf 91       	pop	r27
 a08:	af 91       	pop	r26
 a0a:	9f 91       	pop	r25
 a0c:	8f 91       	pop	r24
 a0e:	7f 91       	pop	r23
 a10:	6f 91       	pop	r22
 a12:	5f 91       	pop	r21
 a14:	4f 91       	pop	r20
 a16:	3f 91       	pop	r19
 a18:	2f 91       	pop	r18
 a1a:	0f 90       	pop	r0
 a1c:	0f be       	out	0x3f, r0	; 63
 a1e:	0f 90       	pop	r0
 a20:	1f 90       	pop	r1
 a22:	18 95       	reti

00000a24 <init_1Hz_timer>:
    }
}

void init_1Hz_timer(){
	//Setup timer
	PRR &= ~(1 << PRTIM1);	//Enable timer 1
 a24:	e4 e6       	ldi	r30, 0x64	; 100
 a26:	f0 e0       	ldi	r31, 0x00	; 0
 a28:	80 81       	ld	r24, Z
 a2a:	87 7f       	andi	r24, 0xF7	; 247
 a2c:	80 83       	st	Z, r24
	
	 
	//Timer is in fast PWM mode, TOP is ICR1 and prescaler is 256
	TCCR1A = (1 << WGM11);
 a2e:	82 e0       	ldi	r24, 0x02	; 2
 a30:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS12);
 a34:	8c e1       	ldi	r24, 0x1C	; 28
 a36:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	
	//Set TOP value
	ICR1 = TIMER_1HZ_TOP;
 a3a:	83 e2       	ldi	r24, 0x23	; 35
 a3c:	94 ef       	ldi	r25, 0xF4	; 244
 a3e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 a42:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	
	//Overflow interrupt enabled
	TIMSK1 = (1 << TOIE1);
 a46:	81 e0       	ldi	r24, 0x01	; 1
 a48:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 a4c:	08 95       	ret

00000a4e <main>:
void init_1Hz_timer();

int main(void)
{
	//Enable interrupts
	sei();
 a4e:	78 94       	sei
	init_1Hz_timer();
 a50:	0e 94 12 05 	call	0xa24	; 0xa24 <init_1Hz_timer>
	
	init_digital_comm();		//Initialize the digital communication
 a54:	0e 94 be 00 	call	0x17c	; 0x17c <init_digital_comm>
	I2C_SLAVE_init();			//Initialize the I2C communication
 a58:	0e 94 48 02 	call	0x490	; 0x490 <I2C_SLAVE_init>
	init_regulation();			//Initialize the regulation
 a5c:	0e 94 ed 00 	call	0x1da	; 0x1da <init_regulation>
	init_motors();				//Initialize the motor pins and PWMs
 a60:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <init_motors>

	I2C_commands_t temp = 0xFF;
	
	bool check_for_free_pan = false;
	DDRB |= 1<<DDB3;
 a64:	23 9a       	sbi	0x04, 3	; 4
	init_regulation();			//Initialize the regulation
	init_motors();				//Initialize the motor pins and PWMs

	I2C_commands_t temp = 0xFF;
	
	bool check_for_free_pan = false;
 a66:	d0 e0       	ldi	r29, 0x00	; 0
	init_digital_comm();		//Initialize the digital communication
	I2C_SLAVE_init();			//Initialize the I2C communication
	init_regulation();			//Initialize the regulation
	init_motors();				//Initialize the motor pins and PWMs

	I2C_commands_t temp = 0xFF;
 a68:	cf ef       	ldi	r28, 0xFF	; 255
    /* Replace with your application code */
    while (1) 
    {
		if (heat_ok)
		{
			PORTB ^= 1<<PORTB3;
 a6a:	08 e0       	ldi	r16, 0x08	; 8
			temp = I2C_SLAVE_getData();
		}
		
		if (check_for_free_pan && pan1Free && heat_ok){
			I2C_SLAVE_sendData(pan1Free);
			check_for_free_pan = false;
 a6c:	f1 2c       	mov	r15, r1
				I2C_SLAVE_sendData(temp);
				temp = 0xFF;
				break;

			case GET_FIRST_PAN_STATUS:
				check_for_free_pan = true;
 a6e:	ee 24       	eor	r14, r14
 a70:	e3 94       	inc	r14
				temp = 0xFF;
 a72:	1f ef       	ldi	r17, 0xFF	; 255
	bool check_for_free_pan = false;
	DDRB |= 1<<DDB3;
    /* Replace with your application code */
    while (1) 
    {
		if (heat_ok)
 a74:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <heat_ok>
 a78:	88 23       	and	r24, r24
 a7a:	19 f0       	breq	.+6      	; 0xa82 <main+0x34>
		{
			PORTB ^= 1<<PORTB3;
 a7c:	85 b1       	in	r24, 0x05	; 5
 a7e:	80 27       	eor	r24, r16
 a80:	85 b9       	out	0x05, r24	; 5
		}
		if (pan1_cooking_time == PANCAKE_COOKING_TIME1_S){
 a82:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pan1_cooking_time>
 a86:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pan1_cooking_time+0x1>
 a8a:	05 97       	sbiw	r24, 0x05	; 5
 a8c:	11 f4       	brne	.+4      	; 0xa92 <main+0x44>
			flipPan1();
 a8e:	0e 94 3c 04 	call	0x878	; 0x878 <flipPan1>
		}
		
		if (pan2_cooking_time == PANCAKE_COOKING_TIME2_S){
 a92:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 a96:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 a9a:	0a 97       	sbiw	r24, 0x0a	; 10
 a9c:	11 f4       	brne	.+4      	; 0xaa2 <main+0x54>
			flipPan2();
 a9e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <flipPan2>
		}
		
		if (I2C_SLAVE_checkData()){
 aa2:	0e 94 c3 01 	call	0x386	; 0x386 <I2C_SLAVE_checkData>
 aa6:	88 23       	and	r24, r24
 aa8:	19 f0       	breq	.+6      	; 0xab0 <main+0x62>
			temp = I2C_SLAVE_getData();
 aaa:	0e 94 27 02 	call	0x44e	; 0x44e <I2C_SLAVE_getData>
 aae:	c8 2f       	mov	r28, r24
		}
		
		if (check_for_free_pan && pan1Free && heat_ok){
 ab0:	dd 23       	and	r29, r29
 ab2:	69 f0       	breq	.+26     	; 0xace <main+0x80>
 ab4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pan1Free>
 ab8:	88 23       	and	r24, r24
 aba:	49 f0       	breq	.+18     	; 0xace <main+0x80>
 abc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <heat_ok>
 ac0:	88 23       	and	r24, r24
 ac2:	29 f0       	breq	.+10     	; 0xace <main+0x80>
			I2C_SLAVE_sendData(pan1Free);
 ac4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pan1Free>
 ac8:	0e 94 ce 01 	call	0x39c	; 0x39c <I2C_SLAVE_sendData>
			check_for_free_pan = false;
 acc:	df 2d       	mov	r29, r15
		}
		
		switch (temp) {
 ace:	c1 30       	cpi	r28, 0x01	; 1
 ad0:	21 f0       	breq	.+8      	; 0xada <main+0x8c>
 ad2:	30 f0       	brcs	.+12     	; 0xae0 <main+0x92>
 ad4:	c2 30       	cpi	r28, 0x02	; 2
 ad6:	49 f0       	breq	.+18     	; 0xaea <main+0x9c>
 ad8:	cd cf       	rjmp	.-102    	; 0xa74 <main+0x26>
				I2C_SLAVE_sendData(temp);
				temp = 0xFF;
				break;

			case GET_FIRST_PAN_STATUS:
				check_for_free_pan = true;
 ada:	de 2d       	mov	r29, r14
				temp = 0xFF;
 adc:	c1 2f       	mov	r28, r17
 ade:	ca cf       	rjmp	.-108    	; 0xa74 <main+0x26>
		}
		
		switch (temp) {
				
			case PING:
				I2C_SLAVE_sendData(temp);
 ae0:	8f 2d       	mov	r24, r15
 ae2:	0e 94 ce 01 	call	0x39c	; 0x39c <I2C_SLAVE_sendData>
				temp = 0xFF;
 ae6:	c1 2f       	mov	r28, r17
				break;
 ae8:	c5 cf       	rjmp	.-118    	; 0xa74 <main+0x26>
				check_for_free_pan = true;
				temp = 0xFF;
				break;

			case BEGIN_COOKING:
				if (pan1Free & heat_ok)
 aea:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pan1Free>
 aee:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <heat_ok>
 af2:	88 23       	and	r24, r24
 af4:	09 f4       	brne	.+2      	; 0xaf8 <main+0xaa>
 af6:	be cf       	rjmp	.-132    	; 0xa74 <main+0x26>
 af8:	99 23       	and	r25, r25
 afa:	09 f4       	brne	.+2      	; 0xafe <main+0xb0>
 afc:	bb cf       	rjmp	.-138    	; 0xa74 <main+0x26>
				startTimePan1();
 afe:	0e 94 35 04 	call	0x86a	; 0x86a <startTimePan1>
 b02:	b8 cf       	rjmp	.-144    	; 0xa74 <main+0x26>

00000b04 <__vector_13>:
	
	//Overflow interrupt enabled
	TIMSK1 = (1 << TOIE1);
}

ISR(TIMER1_OVF_vect){
 b04:	1f 92       	push	r1
 b06:	0f 92       	push	r0
 b08:	0f b6       	in	r0, 0x3f	; 63
 b0a:	0f 92       	push	r0
 b0c:	11 24       	eor	r1, r1
 b0e:	2f 93       	push	r18
 b10:	3f 93       	push	r19
 b12:	4f 93       	push	r20
 b14:	5f 93       	push	r21
 b16:	6f 93       	push	r22
 b18:	7f 93       	push	r23
 b1a:	8f 93       	push	r24
 b1c:	9f 93       	push	r25
 b1e:	af 93       	push	r26
 b20:	bf 93       	push	r27
 b22:	ef 93       	push	r30
 b24:	ff 93       	push	r31
	
	//Control cooking time
	pan1_cooking_time += (pan1Free ? 0 : 1);
 b26:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <pan1Free>
 b2a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <pan1_cooking_time>
 b2e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <pan1_cooking_time+0x1>
 b32:	81 e0       	ldi	r24, 0x01	; 1
 b34:	98 27       	eor	r25, r24
 b36:	29 0f       	add	r18, r25
 b38:	31 1d       	adc	r19, r1
 b3a:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <pan1_cooking_time+0x1>
 b3e:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <pan1_cooking_time>
	pan2_cooking_time += (pan2Free ? 0 : 1);
 b42:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 b46:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 b4a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
 b4e:	89 27       	eor	r24, r25
 b50:	a9 01       	movw	r20, r18
 b52:	48 0f       	add	r20, r24
 b54:	51 1d       	adc	r21, r1
 b56:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <__data_end+0x1>
 b5a:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <__data_end>
	
	//Pancake Done
	pancakeDone();
 b5e:	0e 94 cd 00 	call	0x19a	; 0x19a <pancakeDone>
	
}
 b62:	ff 91       	pop	r31
 b64:	ef 91       	pop	r30
 b66:	bf 91       	pop	r27
 b68:	af 91       	pop	r26
 b6a:	9f 91       	pop	r25
 b6c:	8f 91       	pop	r24
 b6e:	7f 91       	pop	r23
 b70:	6f 91       	pop	r22
 b72:	5f 91       	pop	r21
 b74:	4f 91       	pop	r20
 b76:	3f 91       	pop	r19
 b78:	2f 91       	pop	r18
 b7a:	0f 90       	pop	r0
 b7c:	0f be       	out	0x3f, r0	; 63
 b7e:	0f 90       	pop	r0
 b80:	1f 90       	pop	r1
 b82:	18 95       	reti

00000b84 <__subsf3>:
 b84:	50 58       	subi	r21, 0x80	; 128

00000b86 <__addsf3>:
 b86:	bb 27       	eor	r27, r27
 b88:	aa 27       	eor	r26, r26
 b8a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__addsf3x>
 b8e:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <__fp_round>
 b92:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__fp_pscA>
 b96:	38 f0       	brcs	.+14     	; 0xba6 <__addsf3+0x20>
 b98:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__fp_pscB>
 b9c:	20 f0       	brcs	.+8      	; 0xba6 <__addsf3+0x20>
 b9e:	39 f4       	brne	.+14     	; 0xbae <__addsf3+0x28>
 ba0:	9f 3f       	cpi	r25, 0xFF	; 255
 ba2:	19 f4       	brne	.+6      	; 0xbaa <__addsf3+0x24>
 ba4:	26 f4       	brtc	.+8      	; 0xbae <__addsf3+0x28>
 ba6:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__fp_nan>
 baa:	0e f4       	brtc	.+2      	; 0xbae <__addsf3+0x28>
 bac:	e0 95       	com	r30
 bae:	e7 fb       	bst	r30, 7
 bb0:	0c 94 b2 06 	jmp	0xd64	; 0xd64 <__fp_inf>

00000bb4 <__addsf3x>:
 bb4:	e9 2f       	mov	r30, r25
 bb6:	0e 94 03 07 	call	0xe06	; 0xe06 <__fp_split3>
 bba:	58 f3       	brcs	.-42     	; 0xb92 <__addsf3+0xc>
 bbc:	ba 17       	cp	r27, r26
 bbe:	62 07       	cpc	r22, r18
 bc0:	73 07       	cpc	r23, r19
 bc2:	84 07       	cpc	r24, r20
 bc4:	95 07       	cpc	r25, r21
 bc6:	20 f0       	brcs	.+8      	; 0xbd0 <__addsf3x+0x1c>
 bc8:	79 f4       	brne	.+30     	; 0xbe8 <__addsf3x+0x34>
 bca:	a6 f5       	brtc	.+104    	; 0xc34 <__addsf3x+0x80>
 bcc:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__fp_zero>
 bd0:	0e f4       	brtc	.+2      	; 0xbd4 <__addsf3x+0x20>
 bd2:	e0 95       	com	r30
 bd4:	0b 2e       	mov	r0, r27
 bd6:	ba 2f       	mov	r27, r26
 bd8:	a0 2d       	mov	r26, r0
 bda:	0b 01       	movw	r0, r22
 bdc:	b9 01       	movw	r22, r18
 bde:	90 01       	movw	r18, r0
 be0:	0c 01       	movw	r0, r24
 be2:	ca 01       	movw	r24, r20
 be4:	a0 01       	movw	r20, r0
 be6:	11 24       	eor	r1, r1
 be8:	ff 27       	eor	r31, r31
 bea:	59 1b       	sub	r21, r25
 bec:	99 f0       	breq	.+38     	; 0xc14 <__addsf3x+0x60>
 bee:	59 3f       	cpi	r21, 0xF9	; 249
 bf0:	50 f4       	brcc	.+20     	; 0xc06 <__addsf3x+0x52>
 bf2:	50 3e       	cpi	r21, 0xE0	; 224
 bf4:	68 f1       	brcs	.+90     	; 0xc50 <__addsf3x+0x9c>
 bf6:	1a 16       	cp	r1, r26
 bf8:	f0 40       	sbci	r31, 0x00	; 0
 bfa:	a2 2f       	mov	r26, r18
 bfc:	23 2f       	mov	r18, r19
 bfe:	34 2f       	mov	r19, r20
 c00:	44 27       	eor	r20, r20
 c02:	58 5f       	subi	r21, 0xF8	; 248
 c04:	f3 cf       	rjmp	.-26     	; 0xbec <__addsf3x+0x38>
 c06:	46 95       	lsr	r20
 c08:	37 95       	ror	r19
 c0a:	27 95       	ror	r18
 c0c:	a7 95       	ror	r26
 c0e:	f0 40       	sbci	r31, 0x00	; 0
 c10:	53 95       	inc	r21
 c12:	c9 f7       	brne	.-14     	; 0xc06 <__addsf3x+0x52>
 c14:	7e f4       	brtc	.+30     	; 0xc34 <__addsf3x+0x80>
 c16:	1f 16       	cp	r1, r31
 c18:	ba 0b       	sbc	r27, r26
 c1a:	62 0b       	sbc	r22, r18
 c1c:	73 0b       	sbc	r23, r19
 c1e:	84 0b       	sbc	r24, r20
 c20:	ba f0       	brmi	.+46     	; 0xc50 <__addsf3x+0x9c>
 c22:	91 50       	subi	r25, 0x01	; 1
 c24:	a1 f0       	breq	.+40     	; 0xc4e <__addsf3x+0x9a>
 c26:	ff 0f       	add	r31, r31
 c28:	bb 1f       	adc	r27, r27
 c2a:	66 1f       	adc	r22, r22
 c2c:	77 1f       	adc	r23, r23
 c2e:	88 1f       	adc	r24, r24
 c30:	c2 f7       	brpl	.-16     	; 0xc22 <__addsf3x+0x6e>
 c32:	0e c0       	rjmp	.+28     	; 0xc50 <__addsf3x+0x9c>
 c34:	ba 0f       	add	r27, r26
 c36:	62 1f       	adc	r22, r18
 c38:	73 1f       	adc	r23, r19
 c3a:	84 1f       	adc	r24, r20
 c3c:	48 f4       	brcc	.+18     	; 0xc50 <__addsf3x+0x9c>
 c3e:	87 95       	ror	r24
 c40:	77 95       	ror	r23
 c42:	67 95       	ror	r22
 c44:	b7 95       	ror	r27
 c46:	f7 95       	ror	r31
 c48:	9e 3f       	cpi	r25, 0xFE	; 254
 c4a:	08 f0       	brcs	.+2      	; 0xc4e <__addsf3x+0x9a>
 c4c:	b0 cf       	rjmp	.-160    	; 0xbae <__addsf3+0x28>
 c4e:	93 95       	inc	r25
 c50:	88 0f       	add	r24, r24
 c52:	08 f0       	brcs	.+2      	; 0xc56 <__addsf3x+0xa2>
 c54:	99 27       	eor	r25, r25
 c56:	ee 0f       	add	r30, r30
 c58:	97 95       	ror	r25
 c5a:	87 95       	ror	r24
 c5c:	08 95       	ret

00000c5e <ceil>:
 c5e:	0e 94 25 07 	call	0xe4a	; 0xe4a <__fp_trunc>
 c62:	90 f0       	brcs	.+36     	; 0xc88 <ceil+0x2a>
 c64:	9f 37       	cpi	r25, 0x7F	; 127
 c66:	48 f4       	brcc	.+18     	; 0xc7a <ceil+0x1c>
 c68:	91 11       	cpse	r25, r1
 c6a:	16 f4       	brtc	.+4      	; 0xc70 <ceil+0x12>
 c6c:	0c 94 3e 07 	jmp	0xe7c	; 0xe7c <__fp_szero>
 c70:	60 e0       	ldi	r22, 0x00	; 0
 c72:	70 e0       	ldi	r23, 0x00	; 0
 c74:	80 e8       	ldi	r24, 0x80	; 128
 c76:	9f e3       	ldi	r25, 0x3F	; 63
 c78:	08 95       	ret
 c7a:	26 f0       	brts	.+8      	; 0xc84 <ceil+0x26>
 c7c:	1b 16       	cp	r1, r27
 c7e:	61 1d       	adc	r22, r1
 c80:	71 1d       	adc	r23, r1
 c82:	81 1d       	adc	r24, r1
 c84:	0c 94 b8 06 	jmp	0xd70	; 0xd70 <__fp_mintl>
 c88:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <__fp_mpack>

00000c8c <__fixunssfsi>:
 c8c:	0e 94 0b 07 	call	0xe16	; 0xe16 <__fp_splitA>
 c90:	88 f0       	brcs	.+34     	; 0xcb4 <__fixunssfsi+0x28>
 c92:	9f 57       	subi	r25, 0x7F	; 127
 c94:	98 f0       	brcs	.+38     	; 0xcbc <__fixunssfsi+0x30>
 c96:	b9 2f       	mov	r27, r25
 c98:	99 27       	eor	r25, r25
 c9a:	b7 51       	subi	r27, 0x17	; 23
 c9c:	b0 f0       	brcs	.+44     	; 0xcca <__fixunssfsi+0x3e>
 c9e:	e1 f0       	breq	.+56     	; 0xcd8 <__fixunssfsi+0x4c>
 ca0:	66 0f       	add	r22, r22
 ca2:	77 1f       	adc	r23, r23
 ca4:	88 1f       	adc	r24, r24
 ca6:	99 1f       	adc	r25, r25
 ca8:	1a f0       	brmi	.+6      	; 0xcb0 <__fixunssfsi+0x24>
 caa:	ba 95       	dec	r27
 cac:	c9 f7       	brne	.-14     	; 0xca0 <__fixunssfsi+0x14>
 cae:	14 c0       	rjmp	.+40     	; 0xcd8 <__fixunssfsi+0x4c>
 cb0:	b1 30       	cpi	r27, 0x01	; 1
 cb2:	91 f0       	breq	.+36     	; 0xcd8 <__fixunssfsi+0x4c>
 cb4:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__fp_zero>
 cb8:	b1 e0       	ldi	r27, 0x01	; 1
 cba:	08 95       	ret
 cbc:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__fp_zero>
 cc0:	67 2f       	mov	r22, r23
 cc2:	78 2f       	mov	r23, r24
 cc4:	88 27       	eor	r24, r24
 cc6:	b8 5f       	subi	r27, 0xF8	; 248
 cc8:	39 f0       	breq	.+14     	; 0xcd8 <__fixunssfsi+0x4c>
 cca:	b9 3f       	cpi	r27, 0xF9	; 249
 ccc:	cc f3       	brlt	.-14     	; 0xcc0 <__fixunssfsi+0x34>
 cce:	86 95       	lsr	r24
 cd0:	77 95       	ror	r23
 cd2:	67 95       	ror	r22
 cd4:	b3 95       	inc	r27
 cd6:	d9 f7       	brne	.-10     	; 0xcce <__fixunssfsi+0x42>
 cd8:	3e f4       	brtc	.+14     	; 0xce8 <__fixunssfsi+0x5c>
 cda:	90 95       	com	r25
 cdc:	80 95       	com	r24
 cde:	70 95       	com	r23
 ce0:	61 95       	neg	r22
 ce2:	7f 4f       	sbci	r23, 0xFF	; 255
 ce4:	8f 4f       	sbci	r24, 0xFF	; 255
 ce6:	9f 4f       	sbci	r25, 0xFF	; 255
 ce8:	08 95       	ret

00000cea <__floatunsisf>:
 cea:	e8 94       	clt
 cec:	09 c0       	rjmp	.+18     	; 0xd00 <__floatsisf+0x12>

00000cee <__floatsisf>:
 cee:	97 fb       	bst	r25, 7
 cf0:	3e f4       	brtc	.+14     	; 0xd00 <__floatsisf+0x12>
 cf2:	90 95       	com	r25
 cf4:	80 95       	com	r24
 cf6:	70 95       	com	r23
 cf8:	61 95       	neg	r22
 cfa:	7f 4f       	sbci	r23, 0xFF	; 255
 cfc:	8f 4f       	sbci	r24, 0xFF	; 255
 cfe:	9f 4f       	sbci	r25, 0xFF	; 255
 d00:	99 23       	and	r25, r25
 d02:	a9 f0       	breq	.+42     	; 0xd2e <__floatsisf+0x40>
 d04:	f9 2f       	mov	r31, r25
 d06:	96 e9       	ldi	r25, 0x96	; 150
 d08:	bb 27       	eor	r27, r27
 d0a:	93 95       	inc	r25
 d0c:	f6 95       	lsr	r31
 d0e:	87 95       	ror	r24
 d10:	77 95       	ror	r23
 d12:	67 95       	ror	r22
 d14:	b7 95       	ror	r27
 d16:	f1 11       	cpse	r31, r1
 d18:	f8 cf       	rjmp	.-16     	; 0xd0a <__floatsisf+0x1c>
 d1a:	fa f4       	brpl	.+62     	; 0xd5a <__floatsisf+0x6c>
 d1c:	bb 0f       	add	r27, r27
 d1e:	11 f4       	brne	.+4      	; 0xd24 <__floatsisf+0x36>
 d20:	60 ff       	sbrs	r22, 0
 d22:	1b c0       	rjmp	.+54     	; 0xd5a <__floatsisf+0x6c>
 d24:	6f 5f       	subi	r22, 0xFF	; 255
 d26:	7f 4f       	sbci	r23, 0xFF	; 255
 d28:	8f 4f       	sbci	r24, 0xFF	; 255
 d2a:	9f 4f       	sbci	r25, 0xFF	; 255
 d2c:	16 c0       	rjmp	.+44     	; 0xd5a <__floatsisf+0x6c>
 d2e:	88 23       	and	r24, r24
 d30:	11 f0       	breq	.+4      	; 0xd36 <__floatsisf+0x48>
 d32:	96 e9       	ldi	r25, 0x96	; 150
 d34:	11 c0       	rjmp	.+34     	; 0xd58 <__floatsisf+0x6a>
 d36:	77 23       	and	r23, r23
 d38:	21 f0       	breq	.+8      	; 0xd42 <__floatsisf+0x54>
 d3a:	9e e8       	ldi	r25, 0x8E	; 142
 d3c:	87 2f       	mov	r24, r23
 d3e:	76 2f       	mov	r23, r22
 d40:	05 c0       	rjmp	.+10     	; 0xd4c <__floatsisf+0x5e>
 d42:	66 23       	and	r22, r22
 d44:	71 f0       	breq	.+28     	; 0xd62 <__floatsisf+0x74>
 d46:	96 e8       	ldi	r25, 0x86	; 134
 d48:	86 2f       	mov	r24, r22
 d4a:	70 e0       	ldi	r23, 0x00	; 0
 d4c:	60 e0       	ldi	r22, 0x00	; 0
 d4e:	2a f0       	brmi	.+10     	; 0xd5a <__floatsisf+0x6c>
 d50:	9a 95       	dec	r25
 d52:	66 0f       	add	r22, r22
 d54:	77 1f       	adc	r23, r23
 d56:	88 1f       	adc	r24, r24
 d58:	da f7       	brpl	.-10     	; 0xd50 <__floatsisf+0x62>
 d5a:	88 0f       	add	r24, r24
 d5c:	96 95       	lsr	r25
 d5e:	87 95       	ror	r24
 d60:	97 f9       	bld	r25, 7
 d62:	08 95       	ret

00000d64 <__fp_inf>:
 d64:	97 f9       	bld	r25, 7
 d66:	9f 67       	ori	r25, 0x7F	; 127
 d68:	80 e8       	ldi	r24, 0x80	; 128
 d6a:	70 e0       	ldi	r23, 0x00	; 0
 d6c:	60 e0       	ldi	r22, 0x00	; 0
 d6e:	08 95       	ret

00000d70 <__fp_mintl>:
 d70:	88 23       	and	r24, r24
 d72:	71 f4       	brne	.+28     	; 0xd90 <__fp_mintl+0x20>
 d74:	77 23       	and	r23, r23
 d76:	21 f0       	breq	.+8      	; 0xd80 <__fp_mintl+0x10>
 d78:	98 50       	subi	r25, 0x08	; 8
 d7a:	87 2b       	or	r24, r23
 d7c:	76 2f       	mov	r23, r22
 d7e:	07 c0       	rjmp	.+14     	; 0xd8e <__fp_mintl+0x1e>
 d80:	66 23       	and	r22, r22
 d82:	11 f4       	brne	.+4      	; 0xd88 <__fp_mintl+0x18>
 d84:	99 27       	eor	r25, r25
 d86:	0d c0       	rjmp	.+26     	; 0xda2 <__fp_mintl+0x32>
 d88:	90 51       	subi	r25, 0x10	; 16
 d8a:	86 2b       	or	r24, r22
 d8c:	70 e0       	ldi	r23, 0x00	; 0
 d8e:	60 e0       	ldi	r22, 0x00	; 0
 d90:	2a f0       	brmi	.+10     	; 0xd9c <__fp_mintl+0x2c>
 d92:	9a 95       	dec	r25
 d94:	66 0f       	add	r22, r22
 d96:	77 1f       	adc	r23, r23
 d98:	88 1f       	adc	r24, r24
 d9a:	da f7       	brpl	.-10     	; 0xd92 <__fp_mintl+0x22>
 d9c:	88 0f       	add	r24, r24
 d9e:	96 95       	lsr	r25
 da0:	87 95       	ror	r24
 da2:	97 f9       	bld	r25, 7
 da4:	08 95       	ret

00000da6 <__fp_mpack>:
 da6:	9f 3f       	cpi	r25, 0xFF	; 255
 da8:	31 f0       	breq	.+12     	; 0xdb6 <__fp_mpack_finite+0xc>

00000daa <__fp_mpack_finite>:
 daa:	91 50       	subi	r25, 0x01	; 1
 dac:	20 f4       	brcc	.+8      	; 0xdb6 <__fp_mpack_finite+0xc>
 dae:	87 95       	ror	r24
 db0:	77 95       	ror	r23
 db2:	67 95       	ror	r22
 db4:	b7 95       	ror	r27
 db6:	88 0f       	add	r24, r24
 db8:	91 1d       	adc	r25, r1
 dba:	96 95       	lsr	r25
 dbc:	87 95       	ror	r24
 dbe:	97 f9       	bld	r25, 7
 dc0:	08 95       	ret

00000dc2 <__fp_nan>:
 dc2:	9f ef       	ldi	r25, 0xFF	; 255
 dc4:	80 ec       	ldi	r24, 0xC0	; 192
 dc6:	08 95       	ret

00000dc8 <__fp_pscA>:
 dc8:	00 24       	eor	r0, r0
 dca:	0a 94       	dec	r0
 dcc:	16 16       	cp	r1, r22
 dce:	17 06       	cpc	r1, r23
 dd0:	18 06       	cpc	r1, r24
 dd2:	09 06       	cpc	r0, r25
 dd4:	08 95       	ret

00000dd6 <__fp_pscB>:
 dd6:	00 24       	eor	r0, r0
 dd8:	0a 94       	dec	r0
 dda:	12 16       	cp	r1, r18
 ddc:	13 06       	cpc	r1, r19
 dde:	14 06       	cpc	r1, r20
 de0:	05 06       	cpc	r0, r21
 de2:	08 95       	ret

00000de4 <__fp_round>:
 de4:	09 2e       	mov	r0, r25
 de6:	03 94       	inc	r0
 de8:	00 0c       	add	r0, r0
 dea:	11 f4       	brne	.+4      	; 0xdf0 <__fp_round+0xc>
 dec:	88 23       	and	r24, r24
 dee:	52 f0       	brmi	.+20     	; 0xe04 <__fp_round+0x20>
 df0:	bb 0f       	add	r27, r27
 df2:	40 f4       	brcc	.+16     	; 0xe04 <__fp_round+0x20>
 df4:	bf 2b       	or	r27, r31
 df6:	11 f4       	brne	.+4      	; 0xdfc <__fp_round+0x18>
 df8:	60 ff       	sbrs	r22, 0
 dfa:	04 c0       	rjmp	.+8      	; 0xe04 <__fp_round+0x20>
 dfc:	6f 5f       	subi	r22, 0xFF	; 255
 dfe:	7f 4f       	sbci	r23, 0xFF	; 255
 e00:	8f 4f       	sbci	r24, 0xFF	; 255
 e02:	9f 4f       	sbci	r25, 0xFF	; 255
 e04:	08 95       	ret

00000e06 <__fp_split3>:
 e06:	57 fd       	sbrc	r21, 7
 e08:	90 58       	subi	r25, 0x80	; 128
 e0a:	44 0f       	add	r20, r20
 e0c:	55 1f       	adc	r21, r21
 e0e:	59 f0       	breq	.+22     	; 0xe26 <__fp_splitA+0x10>
 e10:	5f 3f       	cpi	r21, 0xFF	; 255
 e12:	71 f0       	breq	.+28     	; 0xe30 <__fp_splitA+0x1a>
 e14:	47 95       	ror	r20

00000e16 <__fp_splitA>:
 e16:	88 0f       	add	r24, r24
 e18:	97 fb       	bst	r25, 7
 e1a:	99 1f       	adc	r25, r25
 e1c:	61 f0       	breq	.+24     	; 0xe36 <__fp_splitA+0x20>
 e1e:	9f 3f       	cpi	r25, 0xFF	; 255
 e20:	79 f0       	breq	.+30     	; 0xe40 <__fp_splitA+0x2a>
 e22:	87 95       	ror	r24
 e24:	08 95       	ret
 e26:	12 16       	cp	r1, r18
 e28:	13 06       	cpc	r1, r19
 e2a:	14 06       	cpc	r1, r20
 e2c:	55 1f       	adc	r21, r21
 e2e:	f2 cf       	rjmp	.-28     	; 0xe14 <__fp_split3+0xe>
 e30:	46 95       	lsr	r20
 e32:	f1 df       	rcall	.-30     	; 0xe16 <__fp_splitA>
 e34:	08 c0       	rjmp	.+16     	; 0xe46 <__fp_splitA+0x30>
 e36:	16 16       	cp	r1, r22
 e38:	17 06       	cpc	r1, r23
 e3a:	18 06       	cpc	r1, r24
 e3c:	99 1f       	adc	r25, r25
 e3e:	f1 cf       	rjmp	.-30     	; 0xe22 <__fp_splitA+0xc>
 e40:	86 95       	lsr	r24
 e42:	71 05       	cpc	r23, r1
 e44:	61 05       	cpc	r22, r1
 e46:	08 94       	sec
 e48:	08 95       	ret

00000e4a <__fp_trunc>:
 e4a:	0e 94 0b 07 	call	0xe16	; 0xe16 <__fp_splitA>
 e4e:	a0 f0       	brcs	.+40     	; 0xe78 <__fp_trunc+0x2e>
 e50:	be e7       	ldi	r27, 0x7E	; 126
 e52:	b9 17       	cp	r27, r25
 e54:	88 f4       	brcc	.+34     	; 0xe78 <__fp_trunc+0x2e>
 e56:	bb 27       	eor	r27, r27
 e58:	9f 38       	cpi	r25, 0x8F	; 143
 e5a:	60 f4       	brcc	.+24     	; 0xe74 <__fp_trunc+0x2a>
 e5c:	16 16       	cp	r1, r22
 e5e:	b1 1d       	adc	r27, r1
 e60:	67 2f       	mov	r22, r23
 e62:	78 2f       	mov	r23, r24
 e64:	88 27       	eor	r24, r24
 e66:	98 5f       	subi	r25, 0xF8	; 248
 e68:	f7 cf       	rjmp	.-18     	; 0xe58 <__fp_trunc+0xe>
 e6a:	86 95       	lsr	r24
 e6c:	77 95       	ror	r23
 e6e:	67 95       	ror	r22
 e70:	b1 1d       	adc	r27, r1
 e72:	93 95       	inc	r25
 e74:	96 39       	cpi	r25, 0x96	; 150
 e76:	c8 f3       	brcs	.-14     	; 0xe6a <__fp_trunc+0x20>
 e78:	08 95       	ret

00000e7a <__fp_zero>:
 e7a:	e8 94       	clt

00000e7c <__fp_szero>:
 e7c:	bb 27       	eor	r27, r27
 e7e:	66 27       	eor	r22, r22
 e80:	77 27       	eor	r23, r23
 e82:	cb 01       	movw	r24, r22
 e84:	97 f9       	bld	r25, 7
 e86:	08 95       	ret

00000e88 <__mulsf3>:
 e88:	0e 94 57 07 	call	0xeae	; 0xeae <__mulsf3x>
 e8c:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <__fp_round>
 e90:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__fp_pscA>
 e94:	38 f0       	brcs	.+14     	; 0xea4 <__mulsf3+0x1c>
 e96:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__fp_pscB>
 e9a:	20 f0       	brcs	.+8      	; 0xea4 <__mulsf3+0x1c>
 e9c:	95 23       	and	r25, r21
 e9e:	11 f0       	breq	.+4      	; 0xea4 <__mulsf3+0x1c>
 ea0:	0c 94 b2 06 	jmp	0xd64	; 0xd64 <__fp_inf>
 ea4:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__fp_nan>
 ea8:	11 24       	eor	r1, r1
 eaa:	0c 94 3e 07 	jmp	0xe7c	; 0xe7c <__fp_szero>

00000eae <__mulsf3x>:
 eae:	0e 94 03 07 	call	0xe06	; 0xe06 <__fp_split3>
 eb2:	70 f3       	brcs	.-36     	; 0xe90 <__mulsf3+0x8>

00000eb4 <__mulsf3_pse>:
 eb4:	95 9f       	mul	r25, r21
 eb6:	c1 f3       	breq	.-16     	; 0xea8 <__mulsf3+0x20>
 eb8:	95 0f       	add	r25, r21
 eba:	50 e0       	ldi	r21, 0x00	; 0
 ebc:	55 1f       	adc	r21, r21
 ebe:	62 9f       	mul	r22, r18
 ec0:	f0 01       	movw	r30, r0
 ec2:	72 9f       	mul	r23, r18
 ec4:	bb 27       	eor	r27, r27
 ec6:	f0 0d       	add	r31, r0
 ec8:	b1 1d       	adc	r27, r1
 eca:	63 9f       	mul	r22, r19
 ecc:	aa 27       	eor	r26, r26
 ece:	f0 0d       	add	r31, r0
 ed0:	b1 1d       	adc	r27, r1
 ed2:	aa 1f       	adc	r26, r26
 ed4:	64 9f       	mul	r22, r20
 ed6:	66 27       	eor	r22, r22
 ed8:	b0 0d       	add	r27, r0
 eda:	a1 1d       	adc	r26, r1
 edc:	66 1f       	adc	r22, r22
 ede:	82 9f       	mul	r24, r18
 ee0:	22 27       	eor	r18, r18
 ee2:	b0 0d       	add	r27, r0
 ee4:	a1 1d       	adc	r26, r1
 ee6:	62 1f       	adc	r22, r18
 ee8:	73 9f       	mul	r23, r19
 eea:	b0 0d       	add	r27, r0
 eec:	a1 1d       	adc	r26, r1
 eee:	62 1f       	adc	r22, r18
 ef0:	83 9f       	mul	r24, r19
 ef2:	a0 0d       	add	r26, r0
 ef4:	61 1d       	adc	r22, r1
 ef6:	22 1f       	adc	r18, r18
 ef8:	74 9f       	mul	r23, r20
 efa:	33 27       	eor	r19, r19
 efc:	a0 0d       	add	r26, r0
 efe:	61 1d       	adc	r22, r1
 f00:	23 1f       	adc	r18, r19
 f02:	84 9f       	mul	r24, r20
 f04:	60 0d       	add	r22, r0
 f06:	21 1d       	adc	r18, r1
 f08:	82 2f       	mov	r24, r18
 f0a:	76 2f       	mov	r23, r22
 f0c:	6a 2f       	mov	r22, r26
 f0e:	11 24       	eor	r1, r1
 f10:	9f 57       	subi	r25, 0x7F	; 127
 f12:	50 40       	sbci	r21, 0x00	; 0
 f14:	9a f0       	brmi	.+38     	; 0xf3c <__mulsf3_pse+0x88>
 f16:	f1 f0       	breq	.+60     	; 0xf54 <__mulsf3_pse+0xa0>
 f18:	88 23       	and	r24, r24
 f1a:	4a f0       	brmi	.+18     	; 0xf2e <__mulsf3_pse+0x7a>
 f1c:	ee 0f       	add	r30, r30
 f1e:	ff 1f       	adc	r31, r31
 f20:	bb 1f       	adc	r27, r27
 f22:	66 1f       	adc	r22, r22
 f24:	77 1f       	adc	r23, r23
 f26:	88 1f       	adc	r24, r24
 f28:	91 50       	subi	r25, 0x01	; 1
 f2a:	50 40       	sbci	r21, 0x00	; 0
 f2c:	a9 f7       	brne	.-22     	; 0xf18 <__mulsf3_pse+0x64>
 f2e:	9e 3f       	cpi	r25, 0xFE	; 254
 f30:	51 05       	cpc	r21, r1
 f32:	80 f0       	brcs	.+32     	; 0xf54 <__mulsf3_pse+0xa0>
 f34:	0c 94 b2 06 	jmp	0xd64	; 0xd64 <__fp_inf>
 f38:	0c 94 3e 07 	jmp	0xe7c	; 0xe7c <__fp_szero>
 f3c:	5f 3f       	cpi	r21, 0xFF	; 255
 f3e:	e4 f3       	brlt	.-8      	; 0xf38 <__mulsf3_pse+0x84>
 f40:	98 3e       	cpi	r25, 0xE8	; 232
 f42:	d4 f3       	brlt	.-12     	; 0xf38 <__mulsf3_pse+0x84>
 f44:	86 95       	lsr	r24
 f46:	77 95       	ror	r23
 f48:	67 95       	ror	r22
 f4a:	b7 95       	ror	r27
 f4c:	f7 95       	ror	r31
 f4e:	e7 95       	ror	r30
 f50:	9f 5f       	subi	r25, 0xFF	; 255
 f52:	c1 f7       	brne	.-16     	; 0xf44 <__mulsf3_pse+0x90>
 f54:	fe 2b       	or	r31, r30
 f56:	88 0f       	add	r24, r24
 f58:	91 1d       	adc	r25, r1
 f5a:	96 95       	lsr	r25
 f5c:	87 95       	ror	r24
 f5e:	97 f9       	bld	r25, 7
 f60:	08 95       	ret

00000f62 <_exit>:
 f62:	f8 94       	cli

00000f64 <__stop_program>:
 f64:	ff cf       	rjmp	.-2      	; 0xf64 <__stop_program>
