
Test3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000bfc  00000c90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bfc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800102  00800102  00000c92  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c92  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fdf  00000000  00000000  00000dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000094a  00000000  00000000  00001dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000add  00000000  00000000  00002715  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  000031f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f1  00000000  00000000  000034a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000057a  00000000  00000000  00003c95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  0000420f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 47 03 	jmp	0x68e	; 0x68e <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 42 04 	jmp	0x884	; 0x884 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ef       	ldi	r30, 0xFC	; 252
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 32       	cpi	r26, 0x2A	; 42
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2f 04 	call	0x85e	; 0x85e <main>
  9e:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_SLAVE_sendBit>:
	
}

static void startTimer2(){
	curr_time = 0;
	TCCR2B |= (1 << CS22) | (1 << CS20);
  a6:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <I2C_SLAVE_dataReady>
  aa:	91 30       	cpi	r25, 0x01	; 1
  ac:	41 f4       	brne	.+16     	; 0xbe <I2C_SLAVE_sendBit+0x18>
  ae:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <I2C_SLAVE_toSend>
  b2:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <I2C_SLAVE_tempSave>
  b6:	92 e0       	ldi	r25, 0x02	; 2
  b8:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <I2C_SLAVE_dataReady>
  bc:	03 c0       	rjmp	.+6      	; 0xc4 <I2C_SLAVE_sendBit+0x1e>
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <I2C_SLAVE_dataReady>
  c4:	87 95       	ror	r24
  c6:	88 27       	eor	r24, r24
  c8:	87 95       	ror	r24
  ca:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <I2C_SLAVE_toSend>
  ce:	87 e0       	ldi	r24, 0x07	; 7
  d0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <I2C_SLAVE_haveSended>
  d4:	08 95       	ret

000000d6 <I2C_SLAVE_beginSend>:
  d6:	e9 e6       	ldi	r30, 0x69	; 105
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	80 83       	st	Z, r24
  e0:	80 81       	ld	r24, Z
  e2:	8e 7f       	andi	r24, 0xFE	; 254
  e4:	80 83       	st	Z, r24
  e6:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <I2C_SLAVE_dataReady>
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	21 f4       	brne	.+8      	; 0xf6 <I2C_SLAVE_beginSend+0x20>
  ee:	83 e0       	ldi	r24, 0x03	; 3
  f0:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <I2C_SLAVE_dataReady>
  f4:	08 95       	ret
  f6:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <I2C_SLAVE_dataReady>
  fa:	08 95       	ret

000000fc <setPWMLevel>:
  fc:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <curr_pan>
 100:	22 23       	and	r18, r18
 102:	f1 f0       	breq	.+60     	; 0x140 <setPWMLevel+0x44>
 104:	85 36       	cpi	r24, 0x65	; 101
 106:	91 05       	cpc	r25, r1
 108:	70 f4       	brcc	.+28     	; 0x126 <setPWMLevel+0x2a>
 10a:	dc 01       	movw	r26, r24
 10c:	20 e9       	ldi	r18, 0x90	; 144
 10e:	3d ef       	ldi	r19, 0xFD	; 253
 110:	4f ef       	ldi	r20, 0xFF	; 255
 112:	5f ef       	ldi	r21, 0xFF	; 255
 114:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__muluhisi3>
 118:	6d 5d       	subi	r22, 0xDD	; 221
 11a:	7b 40       	sbci	r23, 0x0B	; 11
 11c:	8f 4f       	sbci	r24, 0xFF	; 255
 11e:	9f 4f       	sbci	r25, 0xFF	; 255
 120:	0e 94 15 05 	call	0xa2a	; 0xa2a <__floatsisf>
 124:	04 c0       	rjmp	.+8      	; 0x12e <setPWMLevel+0x32>
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	86 ec       	ldi	r24, 0xC6	; 198
 12c:	92 e4       	ldi	r25, 0x42	; 66
 12e:	0e 94 cd 04 	call	0x99a	; 0x99a <ceil>
 132:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__fixunssfsi>
 136:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 13a:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 13e:	08 95       	ret
 140:	85 36       	cpi	r24, 0x65	; 101
 142:	91 05       	cpc	r25, r1
 144:	70 f4       	brcc	.+28     	; 0x162 <setPWMLevel+0x66>
 146:	dc 01       	movw	r26, r24
 148:	20 e9       	ldi	r18, 0x90	; 144
 14a:	3d ef       	ldi	r19, 0xFD	; 253
 14c:	4f ef       	ldi	r20, 0xFF	; 255
 14e:	5f ef       	ldi	r21, 0xFF	; 255
 150:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__muluhisi3>
 154:	6d 5d       	subi	r22, 0xDD	; 221
 156:	7b 40       	sbci	r23, 0x0B	; 11
 158:	8f 4f       	sbci	r24, 0xFF	; 255
 15a:	9f 4f       	sbci	r25, 0xFF	; 255
 15c:	0e 94 15 05 	call	0xa2a	; 0xa2a <__floatsisf>
 160:	04 c0       	rjmp	.+8      	; 0x16a <setPWMLevel+0x6e>
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	86 ec       	ldi	r24, 0xC6	; 198
 168:	92 e4       	ldi	r25, 0x42	; 66
 16a:	0e 94 cd 04 	call	0x99a	; 0x99a <ceil>
 16e:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__fixunssfsi>
 172:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 176:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 17a:	08 95       	ret

0000017c <setMotorPWM>:
 17c:	61 11       	cpse	r22, r1
 17e:	1f c0       	rjmp	.+62     	; 0x1be <setMotorPWM+0x42>
 180:	85 36       	cpi	r24, 0x65	; 101
 182:	58 f4       	brcc	.+22     	; 0x19a <setMotorPWM+0x1e>
 184:	68 2f       	mov	r22, r24
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	66 0f       	add	r22, r22
 18a:	77 1f       	adc	r23, r23
 18c:	07 2e       	mov	r0, r23
 18e:	00 0c       	add	r0, r0
 190:	88 0b       	sbc	r24, r24
 192:	99 0b       	sbc	r25, r25
 194:	0e 94 15 05 	call	0xa2a	; 0xa2a <__floatsisf>
 198:	04 c0       	rjmp	.+8      	; 0x1a2 <setMotorPWM+0x26>
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	88 e4       	ldi	r24, 0x48	; 72
 1a0:	93 e4       	ldi	r25, 0x43	; 67
 1a2:	0e 94 cd 04 	call	0x99a	; 0x99a <ceil>
 1a6:	9b 01       	movw	r18, r22
 1a8:	ac 01       	movw	r20, r24
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	8f e7       	ldi	r24, 0x7F	; 127
 1b0:	93 e4       	ldi	r25, 0x43	; 67
 1b2:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__subsf3>
 1b6:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__fixunssfsi>
 1ba:	67 bd       	out	0x27, r22	; 39
 1bc:	08 95       	ret
 1be:	85 36       	cpi	r24, 0x65	; 101
 1c0:	58 f4       	brcc	.+22     	; 0x1d8 <setMotorPWM+0x5c>
 1c2:	68 2f       	mov	r22, r24
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	66 0f       	add	r22, r22
 1c8:	77 1f       	adc	r23, r23
 1ca:	07 2e       	mov	r0, r23
 1cc:	00 0c       	add	r0, r0
 1ce:	88 0b       	sbc	r24, r24
 1d0:	99 0b       	sbc	r25, r25
 1d2:	0e 94 15 05 	call	0xa2a	; 0xa2a <__floatsisf>
 1d6:	04 c0       	rjmp	.+8      	; 0x1e0 <setMotorPWM+0x64>
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	88 e4       	ldi	r24, 0x48	; 72
 1de:	93 e4       	ldi	r25, 0x43	; 67
 1e0:	0e 94 cd 04 	call	0x99a	; 0x99a <ceil>
 1e4:	9b 01       	movw	r18, r22
 1e6:	ac 01       	movw	r20, r24
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	8f e7       	ldi	r24, 0x7F	; 127
 1ee:	93 e4       	ldi	r25, 0x43	; 67
 1f0:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__subsf3>
 1f4:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__fixunssfsi>
 1f8:	68 bd       	out	0x28, r22	; 40
 1fa:	08 95       	ret

000001fc <__vector_3>:
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	8f 93       	push	r24
 208:	9f 93       	push	r25
 20a:	18 9b       	sbis	0x03, 0	; 3
 20c:	06 c0       	rjmp	.+12     	; 0x21a <__vector_3+0x1e>
 20e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <heat_on_ctrl>
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	89 27       	eor	r24, r25
 216:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <heat_on_ctrl>
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <init_regulation>:
 228:	e4 e6       	ldi	r30, 0x64	; 100
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	8e 7f       	andi	r24, 0xFE	; 254
 230:	80 83       	st	Z, r24
 232:	87 b1       	in	r24, 0x07	; 7
 234:	8c 7f       	andi	r24, 0xFC	; 252
 236:	87 b9       	out	0x07, r24	; 7
 238:	80 e4       	ldi	r24, 0x40	; 64
 23a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
 23e:	ea e7       	ldi	r30, 0x7A	; 122
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	8f 68       	ori	r24, 0x8F	; 143
 246:	80 83       	st	Z, r24
 248:	84 b1       	in	r24, 0x04	; 4
 24a:	86 60       	ori	r24, 0x06	; 6
 24c:	84 b9       	out	0x04, r24	; 4
 24e:	83 e2       	ldi	r24, 0x23	; 35
 250:	94 ef       	ldi	r25, 0xF4	; 244
 252:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 256:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 25a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 25e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 262:	a0 e8       	ldi	r26, 0x80	; 128
 264:	b0 e0       	ldi	r27, 0x00	; 0
 266:	8c 91       	ld	r24, X
 268:	80 6f       	ori	r24, 0xF0	; 240
 26a:	8c 93       	st	X, r24
 26c:	80 81       	ld	r24, Z
 26e:	80 64       	ori	r24, 0x40	; 64
 270:	80 83       	st	Z, r24
 272:	08 95       	ret

00000274 <__vector_21>:
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
 27e:	2f 93       	push	r18
 280:	3f 93       	push	r19
 282:	4f 93       	push	r20
 284:	5f 93       	push	r21
 286:	6f 93       	push	r22
 288:	7f 93       	push	r23
 28a:	8f 93       	push	r24
 28c:	9f 93       	push	r25
 28e:	af 93       	push	r26
 290:	bf 93       	push	r27
 292:	ef 93       	push	r30
 294:	ff 93       	push	r31
 296:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 29a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 29e:	83 70       	andi	r24, 0x03	; 3
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	98 2f       	mov	r25, r24
 2a4:	88 27       	eor	r24, r24
 2a6:	82 0f       	add	r24, r18
 2a8:	91 1d       	adc	r25, r1
 2aa:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <curr_pan>
 2ae:	21 11       	cpse	r18, r1
 2b0:	0d c0       	rjmp	.+26     	; 0x2cc <__vector_21+0x58>
 2b2:	9c 01       	movw	r18, r24
 2b4:	2c 52       	subi	r18, 0x2C	; 44
 2b6:	31 40       	sbci	r19, 0x01	; 1
 2b8:	2d 32       	cpi	r18, 0x2D	; 45
 2ba:	31 40       	sbci	r19, 0x01	; 1
 2bc:	20 f4       	brcc	.+8      	; 0x2c6 <__vector_21+0x52>
 2be:	21 e0       	ldi	r18, 0x01	; 1
 2c0:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <heat_ok_pan1>
 2c4:	0f c0       	rjmp	.+30     	; 0x2e4 <__vector_21+0x70>
 2c6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <heat_ok_pan1>
 2ca:	0c c0       	rjmp	.+24     	; 0x2e4 <__vector_21+0x70>
 2cc:	9c 01       	movw	r18, r24
 2ce:	2c 52       	subi	r18, 0x2C	; 44
 2d0:	31 40       	sbci	r19, 0x01	; 1
 2d2:	2d 32       	cpi	r18, 0x2D	; 45
 2d4:	31 40       	sbci	r19, 0x01	; 1
 2d6:	20 f4       	brcc	.+8      	; 0x2e0 <__vector_21+0x6c>
 2d8:	21 e0       	ldi	r18, 0x01	; 1
 2da:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <heat_ok_pan2>
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <__vector_21+0x70>
 2e0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <heat_ok_pan2>
 2e4:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <heat_ok_pan1>
 2e8:	22 23       	and	r18, r18
 2ea:	19 f0       	breq	.+6      	; 0x2f2 <__vector_21+0x7e>
 2ec:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <heat_ok_pan2>
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <__vector_21+0x82>
 2f2:	20 e0       	ldi	r18, 0x00	; 0
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	21 70       	andi	r18, 0x01	; 1
 2f8:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <heat_ok>
 2fc:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <heat_on_ctrl>
 300:	21 11       	cpse	r18, r1
 302:	0d c0       	rjmp	.+26     	; 0x31e <__vector_21+0xaa>
 304:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <integral>
 308:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <integral+0x1>
 30c:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <integral+0x2>
 310:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <integral+0x3>
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 7e 00 	call	0xfc	; 0xfc <setPWMLevel>
 31c:	1b c0       	rjmp	.+54     	; 0x354 <__vector_21+0xe0>
 31e:	9c 01       	movw	r18, r24
 320:	2d 52       	subi	r18, 0x2D	; 45
 322:	31 40       	sbci	r19, 0x01	; 1
 324:	2b 32       	cpi	r18, 0x2B	; 43
 326:	31 40       	sbci	r19, 0x01	; 1
 328:	28 f4       	brcc	.+10     	; 0x334 <__vector_21+0xc0>
 32a:	82 e3       	ldi	r24, 0x32	; 50
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 7e 00 	call	0xfc	; 0xfc <setPWMLevel>
 332:	10 c0       	rjmp	.+32     	; 0x354 <__vector_21+0xe0>
 334:	89 35       	cpi	r24, 0x59	; 89
 336:	22 e0       	ldi	r18, 0x02	; 2
 338:	92 07       	cpc	r25, r18
 33a:	28 f0       	brcs	.+10     	; 0x346 <__vector_21+0xd2>
 33c:	8a e0       	ldi	r24, 0x0A	; 10
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 7e 00 	call	0xfc	; 0xfc <setPWMLevel>
 344:	07 c0       	rjmp	.+14     	; 0x354 <__vector_21+0xe0>
 346:	8c 32       	cpi	r24, 0x2C	; 44
 348:	91 40       	sbci	r25, 0x01	; 1
 34a:	20 f4       	brcc	.+8      	; 0x354 <__vector_21+0xe0>
 34c:	84 e6       	ldi	r24, 0x64	; 100
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 7e 00 	call	0xfc	; 0xfc <setPWMLevel>
 354:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <curr_pan>
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	98 27       	eor	r25, r24
 35c:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <curr_pan>
 360:	ec e7       	ldi	r30, 0x7C	; 124
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	90 81       	ld	r25, Z
 366:	89 27       	eor	r24, r25
 368:	80 83       	st	Z, r24
 36a:	ea e7       	ldi	r30, 0x7A	; 122
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	80 64       	ori	r24, 0x40	; 64
 372:	80 83       	st	Z, r24
 374:	ff 91       	pop	r31
 376:	ef 91       	pop	r30
 378:	bf 91       	pop	r27
 37a:	af 91       	pop	r26
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	7f 91       	pop	r23
 382:	6f 91       	pop	r22
 384:	5f 91       	pop	r21
 386:	4f 91       	pop	r20
 388:	3f 91       	pop	r19
 38a:	2f 91       	pop	r18
 38c:	0f 90       	pop	r0
 38e:	0f be       	out	0x3f, r0	; 63
 390:	0f 90       	pop	r0
 392:	1f 90       	pop	r1
 394:	18 95       	reti

00000396 <__vector_1>:
 396:	1f 92       	push	r1
 398:	0f 92       	push	r0
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	0f 92       	push	r0
 39e:	11 24       	eor	r1, r1
 3a0:	2f 93       	push	r18
 3a2:	3f 93       	push	r19
 3a4:	4f 93       	push	r20
 3a6:	5f 93       	push	r21
 3a8:	6f 93       	push	r22
 3aa:	7f 93       	push	r23
 3ac:	8f 93       	push	r24
 3ae:	9f 93       	push	r25
 3b0:	af 93       	push	r26
 3b2:	bf 93       	push	r27
 3b4:	ef 93       	push	r30
 3b6:	ff 93       	push	r31
 3b8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <I2C_SLAVE_startRecived>
 3bc:	88 23       	and	r24, r24
 3be:	09 f4       	brne	.+2      	; 0x3c2 <__vector_1+0x2c>
 3c0:	55 c1       	rjmp	.+682    	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 3c2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 3c6:	83 70       	andi	r24, 0x03	; 3
 3c8:	83 30       	cpi	r24, 0x03	; 3
 3ca:	09 f0       	breq	.+2      	; 0x3ce <__vector_1+0x38>
 3cc:	af c0       	rjmp	.+350    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 3ce:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <I2C_SLAVE_haveSended>
 3d2:	88 30       	cpi	r24, 0x08	; 8
 3d4:	40 f0       	brcs	.+16     	; 0x3e6 <__vector_1+0x50>
 3d6:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <I2C_SLAVE_haveSended>
 3da:	8a b1       	in	r24, 0x0a	; 10
 3dc:	8b 7e       	andi	r24, 0xEB	; 235
 3de:	8a b9       	out	0x0a, r24	; 10
 3e0:	8b b1       	in	r24, 0x0b	; 11
 3e2:	84 61       	ori	r24, 0x14	; 20
 3e4:	8b b9       	out	0x0b, r24	; 11
 3e6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <I2C_SLAVE_recevedBits>
 3ea:	87 30       	cpi	r24, 0x07	; 7
 3ec:	20 f5       	brcc	.+72     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 3ee:	66 e0       	ldi	r22, 0x06	; 6
 3f0:	70 e0       	ldi	r23, 0x00	; 0
 3f2:	68 1b       	sub	r22, r24
 3f4:	71 09       	sbc	r23, r1
 3f6:	21 e0       	ldi	r18, 0x01	; 1
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	a9 01       	movw	r20, r18
 3fc:	06 2e       	mov	r0, r22
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 400:	44 0f       	add	r20, r20
 402:	55 1f       	adc	r21, r21
 404:	0a 94       	dec	r0
 406:	e2 f7       	brpl	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
 408:	99 b1       	in	r25, 0x09	; 9
 40a:	54 2f       	mov	r21, r20
 40c:	50 95       	com	r21
 40e:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <I2C_SLAVE_recevedAddr>
 412:	52 23       	and	r21, r18
 414:	92 95       	swap	r25
 416:	9f 70       	andi	r25, 0x0F	; 15
 418:	29 2f       	mov	r18, r25
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41e:	22 0f       	add	r18, r18
 420:	33 1f       	adc	r19, r19
 422:	6a 95       	dec	r22
 424:	e2 f7       	brpl	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 426:	24 23       	and	r18, r20
 428:	25 0f       	add	r18, r21
 42a:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <I2C_SLAVE_recevedAddr>
 42e:	8f 5f       	subi	r24, 0xFF	; 255
 430:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <I2C_SLAVE_recevedBits>
 434:	1b c1       	rjmp	.+566    	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 436:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <I2C_SLAVE_recevedAddr>
 43a:	90 37       	cpi	r25, 0x70	; 112
 43c:	09 f0       	breq	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43e:	16 c1       	rjmp	.+556    	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 440:	88 30       	cpi	r24, 0x08	; 8
 442:	b8 f4       	brcc	.+46     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 444:	8f 5f       	subi	r24, 0xFF	; 255
 446:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <I2C_SLAVE_recevedBits>
 44a:	89 b1       	in	r24, 0x09	; 9
 44c:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <I2C_SLAVE_shouldWrite>
 450:	9e 7f       	andi	r25, 0xFE	; 254
 452:	82 95       	swap	r24
 454:	81 70       	andi	r24, 0x01	; 1
 456:	89 0f       	add	r24, r25
 458:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <I2C_SLAVE_shouldWrite>
 45c:	88 23       	and	r24, r24
 45e:	19 f0       	breq	.+6      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <I2C_SLAVE_beginHold>
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_SLAVE_sendBit>
 46c:	0e 94 6b 00 	call	0xd6	; 0xd6 <I2C_SLAVE_beginSend>
 470:	fd c0       	rjmp	.+506    	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 472:	81 31       	cpi	r24, 0x11	; 17
 474:	08 f0       	brcs	.+2      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 476:	fa c0       	rjmp	.+500    	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 478:	6f e0       	ldi	r22, 0x0F	; 15
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	68 1b       	sub	r22, r24
 47e:	71 09       	sbc	r23, r1
 480:	21 e0       	ldi	r18, 0x01	; 1
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	a9 01       	movw	r20, r18
 486:	06 2e       	mov	r0, r22
 488:	02 c0       	rjmp	.+4      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 48a:	44 0f       	add	r20, r20
 48c:	55 1f       	adc	r21, r21
 48e:	0a 94       	dec	r0
 490:	e2 f7       	brpl	.-8      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 492:	99 b1       	in	r25, 0x09	; 9
 494:	54 2f       	mov	r21, r20
 496:	50 95       	com	r21
 498:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <I2C_SLAVE_recevedData>
 49c:	52 23       	and	r21, r18
 49e:	92 95       	swap	r25
 4a0:	9f 70       	andi	r25, 0x0F	; 15
 4a2:	29 2f       	mov	r18, r25
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4a8:	22 0f       	add	r18, r18
 4aa:	33 1f       	adc	r19, r19
 4ac:	6a 95       	dec	r22
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4b0:	24 23       	and	r18, r20
 4b2:	25 0f       	add	r18, r21
 4b4:	20 93 1d 01 	sts	0x011D, r18	; 0x80011d <I2C_SLAVE_recevedData>
 4b8:	8f 5f       	subi	r24, 0xFF	; 255
 4ba:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <I2C_SLAVE_recevedBits>
 4be:	80 31       	cpi	r24, 0x10	; 16
 4c0:	09 f0       	breq	.+2      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4c2:	d4 c0       	rjmp	.+424    	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 4c4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <I2C_SLAVE_full>
 4c8:	88 23       	and	r24, r24
 4ca:	69 f0       	breq	.+26     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4cc:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <I2C_SLAVE_first>
 4d0:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <I2C_SLAVE_first>
 4d4:	8f 5f       	subi	r24, 0xFF	; 255
 4d6:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <I2C_SLAVE_first>
 4da:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <I2C_SLAVE_first>
 4de:	8a 30       	cpi	r24, 0x0A	; 10
 4e0:	10 f0       	brcs	.+4      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4e2:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <I2C_SLAVE_first>
 4e6:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <I2C_SLAVE_last>
 4ea:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <I2C_SLAVE_last>
 4ee:	8f 5f       	subi	r24, 0xFF	; 255
 4f0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <I2C_SLAVE_last>
 4f4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <I2C_SLAVE_last>
 4f8:	8a 30       	cpi	r24, 0x0A	; 10
 4fa:	10 f0       	brcs	.+4      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 4fc:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <I2C_SLAVE_last>
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	e3 5f       	subi	r30, 0xF3	; 243
 504:	fe 4f       	sbci	r31, 0xFE	; 254
 506:	20 83       	st	Z, r18
 508:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <I2C_SLAVE_last>
 50c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <I2C_SLAVE_first>
 510:	98 13       	cpse	r25, r24
 512:	03 c0       	rjmp	.+6      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <I2C_SLAVE_full>
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_SLAVE_sendBit>
 520:	0e 94 6b 00 	call	0xd6	; 0xd6 <I2C_SLAVE_beginSend>
 524:	88 e0       	ldi	r24, 0x08	; 8
 526:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <I2C_SLAVE_recevedBits>
 52a:	a0 c0       	rjmp	.+320    	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 52c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 530:	83 70       	andi	r24, 0x03	; 3
 532:	82 30       	cpi	r24, 0x02	; 2
 534:	09 f0       	breq	.+2      	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
 536:	9a c0       	rjmp	.+308    	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 538:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <I2C_SLAVE_haveSended>
 53c:	38 30       	cpi	r19, 0x08	; 8
 53e:	08 f4       	brcc	.+2      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 540:	5d c0       	rjmp	.+186    	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 542:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <I2C_SLAVE_dataReady>
 546:	82 50       	subi	r24, 0x02	; 2
 548:	82 30       	cpi	r24, 0x02	; 2
 54a:	c8 f5       	brcc	.+114    	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <I2C_SLAVE_dataReady>
 552:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <I2C_SLAVE_tempSave>
 556:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <I2C_SLAVE_toSend>
 55a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <I2C_SLAVE_shouldWrite>
 55e:	88 23       	and	r24, r24
 560:	59 f1       	breq	.+86     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <I2C_SLAVE_haveSended>
 568:	2a b1       	in	r18, 0x0a	; 10
 56a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <I2C_SLAVE_toSend>
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	80 95       	com	r24
 572:	90 95       	com	r25
 574:	88 0f       	add	r24, r24
 576:	89 2f       	mov	r24, r25
 578:	88 1f       	adc	r24, r24
 57a:	99 0b       	sbc	r25, r25
 57c:	82 95       	swap	r24
 57e:	92 95       	swap	r25
 580:	90 7f       	andi	r25, 0xF0	; 240
 582:	98 27       	eor	r25, r24
 584:	80 7f       	andi	r24, 0xF0	; 240
 586:	98 27       	eor	r25, r24
 588:	80 71       	andi	r24, 0x10	; 16
 58a:	92 2f       	mov	r25, r18
 58c:	9f 7e       	andi	r25, 0xEF	; 239
 58e:	89 0f       	add	r24, r25
 590:	8a b9       	out	0x0a, r24	; 10
 592:	2b b1       	in	r18, 0x0b	; 11
 594:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <I2C_SLAVE_toSend>
 598:	88 1f       	adc	r24, r24
 59a:	88 27       	eor	r24, r24
 59c:	88 1f       	adc	r24, r24
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	82 95       	swap	r24
 5a2:	92 95       	swap	r25
 5a4:	90 7f       	andi	r25, 0xF0	; 240
 5a6:	98 27       	eor	r25, r24
 5a8:	80 7f       	andi	r24, 0xF0	; 240
 5aa:	98 27       	eor	r25, r24
 5ac:	80 71       	andi	r24, 0x10	; 16
 5ae:	92 2f       	mov	r25, r18
 5b0:	9f 7e       	andi	r25, 0xEF	; 239
 5b2:	89 0f       	add	r24, r25
 5b4:	8b b9       	out	0x0b, r24	; 11
 5b6:	07 c0       	rjmp	.+14     	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
 5b8:	54 98       	cbi	0x0a, 4	; 10
 5ba:	5c 9a       	sbi	0x0b, 4	; 11
 5bc:	04 c0       	rjmp	.+8      	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
 5be:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <I2C_SLAVE_dataReady>
 5c2:	54 98       	cbi	0x0a, 4	; 10
 5c4:	5c 9a       	sbi	0x0b, 4	; 11
 5c6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <I2C_SLAVE_beginHold>
 5ca:	88 23       	and	r24, r24
 5cc:	71 f0       	breq	.+28     	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
 5ce:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <I2C_SLAVE_dataReady>
 5d2:	81 50       	subi	r24, 0x01	; 1
 5d4:	82 30       	cpi	r24, 0x02	; 2
 5d6:	18 f4       	brcc	.+6      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
 5d8:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <I2C_SLAVE_beginHold>
 5dc:	47 c0       	rjmp	.+142    	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <I2C_SLAVE_canSend>
 5e4:	52 9a       	sbi	0x0a, 2	; 10
 5e6:	5a 98       	cbi	0x0b, 2	; 11
 5e8:	41 c0       	rjmp	.+130    	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 5ea:	e9 e6       	ldi	r30, 0x69	; 105
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	80 81       	ld	r24, Z
 5f0:	82 60       	ori	r24, 0x02	; 2
 5f2:	80 83       	st	Z, r24
 5f4:	80 81       	ld	r24, Z
 5f6:	81 60       	ori	r24, 0x01	; 1
 5f8:	80 83       	st	Z, r24
 5fa:	38 c0       	rjmp	.+112    	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 5fc:	2a b1       	in	r18, 0x0a	; 10
 5fe:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <I2C_SLAVE_toSend>
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	80 95       	com	r24
 606:	90 95       	com	r25
 608:	47 e0       	ldi	r20, 0x07	; 7
 60a:	50 e0       	ldi	r21, 0x00	; 0
 60c:	ba 01       	movw	r22, r20
 60e:	63 1b       	sub	r22, r19
 610:	71 09       	sbc	r23, r1
 612:	02 c0       	rjmp	.+4      	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
 614:	95 95       	asr	r25
 616:	87 95       	ror	r24
 618:	6a 95       	dec	r22
 61a:	e2 f7       	brpl	.-8      	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
 61c:	82 95       	swap	r24
 61e:	92 95       	swap	r25
 620:	90 7f       	andi	r25, 0xF0	; 240
 622:	98 27       	eor	r25, r24
 624:	80 7f       	andi	r24, 0xF0	; 240
 626:	98 27       	eor	r25, r24
 628:	80 71       	andi	r24, 0x10	; 16
 62a:	92 2f       	mov	r25, r18
 62c:	9f 7e       	andi	r25, 0xEF	; 239
 62e:	89 0f       	add	r24, r25
 630:	8a b9       	out	0x0a, r24	; 10
 632:	2b b1       	in	r18, 0x0b	; 11
 634:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <I2C_SLAVE_toSend>
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <I2C_SLAVE_haveSended>
 63e:	43 1b       	sub	r20, r19
 640:	51 09       	sbc	r21, r1
 642:	02 c0       	rjmp	.+4      	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
 644:	95 95       	asr	r25
 646:	87 95       	ror	r24
 648:	4a 95       	dec	r20
 64a:	e2 f7       	brpl	.-8      	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 64c:	82 95       	swap	r24
 64e:	92 95       	swap	r25
 650:	90 7f       	andi	r25, 0xF0	; 240
 652:	98 27       	eor	r25, r24
 654:	80 7f       	andi	r24, 0xF0	; 240
 656:	98 27       	eor	r25, r24
 658:	80 71       	andi	r24, 0x10	; 16
 65a:	92 2f       	mov	r25, r18
 65c:	9f 7e       	andi	r25, 0xEF	; 239
 65e:	89 0f       	add	r24, r25
 660:	8b b9       	out	0x0b, r24	; 11
 662:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <I2C_SLAVE_haveSended>
 666:	8f 5f       	subi	r24, 0xFF	; 255
 668:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <I2C_SLAVE_haveSended>
 66c:	ff 91       	pop	r31
 66e:	ef 91       	pop	r30
 670:	bf 91       	pop	r27
 672:	af 91       	pop	r26
 674:	9f 91       	pop	r25
 676:	8f 91       	pop	r24
 678:	7f 91       	pop	r23
 67a:	6f 91       	pop	r22
 67c:	5f 91       	pop	r21
 67e:	4f 91       	pop	r20
 680:	3f 91       	pop	r19
 682:	2f 91       	pop	r18
 684:	0f 90       	pop	r0
 686:	0f be       	out	0x3f, r0	; 63
 688:	0f 90       	pop	r0
 68a:	1f 90       	pop	r1
 68c:	18 95       	reti

0000068e <__vector_5>:
 68e:	1f 92       	push	r1
 690:	0f 92       	push	r0
 692:	0f b6       	in	r0, 0x3f	; 63
 694:	0f 92       	push	r0
 696:	11 24       	eor	r1, r1
 698:	8f 93       	push	r24
 69a:	ef 93       	push	r30
 69c:	ff 93       	push	r31
 69e:	4a 9b       	sbis	0x09, 2	; 9
 6a0:	1e c0       	rjmp	.+60     	; 0x6de <__vector_5+0x50>
 6a2:	4c 9b       	sbis	0x09, 4	; 9
 6a4:	03 c0       	rjmp	.+6      	; 0x6ac <__vector_5+0x1e>
 6a6:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <I2C_SLAVE_startRecived>
 6aa:	03 c0       	rjmp	.+6      	; 0x6b2 <__vector_5+0x24>
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <I2C_SLAVE_startRecived>
 6b2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <I2C_SLAVE_startRecived>
 6b6:	81 11       	cpse	r24, r1
 6b8:	12 c0       	rjmp	.+36     	; 0x6de <__vector_5+0x50>
 6ba:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <I2C_SLAVE_beginHold>
 6be:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <I2C_SLAVE_canSend>
 6c2:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <I2C_SLAVE_recevedAddr>
 6c6:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <I2C_SLAVE_shouldWrite>
 6ca:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <I2C_SLAVE_recevedBits>
 6ce:	e9 e6       	ldi	r30, 0x69	; 105
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	80 81       	ld	r24, Z
 6d4:	82 60       	ori	r24, 0x02	; 2
 6d6:	80 83       	st	Z, r24
 6d8:	80 81       	ld	r24, Z
 6da:	81 60       	ori	r24, 0x01	; 1
 6dc:	80 83       	st	Z, r24
 6de:	ff 91       	pop	r31
 6e0:	ef 91       	pop	r30
 6e2:	8f 91       	pop	r24
 6e4:	0f 90       	pop	r0
 6e6:	0f be       	out	0x3f, r0	; 63
 6e8:	0f 90       	pop	r0
 6ea:	1f 90       	pop	r1
 6ec:	18 95       	reti

000006ee <__vector_9>:
	
	//Reset count
	TCNT2 = 0x00;
}

ISR(TIMER2_OVF_vect) {
 6ee:	1f 92       	push	r1
 6f0:	0f 92       	push	r0
 6f2:	0f b6       	in	r0, 0x3f	; 63
 6f4:	0f 92       	push	r0
 6f6:	11 24       	eor	r1, r1
 6f8:	2f 93       	push	r18
 6fa:	3f 93       	push	r19
 6fc:	4f 93       	push	r20
 6fe:	5f 93       	push	r21
 700:	6f 93       	push	r22
 702:	7f 93       	push	r23
 704:	8f 93       	push	r24
 706:	9f 93       	push	r25
 708:	af 93       	push	r26
 70a:	bf 93       	push	r27
 70c:	ef 93       	push	r30
 70e:	ff 93       	push	r31
	
	switch (curr_time++) {
 710:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <curr_time>
 714:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <curr_time+0x1>
 718:	9c 01       	movw	r18, r24
 71a:	2f 5f       	subi	r18, 0xFF	; 255
 71c:	3f 4f       	sbci	r19, 0xFF	; 255
 71e:	30 93 0c 01 	sts	0x010C, r19	; 0x80010c <curr_time+0x1>
 722:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <curr_time>
 726:	86 3d       	cpi	r24, 0xD6	; 214
 728:	26 e0       	ldi	r18, 0x06	; 6
 72a:	92 07       	cpc	r25, r18
 72c:	71 f1       	breq	.+92     	; 0x78a <__vector_9+0x9c>
 72e:	20 f4       	brcc	.+8      	; 0x738 <__vector_9+0x4a>
 730:	88 3e       	cpi	r24, 0xE8	; 232
 732:	93 40       	sbci	r25, 0x03	; 3
 734:	51 f0       	breq	.+20     	; 0x74a <__vector_9+0x5c>
 736:	6d c0       	rjmp	.+218    	; 0x812 <__vector_9+0x124>
 738:	8e 3b       	cpi	r24, 0xBE	; 190
 73a:	2a e0       	ldi	r18, 0x0A	; 10
 73c:	92 07       	cpc	r25, r18
 73e:	29 f0       	breq	.+10     	; 0x74a <__vector_9+0x5c>
 740:	8c 3a       	cpi	r24, 0xAC	; 172
 742:	9d 40       	sbci	r25, 0x0D	; 13
 744:	09 f4       	brne	.+2      	; 0x748 <__vector_9+0x5a>
 746:	47 c0       	rjmp	.+142    	; 0x7d6 <__vector_9+0xe8>
 748:	64 c0       	rjmp	.+200    	; 0x812 <__vector_9+0x124>
		
		//Mid way time to break
		case MOTOR_FORWARD_TIME_S:
		case MOTOR_BACKWARD_TIME_S:
			if (motor_flipping == MOTOR1) {
 74a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <motor_flipping>
 74e:	81 11       	cpse	r24, r1
 750:	0e c0       	rjmp	.+28     	; 0x76e <__vector_9+0x80>
				MOTOR1_DISABLE();
 752:	84 b5       	in	r24, 0x24	; 36
 754:	8f 7c       	andi	r24, 0xCF	; 207
 756:	84 bd       	out	0x24, r24	; 36
				setMotorPWM(MOTOR_OPTIMUM_PWM_BREAK, motor_flipping);
 758:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <motor_flipping>
 75c:	84 e6       	ldi	r24, 0x64	; 100
 75e:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorPWM>
				MOTOR1_SETING(MOTOR_BREAK);
 762:	5b 98       	cbi	0x0b, 3	; 11
 764:	5f 98       	cbi	0x0b, 7	; 11
				MOTOR1_ENABLE();
 766:	84 b5       	in	r24, 0x24	; 36
 768:	80 63       	ori	r24, 0x30	; 48
 76a:	84 bd       	out	0x24, r24	; 36
 76c:	52 c0       	rjmp	.+164    	; 0x812 <__vector_9+0x124>
			}
			else {
				MOTOR2_DISABLE();
 76e:	84 b5       	in	r24, 0x24	; 36
 770:	8f 73       	andi	r24, 0x3F	; 63
 772:	84 bd       	out	0x24, r24	; 36
				setMotorPWM(MOTOR_OPTIMUM_PWM_BREAK, motor_flipping);
 774:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <motor_flipping>
 778:	84 e6       	ldi	r24, 0x64	; 100
 77a:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorPWM>
				MOTOR2_SETING(MOTOR_BREAK);
 77e:	44 98       	cbi	0x08, 4	; 8
 780:	45 98       	cbi	0x08, 5	; 8
				MOTOR2_ENABLE();
 782:	84 b5       	in	r24, 0x24	; 36
 784:	80 6c       	ori	r24, 0xC0	; 192
 786:	84 bd       	out	0x24, r24	; 36
 788:	44 c0       	rjmp	.+136    	; 0x812 <__vector_9+0x124>
			}
			break;
		
		//We have stopped the pan at pancake destination time to go back
		case MOTOR_BREAK_FORWARD_TIME_S:
			if (motor_flipping == MOTOR1) {
 78a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <motor_flipping>
 78e:	81 11       	cpse	r24, r1
 790:	14 c0       	rjmp	.+40     	; 0x7ba <__vector_9+0xcc>
				MOTOR1_DISABLE();
 792:	84 b5       	in	r24, 0x24	; 36
 794:	8f 7c       	andi	r24, 0xCF	; 207
 796:	84 bd       	out	0x24, r24	; 36
				setMotorPWM(MOTOR_OPTIMUM_PWM_BACKWARD, motor_flipping);
 798:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <motor_flipping>
 79c:	82 e4       	ldi	r24, 0x42	; 66
 79e:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorPWM>
				MOTOR1_SETING(MOTOR_BACKWARD);
 7a2:	5b 98       	cbi	0x0b, 3	; 11
 7a4:	5f 9a       	sbi	0x0b, 7	; 11
				MOTOR1_ENABLE();
 7a6:	84 b5       	in	r24, 0x24	; 36
 7a8:	80 63       	ori	r24, 0x30	; 48
 7aa:	84 bd       	out	0x24, r24	; 36
}

static void startTimePan2(){
	
	//Set internal flag
	pan2_cooking_time = 0;
 7ac:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 7b0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	pan2Free = false;
 7b4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 7b8:	2c c0       	rjmp	.+88     	; 0x812 <__vector_9+0x124>
				MOTOR1_SETING(MOTOR_BACKWARD);
				MOTOR1_ENABLE();
				startTimePan2();
			}
			else {
				MOTOR2_DISABLE();
 7ba:	84 b5       	in	r24, 0x24	; 36
 7bc:	8f 73       	andi	r24, 0x3F	; 63
 7be:	84 bd       	out	0x24, r24	; 36
				setMotorPWM(MOTOR_OPTIMUM_PWM_BACKWARD, motor_flipping);
 7c0:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <motor_flipping>
 7c4:	82 e4       	ldi	r24, 0x42	; 66
 7c6:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorPWM>
				MOTOR2_SETING(MOTOR_BACKWARD);
 7ca:	44 98       	cbi	0x08, 4	; 8
 7cc:	45 9a       	sbi	0x08, 5	; 8
				MOTOR2_ENABLE();
 7ce:	84 b5       	in	r24, 0x24	; 36
 7d0:	80 6c       	ori	r24, 0xC0	; 192
 7d2:	84 bd       	out	0x24, r24	; 36
 7d4:	1e c0       	rjmp	.+60     	; 0x812 <__vector_9+0x124>
			}
			break;
		
		//We have reached the starting position set flags
		case MOTOR_BREAK_BACKWARD_TIME_S:
			if (motor_flipping == MOTOR1) {
 7d6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <motor_flipping>
 7da:	81 11       	cpse	r24, r1
 7dc:	09 c0       	rjmp	.+18     	; 0x7f0 <__vector_9+0x102>
				MOTOR1_DISABLE();
 7de:	84 b5       	in	r24, 0x24	; 36
 7e0:	8f 7c       	andi	r24, 0xCF	; 207
 7e2:	84 bd       	out	0x24, r24	; 36
				MOTOR1_SETING(MOTOR_OFF);
 7e4:	5b 9a       	sbi	0x0b, 3	; 11
 7e6:	5f 9a       	sbi	0x0b, 7	; 11
				pan1Free = true;
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pan1Free>
 7ee:	0a c0       	rjmp	.+20     	; 0x804 <__vector_9+0x116>
			}
			else {
				MOTOR2_DISABLE();
 7f0:	84 b5       	in	r24, 0x24	; 36
 7f2:	8f 73       	andi	r24, 0x3F	; 63
 7f4:	84 bd       	out	0x24, r24	; 36
				MOTOR2_SETING(MOTOR_OFF);
 7f6:	44 9a       	sbi	0x08, 4	; 8
 7f8:	45 9a       	sbi	0x08, 5	; 8
				pancake_done = true;
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pancake_done>
				pan2Free = true;
 800:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	TCCR2B |= (1 << CS22) | (1 << CS20);
}

static void stopTimer2(){
	//Stop clock
	TCCR2B &= ~((1 << CS22) | (1 << CS20));
 804:	e1 eb       	ldi	r30, 0xB1	; 177
 806:	f0 e0       	ldi	r31, 0x00	; 0
 808:	80 81       	ld	r24, Z
 80a:	8a 7f       	andi	r24, 0xFA	; 250
 80c:	80 83       	st	Z, r24
	
	//Reset count
	TCNT2 = 0x00;
 80e:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
			}
			//Stop the timer
			stopTimer2();
			break;
	}
}
 812:	ff 91       	pop	r31
 814:	ef 91       	pop	r30
 816:	bf 91       	pop	r27
 818:	af 91       	pop	r26
 81a:	9f 91       	pop	r25
 81c:	8f 91       	pop	r24
 81e:	7f 91       	pop	r23
 820:	6f 91       	pop	r22
 822:	5f 91       	pop	r21
 824:	4f 91       	pop	r20
 826:	3f 91       	pop	r19
 828:	2f 91       	pop	r18
 82a:	0f 90       	pop	r0
 82c:	0f be       	out	0x3f, r0	; 63
 82e:	0f 90       	pop	r0
 830:	1f 90       	pop	r1
 832:	18 95       	reti

00000834 <init_1Hz_timer>:
	
}

void init_1Hz_timer(){
	//Setup timer
	PRR &= ~(1 << PRTIM1);	//Enable timer 1
 834:	e4 e6       	ldi	r30, 0x64	; 100
 836:	f0 e0       	ldi	r31, 0x00	; 0
 838:	80 81       	ld	r24, Z
 83a:	87 7f       	andi	r24, 0xF7	; 247
 83c:	80 83       	st	Z, r24
	
	 
	//Timer is in fast PWM mode, TOP is ICR1 and prescaler is 256
	TCCR1A = (1 << WGM11);
 83e:	82 e0       	ldi	r24, 0x02	; 2
 840:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS12);
 844:	8c e1       	ldi	r24, 0x1C	; 28
 846:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	
	//Set TOP value
	ICR1 = TIMER_1HZ_TOP;
 84a:	83 e2       	ldi	r24, 0x23	; 35
 84c:	94 ef       	ldi	r25, 0xF4	; 244
 84e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 852:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	
	//Overflow interrupt enabled
	TIMSK1 = (1 << TOIE1);
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 85c:	08 95       	ret

0000085e <main>:
uint8_t sekunder = 0;

int main(void)
{
	//Enable interrupts
	sei();
 85e:	78 94       	sei
	
	init_1Hz_timer();	
 860:	0e 94 1a 04 	call	0x834	; 0x834 <init_1Hz_timer>

	init_regulation();			//Initialize the regulation
 864:	0e 94 14 01 	call	0x228	; 0x228 <init_regulation>
	
	DDRB |= (1 << 5) | (1 << 0);
 868:	84 b1       	in	r24, 0x04	; 4
 86a:	81 62       	ori	r24, 0x21	; 33
 86c:	84 b9       	out	0x04, r24	; 4
	heat_ok = true;
 86e:	81 e0       	ldi	r24, 0x01	; 1
 870:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <heat_ok>
    while (1) 
    {
		if (heat_ok) {
 874:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <heat_ok>
 878:	88 23       	and	r24, r24
 87a:	11 f0       	breq	.+4      	; 0x880 <main+0x22>
			PORTB |= (1<<PORTB5);
 87c:	2d 9a       	sbi	0x05, 5	; 5
 87e:	fa cf       	rjmp	.-12     	; 0x874 <main+0x16>
		} else {
			PORTB &= ~(1<<PORTB5);
 880:	2d 98       	cbi	0x05, 5	; 5
 882:	f8 cf       	rjmp	.-16     	; 0x874 <main+0x16>

00000884 <__vector_13>:
	
	//Overflow interrupt enabled
	TIMSK1 = (1 << TOIE1);
}

ISR(TIMER1_OVF_vect){
 884:	1f 92       	push	r1
 886:	0f 92       	push	r0
 888:	0f b6       	in	r0, 0x3f	; 63
 88a:	0f 92       	push	r0
 88c:	11 24       	eor	r1, r1
 88e:	8f 93       	push	r24
 890:	9f 93       	push	r25
	sekunder++;
 892:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sekunder>
 896:	8f 5f       	subi	r24, 0xFF	; 255
 898:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <sekunder>
	if ((sekunder % 4) == 0){
 89c:	83 70       	andi	r24, 0x03	; 3
 89e:	49 f4       	brne	.+18     	; 0x8b2 <__vector_13+0x2e>
		heat_on_ctrl = !heat_on_ctrl;
 8a0:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <heat_on_ctrl>
 8a4:	81 e0       	ldi	r24, 0x01	; 1
 8a6:	98 27       	eor	r25, r24
 8a8:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <heat_on_ctrl>
		PORTB ^= (1<<0);
 8ac:	95 b1       	in	r25, 0x05	; 5
 8ae:	89 27       	eor	r24, r25
 8b0:	85 b9       	out	0x05, r24	; 5
	}
}
 8b2:	9f 91       	pop	r25
 8b4:	8f 91       	pop	r24
 8b6:	0f 90       	pop	r0
 8b8:	0f be       	out	0x3f, r0	; 63
 8ba:	0f 90       	pop	r0
 8bc:	1f 90       	pop	r1
 8be:	18 95       	reti

000008c0 <__subsf3>:
 8c0:	50 58       	subi	r21, 0x80	; 128

000008c2 <__addsf3>:
 8c2:	bb 27       	eor	r27, r27
 8c4:	aa 27       	eor	r26, r26
 8c6:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__addsf3x>
 8ca:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_round>
 8ce:	0e 94 82 05 	call	0xb04	; 0xb04 <__fp_pscA>
 8d2:	38 f0       	brcs	.+14     	; 0x8e2 <__addsf3+0x20>
 8d4:	0e 94 89 05 	call	0xb12	; 0xb12 <__fp_pscB>
 8d8:	20 f0       	brcs	.+8      	; 0x8e2 <__addsf3+0x20>
 8da:	39 f4       	brne	.+14     	; 0x8ea <__addsf3+0x28>
 8dc:	9f 3f       	cpi	r25, 0xFF	; 255
 8de:	19 f4       	brne	.+6      	; 0x8e6 <__addsf3+0x24>
 8e0:	26 f4       	brtc	.+8      	; 0x8ea <__addsf3+0x28>
 8e2:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__fp_nan>
 8e6:	0e f4       	brtc	.+2      	; 0x8ea <__addsf3+0x28>
 8e8:	e0 95       	com	r30
 8ea:	e7 fb       	bst	r30, 7
 8ec:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__fp_inf>

000008f0 <__addsf3x>:
 8f0:	e9 2f       	mov	r30, r25
 8f2:	0e 94 a1 05 	call	0xb42	; 0xb42 <__fp_split3>
 8f6:	58 f3       	brcs	.-42     	; 0x8ce <__addsf3+0xc>
 8f8:	ba 17       	cp	r27, r26
 8fa:	62 07       	cpc	r22, r18
 8fc:	73 07       	cpc	r23, r19
 8fe:	84 07       	cpc	r24, r20
 900:	95 07       	cpc	r25, r21
 902:	20 f0       	brcs	.+8      	; 0x90c <__stack+0xd>
 904:	79 f4       	brne	.+30     	; 0x924 <__stack+0x25>
 906:	a6 f5       	brtc	.+104    	; 0x970 <__stack+0x71>
 908:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__fp_zero>
 90c:	0e f4       	brtc	.+2      	; 0x910 <__stack+0x11>
 90e:	e0 95       	com	r30
 910:	0b 2e       	mov	r0, r27
 912:	ba 2f       	mov	r27, r26
 914:	a0 2d       	mov	r26, r0
 916:	0b 01       	movw	r0, r22
 918:	b9 01       	movw	r22, r18
 91a:	90 01       	movw	r18, r0
 91c:	0c 01       	movw	r0, r24
 91e:	ca 01       	movw	r24, r20
 920:	a0 01       	movw	r20, r0
 922:	11 24       	eor	r1, r1
 924:	ff 27       	eor	r31, r31
 926:	59 1b       	sub	r21, r25
 928:	99 f0       	breq	.+38     	; 0x950 <__stack+0x51>
 92a:	59 3f       	cpi	r21, 0xF9	; 249
 92c:	50 f4       	brcc	.+20     	; 0x942 <__stack+0x43>
 92e:	50 3e       	cpi	r21, 0xE0	; 224
 930:	68 f1       	brcs	.+90     	; 0x98c <__stack+0x8d>
 932:	1a 16       	cp	r1, r26
 934:	f0 40       	sbci	r31, 0x00	; 0
 936:	a2 2f       	mov	r26, r18
 938:	23 2f       	mov	r18, r19
 93a:	34 2f       	mov	r19, r20
 93c:	44 27       	eor	r20, r20
 93e:	58 5f       	subi	r21, 0xF8	; 248
 940:	f3 cf       	rjmp	.-26     	; 0x928 <__stack+0x29>
 942:	46 95       	lsr	r20
 944:	37 95       	ror	r19
 946:	27 95       	ror	r18
 948:	a7 95       	ror	r26
 94a:	f0 40       	sbci	r31, 0x00	; 0
 94c:	53 95       	inc	r21
 94e:	c9 f7       	brne	.-14     	; 0x942 <__stack+0x43>
 950:	7e f4       	brtc	.+30     	; 0x970 <__stack+0x71>
 952:	1f 16       	cp	r1, r31
 954:	ba 0b       	sbc	r27, r26
 956:	62 0b       	sbc	r22, r18
 958:	73 0b       	sbc	r23, r19
 95a:	84 0b       	sbc	r24, r20
 95c:	ba f0       	brmi	.+46     	; 0x98c <__stack+0x8d>
 95e:	91 50       	subi	r25, 0x01	; 1
 960:	a1 f0       	breq	.+40     	; 0x98a <__stack+0x8b>
 962:	ff 0f       	add	r31, r31
 964:	bb 1f       	adc	r27, r27
 966:	66 1f       	adc	r22, r22
 968:	77 1f       	adc	r23, r23
 96a:	88 1f       	adc	r24, r24
 96c:	c2 f7       	brpl	.-16     	; 0x95e <__stack+0x5f>
 96e:	0e c0       	rjmp	.+28     	; 0x98c <__stack+0x8d>
 970:	ba 0f       	add	r27, r26
 972:	62 1f       	adc	r22, r18
 974:	73 1f       	adc	r23, r19
 976:	84 1f       	adc	r24, r20
 978:	48 f4       	brcc	.+18     	; 0x98c <__stack+0x8d>
 97a:	87 95       	ror	r24
 97c:	77 95       	ror	r23
 97e:	67 95       	ror	r22
 980:	b7 95       	ror	r27
 982:	f7 95       	ror	r31
 984:	9e 3f       	cpi	r25, 0xFE	; 254
 986:	08 f0       	brcs	.+2      	; 0x98a <__stack+0x8b>
 988:	b0 cf       	rjmp	.-160    	; 0x8ea <__addsf3+0x28>
 98a:	93 95       	inc	r25
 98c:	88 0f       	add	r24, r24
 98e:	08 f0       	brcs	.+2      	; 0x992 <__stack+0x93>
 990:	99 27       	eor	r25, r25
 992:	ee 0f       	add	r30, r30
 994:	97 95       	ror	r25
 996:	87 95       	ror	r24
 998:	08 95       	ret

0000099a <ceil>:
 99a:	0e 94 c3 05 	call	0xb86	; 0xb86 <__fp_trunc>
 99e:	90 f0       	brcs	.+36     	; 0x9c4 <ceil+0x2a>
 9a0:	9f 37       	cpi	r25, 0x7F	; 127
 9a2:	48 f4       	brcc	.+18     	; 0x9b6 <ceil+0x1c>
 9a4:	91 11       	cpse	r25, r1
 9a6:	16 f4       	brtc	.+4      	; 0x9ac <ceil+0x12>
 9a8:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__fp_szero>
 9ac:	60 e0       	ldi	r22, 0x00	; 0
 9ae:	70 e0       	ldi	r23, 0x00	; 0
 9b0:	80 e8       	ldi	r24, 0x80	; 128
 9b2:	9f e3       	ldi	r25, 0x3F	; 63
 9b4:	08 95       	ret
 9b6:	26 f0       	brts	.+8      	; 0x9c0 <ceil+0x26>
 9b8:	1b 16       	cp	r1, r27
 9ba:	61 1d       	adc	r22, r1
 9bc:	71 1d       	adc	r23, r1
 9be:	81 1d       	adc	r24, r1
 9c0:	0c 94 56 05 	jmp	0xaac	; 0xaac <__fp_mintl>
 9c4:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_mpack>

000009c8 <__fixunssfsi>:
 9c8:	0e 94 a9 05 	call	0xb52	; 0xb52 <__fp_splitA>
 9cc:	88 f0       	brcs	.+34     	; 0x9f0 <__fixunssfsi+0x28>
 9ce:	9f 57       	subi	r25, 0x7F	; 127
 9d0:	98 f0       	brcs	.+38     	; 0x9f8 <__fixunssfsi+0x30>
 9d2:	b9 2f       	mov	r27, r25
 9d4:	99 27       	eor	r25, r25
 9d6:	b7 51       	subi	r27, 0x17	; 23
 9d8:	b0 f0       	brcs	.+44     	; 0xa06 <__fixunssfsi+0x3e>
 9da:	e1 f0       	breq	.+56     	; 0xa14 <__fixunssfsi+0x4c>
 9dc:	66 0f       	add	r22, r22
 9de:	77 1f       	adc	r23, r23
 9e0:	88 1f       	adc	r24, r24
 9e2:	99 1f       	adc	r25, r25
 9e4:	1a f0       	brmi	.+6      	; 0x9ec <__fixunssfsi+0x24>
 9e6:	ba 95       	dec	r27
 9e8:	c9 f7       	brne	.-14     	; 0x9dc <__fixunssfsi+0x14>
 9ea:	14 c0       	rjmp	.+40     	; 0xa14 <__fixunssfsi+0x4c>
 9ec:	b1 30       	cpi	r27, 0x01	; 1
 9ee:	91 f0       	breq	.+36     	; 0xa14 <__fixunssfsi+0x4c>
 9f0:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__fp_zero>
 9f4:	b1 e0       	ldi	r27, 0x01	; 1
 9f6:	08 95       	ret
 9f8:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__fp_zero>
 9fc:	67 2f       	mov	r22, r23
 9fe:	78 2f       	mov	r23, r24
 a00:	88 27       	eor	r24, r24
 a02:	b8 5f       	subi	r27, 0xF8	; 248
 a04:	39 f0       	breq	.+14     	; 0xa14 <__fixunssfsi+0x4c>
 a06:	b9 3f       	cpi	r27, 0xF9	; 249
 a08:	cc f3       	brlt	.-14     	; 0x9fc <__fixunssfsi+0x34>
 a0a:	86 95       	lsr	r24
 a0c:	77 95       	ror	r23
 a0e:	67 95       	ror	r22
 a10:	b3 95       	inc	r27
 a12:	d9 f7       	brne	.-10     	; 0xa0a <__fixunssfsi+0x42>
 a14:	3e f4       	brtc	.+14     	; 0xa24 <__fixunssfsi+0x5c>
 a16:	90 95       	com	r25
 a18:	80 95       	com	r24
 a1a:	70 95       	com	r23
 a1c:	61 95       	neg	r22
 a1e:	7f 4f       	sbci	r23, 0xFF	; 255
 a20:	8f 4f       	sbci	r24, 0xFF	; 255
 a22:	9f 4f       	sbci	r25, 0xFF	; 255
 a24:	08 95       	ret

00000a26 <__floatunsisf>:
 a26:	e8 94       	clt
 a28:	09 c0       	rjmp	.+18     	; 0xa3c <__floatsisf+0x12>

00000a2a <__floatsisf>:
 a2a:	97 fb       	bst	r25, 7
 a2c:	3e f4       	brtc	.+14     	; 0xa3c <__floatsisf+0x12>
 a2e:	90 95       	com	r25
 a30:	80 95       	com	r24
 a32:	70 95       	com	r23
 a34:	61 95       	neg	r22
 a36:	7f 4f       	sbci	r23, 0xFF	; 255
 a38:	8f 4f       	sbci	r24, 0xFF	; 255
 a3a:	9f 4f       	sbci	r25, 0xFF	; 255
 a3c:	99 23       	and	r25, r25
 a3e:	a9 f0       	breq	.+42     	; 0xa6a <__floatsisf+0x40>
 a40:	f9 2f       	mov	r31, r25
 a42:	96 e9       	ldi	r25, 0x96	; 150
 a44:	bb 27       	eor	r27, r27
 a46:	93 95       	inc	r25
 a48:	f6 95       	lsr	r31
 a4a:	87 95       	ror	r24
 a4c:	77 95       	ror	r23
 a4e:	67 95       	ror	r22
 a50:	b7 95       	ror	r27
 a52:	f1 11       	cpse	r31, r1
 a54:	f8 cf       	rjmp	.-16     	; 0xa46 <__floatsisf+0x1c>
 a56:	fa f4       	brpl	.+62     	; 0xa96 <__floatsisf+0x6c>
 a58:	bb 0f       	add	r27, r27
 a5a:	11 f4       	brne	.+4      	; 0xa60 <__floatsisf+0x36>
 a5c:	60 ff       	sbrs	r22, 0
 a5e:	1b c0       	rjmp	.+54     	; 0xa96 <__floatsisf+0x6c>
 a60:	6f 5f       	subi	r22, 0xFF	; 255
 a62:	7f 4f       	sbci	r23, 0xFF	; 255
 a64:	8f 4f       	sbci	r24, 0xFF	; 255
 a66:	9f 4f       	sbci	r25, 0xFF	; 255
 a68:	16 c0       	rjmp	.+44     	; 0xa96 <__floatsisf+0x6c>
 a6a:	88 23       	and	r24, r24
 a6c:	11 f0       	breq	.+4      	; 0xa72 <__floatsisf+0x48>
 a6e:	96 e9       	ldi	r25, 0x96	; 150
 a70:	11 c0       	rjmp	.+34     	; 0xa94 <__floatsisf+0x6a>
 a72:	77 23       	and	r23, r23
 a74:	21 f0       	breq	.+8      	; 0xa7e <__floatsisf+0x54>
 a76:	9e e8       	ldi	r25, 0x8E	; 142
 a78:	87 2f       	mov	r24, r23
 a7a:	76 2f       	mov	r23, r22
 a7c:	05 c0       	rjmp	.+10     	; 0xa88 <__floatsisf+0x5e>
 a7e:	66 23       	and	r22, r22
 a80:	71 f0       	breq	.+28     	; 0xa9e <__floatsisf+0x74>
 a82:	96 e8       	ldi	r25, 0x86	; 134
 a84:	86 2f       	mov	r24, r22
 a86:	70 e0       	ldi	r23, 0x00	; 0
 a88:	60 e0       	ldi	r22, 0x00	; 0
 a8a:	2a f0       	brmi	.+10     	; 0xa96 <__floatsisf+0x6c>
 a8c:	9a 95       	dec	r25
 a8e:	66 0f       	add	r22, r22
 a90:	77 1f       	adc	r23, r23
 a92:	88 1f       	adc	r24, r24
 a94:	da f7       	brpl	.-10     	; 0xa8c <__floatsisf+0x62>
 a96:	88 0f       	add	r24, r24
 a98:	96 95       	lsr	r25
 a9a:	87 95       	ror	r24
 a9c:	97 f9       	bld	r25, 7
 a9e:	08 95       	ret

00000aa0 <__fp_inf>:
 aa0:	97 f9       	bld	r25, 7
 aa2:	9f 67       	ori	r25, 0x7F	; 127
 aa4:	80 e8       	ldi	r24, 0x80	; 128
 aa6:	70 e0       	ldi	r23, 0x00	; 0
 aa8:	60 e0       	ldi	r22, 0x00	; 0
 aaa:	08 95       	ret

00000aac <__fp_mintl>:
 aac:	88 23       	and	r24, r24
 aae:	71 f4       	brne	.+28     	; 0xacc <__fp_mintl+0x20>
 ab0:	77 23       	and	r23, r23
 ab2:	21 f0       	breq	.+8      	; 0xabc <__fp_mintl+0x10>
 ab4:	98 50       	subi	r25, 0x08	; 8
 ab6:	87 2b       	or	r24, r23
 ab8:	76 2f       	mov	r23, r22
 aba:	07 c0       	rjmp	.+14     	; 0xaca <__fp_mintl+0x1e>
 abc:	66 23       	and	r22, r22
 abe:	11 f4       	brne	.+4      	; 0xac4 <__fp_mintl+0x18>
 ac0:	99 27       	eor	r25, r25
 ac2:	0d c0       	rjmp	.+26     	; 0xade <__fp_mintl+0x32>
 ac4:	90 51       	subi	r25, 0x10	; 16
 ac6:	86 2b       	or	r24, r22
 ac8:	70 e0       	ldi	r23, 0x00	; 0
 aca:	60 e0       	ldi	r22, 0x00	; 0
 acc:	2a f0       	brmi	.+10     	; 0xad8 <__fp_mintl+0x2c>
 ace:	9a 95       	dec	r25
 ad0:	66 0f       	add	r22, r22
 ad2:	77 1f       	adc	r23, r23
 ad4:	88 1f       	adc	r24, r24
 ad6:	da f7       	brpl	.-10     	; 0xace <__fp_mintl+0x22>
 ad8:	88 0f       	add	r24, r24
 ada:	96 95       	lsr	r25
 adc:	87 95       	ror	r24
 ade:	97 f9       	bld	r25, 7
 ae0:	08 95       	ret

00000ae2 <__fp_mpack>:
 ae2:	9f 3f       	cpi	r25, 0xFF	; 255
 ae4:	31 f0       	breq	.+12     	; 0xaf2 <__fp_mpack_finite+0xc>

00000ae6 <__fp_mpack_finite>:
 ae6:	91 50       	subi	r25, 0x01	; 1
 ae8:	20 f4       	brcc	.+8      	; 0xaf2 <__fp_mpack_finite+0xc>
 aea:	87 95       	ror	r24
 aec:	77 95       	ror	r23
 aee:	67 95       	ror	r22
 af0:	b7 95       	ror	r27
 af2:	88 0f       	add	r24, r24
 af4:	91 1d       	adc	r25, r1
 af6:	96 95       	lsr	r25
 af8:	87 95       	ror	r24
 afa:	97 f9       	bld	r25, 7
 afc:	08 95       	ret

00000afe <__fp_nan>:
 afe:	9f ef       	ldi	r25, 0xFF	; 255
 b00:	80 ec       	ldi	r24, 0xC0	; 192
 b02:	08 95       	ret

00000b04 <__fp_pscA>:
 b04:	00 24       	eor	r0, r0
 b06:	0a 94       	dec	r0
 b08:	16 16       	cp	r1, r22
 b0a:	17 06       	cpc	r1, r23
 b0c:	18 06       	cpc	r1, r24
 b0e:	09 06       	cpc	r0, r25
 b10:	08 95       	ret

00000b12 <__fp_pscB>:
 b12:	00 24       	eor	r0, r0
 b14:	0a 94       	dec	r0
 b16:	12 16       	cp	r1, r18
 b18:	13 06       	cpc	r1, r19
 b1a:	14 06       	cpc	r1, r20
 b1c:	05 06       	cpc	r0, r21
 b1e:	08 95       	ret

00000b20 <__fp_round>:
 b20:	09 2e       	mov	r0, r25
 b22:	03 94       	inc	r0
 b24:	00 0c       	add	r0, r0
 b26:	11 f4       	brne	.+4      	; 0xb2c <__fp_round+0xc>
 b28:	88 23       	and	r24, r24
 b2a:	52 f0       	brmi	.+20     	; 0xb40 <__fp_round+0x20>
 b2c:	bb 0f       	add	r27, r27
 b2e:	40 f4       	brcc	.+16     	; 0xb40 <__fp_round+0x20>
 b30:	bf 2b       	or	r27, r31
 b32:	11 f4       	brne	.+4      	; 0xb38 <__fp_round+0x18>
 b34:	60 ff       	sbrs	r22, 0
 b36:	04 c0       	rjmp	.+8      	; 0xb40 <__fp_round+0x20>
 b38:	6f 5f       	subi	r22, 0xFF	; 255
 b3a:	7f 4f       	sbci	r23, 0xFF	; 255
 b3c:	8f 4f       	sbci	r24, 0xFF	; 255
 b3e:	9f 4f       	sbci	r25, 0xFF	; 255
 b40:	08 95       	ret

00000b42 <__fp_split3>:
 b42:	57 fd       	sbrc	r21, 7
 b44:	90 58       	subi	r25, 0x80	; 128
 b46:	44 0f       	add	r20, r20
 b48:	55 1f       	adc	r21, r21
 b4a:	59 f0       	breq	.+22     	; 0xb62 <__fp_splitA+0x10>
 b4c:	5f 3f       	cpi	r21, 0xFF	; 255
 b4e:	71 f0       	breq	.+28     	; 0xb6c <__fp_splitA+0x1a>
 b50:	47 95       	ror	r20

00000b52 <__fp_splitA>:
 b52:	88 0f       	add	r24, r24
 b54:	97 fb       	bst	r25, 7
 b56:	99 1f       	adc	r25, r25
 b58:	61 f0       	breq	.+24     	; 0xb72 <__fp_splitA+0x20>
 b5a:	9f 3f       	cpi	r25, 0xFF	; 255
 b5c:	79 f0       	breq	.+30     	; 0xb7c <__fp_splitA+0x2a>
 b5e:	87 95       	ror	r24
 b60:	08 95       	ret
 b62:	12 16       	cp	r1, r18
 b64:	13 06       	cpc	r1, r19
 b66:	14 06       	cpc	r1, r20
 b68:	55 1f       	adc	r21, r21
 b6a:	f2 cf       	rjmp	.-28     	; 0xb50 <__fp_split3+0xe>
 b6c:	46 95       	lsr	r20
 b6e:	f1 df       	rcall	.-30     	; 0xb52 <__fp_splitA>
 b70:	08 c0       	rjmp	.+16     	; 0xb82 <__fp_splitA+0x30>
 b72:	16 16       	cp	r1, r22
 b74:	17 06       	cpc	r1, r23
 b76:	18 06       	cpc	r1, r24
 b78:	99 1f       	adc	r25, r25
 b7a:	f1 cf       	rjmp	.-30     	; 0xb5e <__fp_splitA+0xc>
 b7c:	86 95       	lsr	r24
 b7e:	71 05       	cpc	r23, r1
 b80:	61 05       	cpc	r22, r1
 b82:	08 94       	sec
 b84:	08 95       	ret

00000b86 <__fp_trunc>:
 b86:	0e 94 a9 05 	call	0xb52	; 0xb52 <__fp_splitA>
 b8a:	a0 f0       	brcs	.+40     	; 0xbb4 <__fp_trunc+0x2e>
 b8c:	be e7       	ldi	r27, 0x7E	; 126
 b8e:	b9 17       	cp	r27, r25
 b90:	88 f4       	brcc	.+34     	; 0xbb4 <__fp_trunc+0x2e>
 b92:	bb 27       	eor	r27, r27
 b94:	9f 38       	cpi	r25, 0x8F	; 143
 b96:	60 f4       	brcc	.+24     	; 0xbb0 <__fp_trunc+0x2a>
 b98:	16 16       	cp	r1, r22
 b9a:	b1 1d       	adc	r27, r1
 b9c:	67 2f       	mov	r22, r23
 b9e:	78 2f       	mov	r23, r24
 ba0:	88 27       	eor	r24, r24
 ba2:	98 5f       	subi	r25, 0xF8	; 248
 ba4:	f7 cf       	rjmp	.-18     	; 0xb94 <__fp_trunc+0xe>
 ba6:	86 95       	lsr	r24
 ba8:	77 95       	ror	r23
 baa:	67 95       	ror	r22
 bac:	b1 1d       	adc	r27, r1
 bae:	93 95       	inc	r25
 bb0:	96 39       	cpi	r25, 0x96	; 150
 bb2:	c8 f3       	brcs	.-14     	; 0xba6 <__fp_trunc+0x20>
 bb4:	08 95       	ret

00000bb6 <__fp_zero>:
 bb6:	e8 94       	clt

00000bb8 <__fp_szero>:
 bb8:	bb 27       	eor	r27, r27
 bba:	66 27       	eor	r22, r22
 bbc:	77 27       	eor	r23, r23
 bbe:	cb 01       	movw	r24, r22
 bc0:	97 f9       	bld	r25, 7
 bc2:	08 95       	ret

00000bc4 <__muluhisi3>:
 bc4:	0e 94 ed 05 	call	0xbda	; 0xbda <__umulhisi3>
 bc8:	a5 9f       	mul	r26, r21
 bca:	90 0d       	add	r25, r0
 bcc:	b4 9f       	mul	r27, r20
 bce:	90 0d       	add	r25, r0
 bd0:	a4 9f       	mul	r26, r20
 bd2:	80 0d       	add	r24, r0
 bd4:	91 1d       	adc	r25, r1
 bd6:	11 24       	eor	r1, r1
 bd8:	08 95       	ret

00000bda <__umulhisi3>:
 bda:	a2 9f       	mul	r26, r18
 bdc:	b0 01       	movw	r22, r0
 bde:	b3 9f       	mul	r27, r19
 be0:	c0 01       	movw	r24, r0
 be2:	a3 9f       	mul	r26, r19
 be4:	70 0d       	add	r23, r0
 be6:	81 1d       	adc	r24, r1
 be8:	11 24       	eor	r1, r1
 bea:	91 1d       	adc	r25, r1
 bec:	b2 9f       	mul	r27, r18
 bee:	70 0d       	add	r23, r0
 bf0:	81 1d       	adc	r24, r1
 bf2:	11 24       	eor	r1, r1
 bf4:	91 1d       	adc	r25, r1
 bf6:	08 95       	ret

00000bf8 <_exit>:
 bf8:	f8 94       	cli

00000bfa <__stop_program>:
 bfa:	ff cf       	rjmp	.-2      	; 0xbfa <__stop_program>
