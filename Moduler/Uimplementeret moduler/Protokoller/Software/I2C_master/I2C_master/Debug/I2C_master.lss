
I2C_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000007c6  0000085a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800104  00800104  0000085e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000085e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a43  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f9  00000000  00000000  000013a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000050b  00000000  00000000  00001ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  000020ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058e  00000000  00000000  0000217c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000193  00000000  00000000  0000270a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000289d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ec       	ldi	r30, 0xC6	; 198
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
  9e:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_MASTER_init>:
static uint8_t local_read_data = 0;
static bool data_ready_flag = false;

void I2C_MASTER_init(char bitRate, I2C_MASTER_prescale_t pre) 
{
	sei();			//Enable global interrupt
  a6:	78 94       	sei
	
	TWBR = bitRate;	//Set bitRate
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
	TWSR = ((pre & 0x01) << TWPS0) | ((pre & 0x02) << TWPS1);	//Set prescaler
  ac:	86 2f       	mov	r24, r22
  ae:	82 70       	andi	r24, 0x02	; 2
  b0:	88 0f       	add	r24, r24
  b2:	61 70       	andi	r22, 0x01	; 1
  b4:	68 2b       	or	r22, r24
  b6:	60 93 b9 00 	sts	0x00B9, r22	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	
	TWCR = (0 << TWEA) | (1 << TWEN);	//Setup TWI to send NACK when data is recieved and enable HW
  ba:	84 e0       	ldi	r24, 0x04	; 4
  bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  c0:	08 95       	ret

000000c2 <I2C_MASTER_sendData>:
}

void I2C_MASTER_sendData(char addr, I2C_commands_t cmd) 
{	
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
	//Check and lock mutex
	if (I2C_MASTER_hw_mutex)
  c6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <I2C_MASTER_hw_mutex>
  ca:	91 11       	cpse	r25, r1
  cc:	2f c0       	rjmp	.+94     	; 0x12c <I2C_MASTER_sendData+0x6a>
		return;
	
	I2C_MASTER_hw_mutex = true;
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <I2C_MASTER_hw_mutex>
	
	//Wait for start to transmit
	while (TWSR != 0x08);
	
	//Insert slave ADDR and write bit to data register
	TWDR = (addr << 1) + I2C_write; 
  d4:	88 0f       	add	r24, r24
	
	I2C_MASTER_hw_mutex = true;
	
startTransmit:
	//Start by sending a start condition
	TWCR = (1 << TWEN) | (0 << TWSTO) | (1 << TWSTA) | (1 << TWINT);
  d6:	ec eb       	ldi	r30, 0xBC	; 188
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	34 ea       	ldi	r19, 0xA4	; 164
	
	//Wait for start to transmit
	while (TWSR != 0x08);
  dc:	a9 eb       	ldi	r26, 0xB9	; 185
  de:	b0 e0       	ldi	r27, 0x00	; 0
	
	//Insert slave ADDR and write bit to data register
	TWDR = (addr << 1) + I2C_write; 
  e0:	cb eb       	ldi	r28, 0xBB	; 187
  e2:	d0 e0       	ldi	r29, 0x00	; 0
	
	//Send addr and W
	TWCR = (1 << TWEN) | (1 << TWINT);
  e4:	24 e8       	ldi	r18, 0x84	; 132
	
	I2C_MASTER_hw_mutex = true;
	
startTransmit:
	//Start by sending a start condition
	TWCR = (1 << TWEN) | (0 << TWSTO) | (1 << TWSTA) | (1 << TWINT);
  e6:	30 83       	st	Z, r19
	
	//Wait for start to transmit
	while (TWSR != 0x08);
  e8:	9c 91       	ld	r25, X
  ea:	98 30       	cpi	r25, 0x08	; 8
  ec:	e9 f7       	brne	.-6      	; 0xe8 <I2C_MASTER_sendData+0x26>
	
	//Insert slave ADDR and write bit to data register
	TWDR = (addr << 1) + I2C_write; 
  ee:	88 83       	st	Y, r24
	
	//Send addr and W
	TWCR = (1 << TWEN) | (1 << TWINT);
  f0:	20 83       	st	Z, r18
	
	//Wait for status
	while (!(TWCR & (1 << TWINT)));
  f2:	90 81       	ld	r25, Z
  f4:	99 23       	and	r25, r25
  f6:	ec f7       	brge	.-6      	; 0xf2 <I2C_MASTER_sendData+0x30>
	if (TWSR == 0x38)
  f8:	9c 91       	ld	r25, X
  fa:	98 33       	cpi	r25, 0x38	; 56
  fc:	a1 f3       	breq	.-24     	; 0xe6 <I2C_MASTER_sendData+0x24>
		goto startTransmit;	
	
sendData:
	//Make sure data can be written
	while(!(TWCR & (1 << TWINT)));
  fe:	ec eb       	ldi	r30, 0xBC	; 188
 100:	f0 e0       	ldi	r31, 0x00	; 0
	
	//Write data
	TWDR = cmd;
 102:	cb eb       	ldi	r28, 0xBB	; 187
 104:	d0 e0       	ldi	r29, 0x00	; 0
	TWCR = (1 << TWEN) | (1 << TWINT);
 106:	94 e8       	ldi	r25, 0x84	; 132
	
	//Wait for status
	while (!(TWCR & (1 << TWINT)));
	if (TWSR == 0x38)
 108:	a9 eb       	ldi	r26, 0xB9	; 185
 10a:	b0 e0       	ldi	r27, 0x00	; 0
	if (TWSR == 0x38)
		goto startTransmit;	
	
sendData:
	//Make sure data can be written
	while(!(TWCR & (1 << TWINT)));
 10c:	80 81       	ld	r24, Z
 10e:	88 23       	and	r24, r24
 110:	ec f7       	brge	.-6      	; 0x10c <I2C_MASTER_sendData+0x4a>
	
	//Write data
	TWDR = cmd;
 112:	68 83       	st	Y, r22
	TWCR = (1 << TWEN) | (1 << TWINT);
 114:	90 83       	st	Z, r25
	
	//Wait for status
	while (!(TWCR & (1 << TWINT)));
 116:	80 81       	ld	r24, Z
 118:	88 23       	and	r24, r24
 11a:	ec f7       	brge	.-6      	; 0x116 <I2C_MASTER_sendData+0x54>
	if (TWSR == 0x38)
 11c:	8c 91       	ld	r24, X
 11e:	88 33       	cpi	r24, 0x38	; 56
 120:	a9 f3       	breq	.-22     	; 0x10c <I2C_MASTER_sendData+0x4a>
		goto sendData;
	
	//Send stop	
	TWCR = (1 << TWEN) | (1 << TWSTO) | (0 << TWSTA) | (1 << TWINT);
 122:	84 e9       	ldi	r24, 0x94	; 148
 124:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	//Unlock mutex	
	I2C_MASTER_hw_mutex = false;
 128:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <I2C_MASTER_hw_mutex>
}
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <I2C_MASTER_readData>:

void I2C_MASTER_readData(char addr) {
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
	
	//Wait for start to transmit
	while (TWSR != 0x08);
	
	//Insert slave ADDR and read bit to data register
	TWDR = (addr << 1) + I2C_read;
 136:	88 0f       	add	r24, r24
 138:	8f 5f       	subi	r24, 0xFF	; 255
sendRead:
	//Lock mutex
	if (I2C_MASTER_hw_mutex)
		return;
		
	I2C_MASTER_hw_mutex = true;
 13a:	41 e0       	ldi	r20, 0x01	; 1

	//Start by sending a start condition
	TWCR = (1 << TWEN) | (0 << TWSTO) | (1 << TWSTA) | (1 << TWINT);
 13c:	ec eb       	ldi	r30, 0xBC	; 188
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	34 ea       	ldi	r19, 0xA4	; 164
	
	//Wait for start to transmit
	while (TWSR != 0x08);
 142:	a9 eb       	ldi	r26, 0xB9	; 185
 144:	b0 e0       	ldi	r27, 0x00	; 0
	
	//Insert slave ADDR and read bit to data register
	TWDR = (addr << 1) + I2C_read;
 146:	cb eb       	ldi	r28, 0xBB	; 187
 148:	d0 e0       	ldi	r29, 0x00	; 0
	
	//Send addr and R
	TWCR = (1 << TWEN) | (1 << TWINT);
 14a:	24 e8       	ldi	r18, 0x84	; 132

void I2C_MASTER_readData(char addr) {

sendRead:
	//Lock mutex
	if (I2C_MASTER_hw_mutex)
 14c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <I2C_MASTER_hw_mutex>
 150:	91 11       	cpse	r25, r1
 152:	11 c0       	rjmp	.+34     	; 0x176 <I2C_MASTER_readData+0x44>
		return;
		
	I2C_MASTER_hw_mutex = true;
 154:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <I2C_MASTER_hw_mutex>

	//Start by sending a start condition
	TWCR = (1 << TWEN) | (0 << TWSTO) | (1 << TWSTA) | (1 << TWINT);
 158:	30 83       	st	Z, r19
	
	//Wait for start to transmit
	while (TWSR != 0x08);
 15a:	9c 91       	ld	r25, X
 15c:	98 30       	cpi	r25, 0x08	; 8
 15e:	e9 f7       	brne	.-6      	; 0x15a <I2C_MASTER_readData+0x28>
	
	//Insert slave ADDR and read bit to data register
	TWDR = (addr << 1) + I2C_read;
 160:	88 83       	st	Y, r24
	
	//Send addr and R
	TWCR = (1 << TWEN) | (1 << TWINT);
 162:	20 83       	st	Z, r18
	
	while (!(TWCR & (1 << TWINT)));
 164:	90 81       	ld	r25, Z
 166:	99 23       	and	r25, r25
 168:	ec f7       	brge	.-6      	; 0x164 <I2C_MASTER_readData+0x32>
	if (TWSR == 0x38)
 16a:	9c 91       	ld	r25, X
 16c:	98 33       	cpi	r25, 0x38	; 56
 16e:	71 f3       	breq	.-36     	; 0x14c <I2C_MASTER_readData+0x1a>
		goto sendRead;
		
	//Enable read interrupt, so CPU can do other stuff
	TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT);
 170:	85 e8       	ldi	r24, 0x85	; 133
 172:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	//Do NOT unlock mutex before data is read
	
}
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <I2C_MASTER_checkData>:

bool I2C_MASTER_checkData() {
	return data_ready_flag;
}
 17c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 180:	08 95       	ret

00000182 <I2C_MASTER_getData>:

char I2C_MASTER_getData() {
	return local_read_data;
}
 182:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <local_read_data>
 186:	08 95       	ret

00000188 <__vector_24>:

//Read data from TWI
ISR(TWI_vect) {
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	8f 93       	push	r24
	
	//Save data
	local_read_data = TWDR;
 194:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 198:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <local_read_data>
	
	//Set flag
	data_ready_flag = true;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	
	//Send stop and stop interrupts
	TWCR = (1 << TWEN) | (0 << TWIE) | (1 << TWSTO) | (0 << TWSTA) | (1 << TWINT);
 1a2:	84 e9       	ldi	r24, 0x94	; 148
 1a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	//Unlock mutex from read
	I2C_MASTER_hw_mutex = false;
 1a8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <I2C_MASTER_hw_mutex>
	
 1ac:	8f 91       	pop	r24
 1ae:	0f 90       	pop	r0
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <main>:


int main(void)
{
	//Init master clock to 250 kHz
	I2C_MASTER_init(4U, I2C_MASTER_PRESCALE_1);
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	84 e0       	ldi	r24, 0x04	; 4
 1bc:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_MASTER_init>
		
		//Get data
		uint8_t dataRead = I2C_MASTER_getData();
		
		//Print data
		printf("%d", dataRead);
 1c0:	c0 e0       	ldi	r28, 0x00	; 0
 1c2:	d1 e0       	ldi	r29, 0x01	; 1
	
    /* Replace with your application code */
    while (1) 
    {
		//Send command
		I2C_MASTER_sendData(I2C_SLAVE_ADDR, PING);
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	0e 94 61 00 	call	0xc2	; 0xc2 <I2C_MASTER_sendData>
		
		//Send read to slace
		I2C_MASTER_readData(I2C_SLAVE_ADDR);
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 99 00 	call	0x132	; 0x132 <I2C_MASTER_readData>
		
		//Wait for data
		while(!I2C_MASTER_checkData());
 1d2:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_MASTER_checkData>
 1d6:	88 23       	and	r24, r24
 1d8:	e1 f3       	breq	.-8      	; 0x1d2 <main+0x1a>
		
		//Get data
		uint8_t dataRead = I2C_MASTER_getData();
 1da:	0e 94 c1 00 	call	0x182	; 0x182 <I2C_MASTER_getData>
		
		//Print data
		printf("%d", dataRead);
 1de:	1f 92       	push	r1
 1e0:	8f 93       	push	r24
 1e2:	df 93       	push	r29
 1e4:	cf 93       	push	r28
 1e6:	0e 94 03 01 	call	0x206	; 0x206 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	9f e3       	ldi	r25, 0x3F	; 63
 1ec:	2d e0       	ldi	r18, 0x0D	; 13
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	91 50       	subi	r25, 0x01	; 1
 1f2:	20 40       	sbci	r18, 0x00	; 0
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0x38>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0x42>
 1fa:	00 00       	nop
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	0f 90       	pop	r0
 204:	df cf       	rjmp	.-66     	; 0x1c4 <main+0xc>

00000206 <printf>:
 206:	a0 e0       	ldi	r26, 0x00	; 0
 208:	b0 e0       	ldi	r27, 0x00	; 0
 20a:	e9 e0       	ldi	r30, 0x09	; 9
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	0c 94 ba 03 	jmp	0x774	; 0x774 <__prologue_saves__+0x20>
 212:	ae 01       	movw	r20, r28
 214:	4b 5f       	subi	r20, 0xFB	; 251
 216:	5f 4f       	sbci	r21, 0xFF	; 255
 218:	fa 01       	movw	r30, r20
 21a:	61 91       	ld	r22, Z+
 21c:	71 91       	ld	r23, Z+
 21e:	af 01       	movw	r20, r30
 220:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__iob+0x2>
 224:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__iob+0x3>
 228:	0e 94 19 01 	call	0x232	; 0x232 <vfprintf>
 22c:	e2 e0       	ldi	r30, 0x02	; 2
 22e:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__epilogue_restores__+0x20>

00000232 <vfprintf>:
 232:	ab e0       	ldi	r26, 0x0B	; 11
 234:	b0 e0       	ldi	r27, 0x00	; 0
 236:	ef e1       	ldi	r30, 0x1F	; 31
 238:	f1 e0       	ldi	r31, 0x01	; 1
 23a:	0c 94 aa 03 	jmp	0x754	; 0x754 <__prologue_saves__>
 23e:	6c 01       	movw	r12, r24
 240:	7b 01       	movw	r14, r22
 242:	8a 01       	movw	r16, r20
 244:	fc 01       	movw	r30, r24
 246:	17 82       	std	Z+7, r1	; 0x07
 248:	16 82       	std	Z+6, r1	; 0x06
 24a:	83 81       	ldd	r24, Z+3	; 0x03
 24c:	81 ff       	sbrs	r24, 1
 24e:	cc c1       	rjmp	.+920    	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 250:	ce 01       	movw	r24, r28
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	3c 01       	movw	r6, r24
 256:	f6 01       	movw	r30, r12
 258:	93 81       	ldd	r25, Z+3	; 0x03
 25a:	f7 01       	movw	r30, r14
 25c:	93 fd       	sbrc	r25, 3
 25e:	85 91       	lpm	r24, Z+
 260:	93 ff       	sbrs	r25, 3
 262:	81 91       	ld	r24, Z+
 264:	7f 01       	movw	r14, r30
 266:	88 23       	and	r24, r24
 268:	09 f4       	brne	.+2      	; 0x26c <vfprintf+0x3a>
 26a:	ba c1       	rjmp	.+884    	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
 26c:	85 32       	cpi	r24, 0x25	; 37
 26e:	39 f4       	brne	.+14     	; 0x27e <vfprintf+0x4c>
 270:	93 fd       	sbrc	r25, 3
 272:	85 91       	lpm	r24, Z+
 274:	93 ff       	sbrs	r25, 3
 276:	81 91       	ld	r24, Z+
 278:	7f 01       	movw	r14, r30
 27a:	85 32       	cpi	r24, 0x25	; 37
 27c:	29 f4       	brne	.+10     	; 0x288 <vfprintf+0x56>
 27e:	b6 01       	movw	r22, r12
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 10 03 	call	0x620	; 0x620 <fputc>
 286:	e7 cf       	rjmp	.-50     	; 0x256 <vfprintf+0x24>
 288:	91 2c       	mov	r9, r1
 28a:	21 2c       	mov	r2, r1
 28c:	31 2c       	mov	r3, r1
 28e:	ff e1       	ldi	r31, 0x1F	; 31
 290:	f3 15       	cp	r31, r3
 292:	d8 f0       	brcs	.+54     	; 0x2ca <vfprintf+0x98>
 294:	8b 32       	cpi	r24, 0x2B	; 43
 296:	79 f0       	breq	.+30     	; 0x2b6 <vfprintf+0x84>
 298:	38 f4       	brcc	.+14     	; 0x2a8 <vfprintf+0x76>
 29a:	80 32       	cpi	r24, 0x20	; 32
 29c:	79 f0       	breq	.+30     	; 0x2bc <vfprintf+0x8a>
 29e:	83 32       	cpi	r24, 0x23	; 35
 2a0:	a1 f4       	brne	.+40     	; 0x2ca <vfprintf+0x98>
 2a2:	23 2d       	mov	r18, r3
 2a4:	20 61       	ori	r18, 0x10	; 16
 2a6:	1d c0       	rjmp	.+58     	; 0x2e2 <vfprintf+0xb0>
 2a8:	8d 32       	cpi	r24, 0x2D	; 45
 2aa:	61 f0       	breq	.+24     	; 0x2c4 <vfprintf+0x92>
 2ac:	80 33       	cpi	r24, 0x30	; 48
 2ae:	69 f4       	brne	.+26     	; 0x2ca <vfprintf+0x98>
 2b0:	23 2d       	mov	r18, r3
 2b2:	21 60       	ori	r18, 0x01	; 1
 2b4:	16 c0       	rjmp	.+44     	; 0x2e2 <vfprintf+0xb0>
 2b6:	83 2d       	mov	r24, r3
 2b8:	82 60       	ori	r24, 0x02	; 2
 2ba:	38 2e       	mov	r3, r24
 2bc:	e3 2d       	mov	r30, r3
 2be:	e4 60       	ori	r30, 0x04	; 4
 2c0:	3e 2e       	mov	r3, r30
 2c2:	2a c0       	rjmp	.+84     	; 0x318 <vfprintf+0xe6>
 2c4:	f3 2d       	mov	r31, r3
 2c6:	f8 60       	ori	r31, 0x08	; 8
 2c8:	1d c0       	rjmp	.+58     	; 0x304 <vfprintf+0xd2>
 2ca:	37 fc       	sbrc	r3, 7
 2cc:	2d c0       	rjmp	.+90     	; 0x328 <vfprintf+0xf6>
 2ce:	20 ed       	ldi	r18, 0xD0	; 208
 2d0:	28 0f       	add	r18, r24
 2d2:	2a 30       	cpi	r18, 0x0A	; 10
 2d4:	40 f0       	brcs	.+16     	; 0x2e6 <vfprintf+0xb4>
 2d6:	8e 32       	cpi	r24, 0x2E	; 46
 2d8:	b9 f4       	brne	.+46     	; 0x308 <vfprintf+0xd6>
 2da:	36 fc       	sbrc	r3, 6
 2dc:	81 c1       	rjmp	.+770    	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
 2de:	23 2d       	mov	r18, r3
 2e0:	20 64       	ori	r18, 0x40	; 64
 2e2:	32 2e       	mov	r3, r18
 2e4:	19 c0       	rjmp	.+50     	; 0x318 <vfprintf+0xe6>
 2e6:	36 fe       	sbrs	r3, 6
 2e8:	06 c0       	rjmp	.+12     	; 0x2f6 <vfprintf+0xc4>
 2ea:	8a e0       	ldi	r24, 0x0A	; 10
 2ec:	98 9e       	mul	r9, r24
 2ee:	20 0d       	add	r18, r0
 2f0:	11 24       	eor	r1, r1
 2f2:	92 2e       	mov	r9, r18
 2f4:	11 c0       	rjmp	.+34     	; 0x318 <vfprintf+0xe6>
 2f6:	ea e0       	ldi	r30, 0x0A	; 10
 2f8:	2e 9e       	mul	r2, r30
 2fa:	20 0d       	add	r18, r0
 2fc:	11 24       	eor	r1, r1
 2fe:	22 2e       	mov	r2, r18
 300:	f3 2d       	mov	r31, r3
 302:	f0 62       	ori	r31, 0x20	; 32
 304:	3f 2e       	mov	r3, r31
 306:	08 c0       	rjmp	.+16     	; 0x318 <vfprintf+0xe6>
 308:	8c 36       	cpi	r24, 0x6C	; 108
 30a:	21 f4       	brne	.+8      	; 0x314 <vfprintf+0xe2>
 30c:	83 2d       	mov	r24, r3
 30e:	80 68       	ori	r24, 0x80	; 128
 310:	38 2e       	mov	r3, r24
 312:	02 c0       	rjmp	.+4      	; 0x318 <vfprintf+0xe6>
 314:	88 36       	cpi	r24, 0x68	; 104
 316:	41 f4       	brne	.+16     	; 0x328 <vfprintf+0xf6>
 318:	f7 01       	movw	r30, r14
 31a:	93 fd       	sbrc	r25, 3
 31c:	85 91       	lpm	r24, Z+
 31e:	93 ff       	sbrs	r25, 3
 320:	81 91       	ld	r24, Z+
 322:	7f 01       	movw	r14, r30
 324:	81 11       	cpse	r24, r1
 326:	b3 cf       	rjmp	.-154    	; 0x28e <vfprintf+0x5c>
 328:	98 2f       	mov	r25, r24
 32a:	9f 7d       	andi	r25, 0xDF	; 223
 32c:	95 54       	subi	r25, 0x45	; 69
 32e:	93 30       	cpi	r25, 0x03	; 3
 330:	28 f4       	brcc	.+10     	; 0x33c <vfprintf+0x10a>
 332:	0c 5f       	subi	r16, 0xFC	; 252
 334:	1f 4f       	sbci	r17, 0xFF	; 255
 336:	9f e3       	ldi	r25, 0x3F	; 63
 338:	99 83       	std	Y+1, r25	; 0x01
 33a:	0d c0       	rjmp	.+26     	; 0x356 <vfprintf+0x124>
 33c:	83 36       	cpi	r24, 0x63	; 99
 33e:	31 f0       	breq	.+12     	; 0x34c <vfprintf+0x11a>
 340:	83 37       	cpi	r24, 0x73	; 115
 342:	71 f0       	breq	.+28     	; 0x360 <vfprintf+0x12e>
 344:	83 35       	cpi	r24, 0x53	; 83
 346:	09 f0       	breq	.+2      	; 0x34a <vfprintf+0x118>
 348:	59 c0       	rjmp	.+178    	; 0x3fc <vfprintf+0x1ca>
 34a:	21 c0       	rjmp	.+66     	; 0x38e <vfprintf+0x15c>
 34c:	f8 01       	movw	r30, r16
 34e:	80 81       	ld	r24, Z
 350:	89 83       	std	Y+1, r24	; 0x01
 352:	0e 5f       	subi	r16, 0xFE	; 254
 354:	1f 4f       	sbci	r17, 0xFF	; 255
 356:	88 24       	eor	r8, r8
 358:	83 94       	inc	r8
 35a:	91 2c       	mov	r9, r1
 35c:	53 01       	movw	r10, r6
 35e:	13 c0       	rjmp	.+38     	; 0x386 <vfprintf+0x154>
 360:	28 01       	movw	r4, r16
 362:	f2 e0       	ldi	r31, 0x02	; 2
 364:	4f 0e       	add	r4, r31
 366:	51 1c       	adc	r5, r1
 368:	f8 01       	movw	r30, r16
 36a:	a0 80       	ld	r10, Z
 36c:	b1 80       	ldd	r11, Z+1	; 0x01
 36e:	36 fe       	sbrs	r3, 6
 370:	03 c0       	rjmp	.+6      	; 0x378 <vfprintf+0x146>
 372:	69 2d       	mov	r22, r9
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <vfprintf+0x14a>
 378:	6f ef       	ldi	r22, 0xFF	; 255
 37a:	7f ef       	ldi	r23, 0xFF	; 255
 37c:	c5 01       	movw	r24, r10
 37e:	0e 94 05 03 	call	0x60a	; 0x60a <strnlen>
 382:	4c 01       	movw	r8, r24
 384:	82 01       	movw	r16, r4
 386:	f3 2d       	mov	r31, r3
 388:	ff 77       	andi	r31, 0x7F	; 127
 38a:	3f 2e       	mov	r3, r31
 38c:	16 c0       	rjmp	.+44     	; 0x3ba <vfprintf+0x188>
 38e:	28 01       	movw	r4, r16
 390:	22 e0       	ldi	r18, 0x02	; 2
 392:	42 0e       	add	r4, r18
 394:	51 1c       	adc	r5, r1
 396:	f8 01       	movw	r30, r16
 398:	a0 80       	ld	r10, Z
 39a:	b1 80       	ldd	r11, Z+1	; 0x01
 39c:	36 fe       	sbrs	r3, 6
 39e:	03 c0       	rjmp	.+6      	; 0x3a6 <vfprintf+0x174>
 3a0:	69 2d       	mov	r22, r9
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <vfprintf+0x178>
 3a6:	6f ef       	ldi	r22, 0xFF	; 255
 3a8:	7f ef       	ldi	r23, 0xFF	; 255
 3aa:	c5 01       	movw	r24, r10
 3ac:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <strnlen_P>
 3b0:	4c 01       	movw	r8, r24
 3b2:	f3 2d       	mov	r31, r3
 3b4:	f0 68       	ori	r31, 0x80	; 128
 3b6:	3f 2e       	mov	r3, r31
 3b8:	82 01       	movw	r16, r4
 3ba:	33 fc       	sbrc	r3, 3
 3bc:	1b c0       	rjmp	.+54     	; 0x3f4 <vfprintf+0x1c2>
 3be:	82 2d       	mov	r24, r2
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	88 16       	cp	r8, r24
 3c4:	99 06       	cpc	r9, r25
 3c6:	b0 f4       	brcc	.+44     	; 0x3f4 <vfprintf+0x1c2>
 3c8:	b6 01       	movw	r22, r12
 3ca:	80 e2       	ldi	r24, 0x20	; 32
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 10 03 	call	0x620	; 0x620 <fputc>
 3d2:	2a 94       	dec	r2
 3d4:	f4 cf       	rjmp	.-24     	; 0x3be <vfprintf+0x18c>
 3d6:	f5 01       	movw	r30, r10
 3d8:	37 fc       	sbrc	r3, 7
 3da:	85 91       	lpm	r24, Z+
 3dc:	37 fe       	sbrs	r3, 7
 3de:	81 91       	ld	r24, Z+
 3e0:	5f 01       	movw	r10, r30
 3e2:	b6 01       	movw	r22, r12
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 10 03 	call	0x620	; 0x620 <fputc>
 3ea:	21 10       	cpse	r2, r1
 3ec:	2a 94       	dec	r2
 3ee:	21 e0       	ldi	r18, 0x01	; 1
 3f0:	82 1a       	sub	r8, r18
 3f2:	91 08       	sbc	r9, r1
 3f4:	81 14       	cp	r8, r1
 3f6:	91 04       	cpc	r9, r1
 3f8:	71 f7       	brne	.-36     	; 0x3d6 <vfprintf+0x1a4>
 3fa:	e8 c0       	rjmp	.+464    	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 3fc:	84 36       	cpi	r24, 0x64	; 100
 3fe:	11 f0       	breq	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 400:	89 36       	cpi	r24, 0x69	; 105
 402:	41 f5       	brne	.+80     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 404:	f8 01       	movw	r30, r16
 406:	37 fe       	sbrs	r3, 7
 408:	07 c0       	rjmp	.+14     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 40a:	60 81       	ld	r22, Z
 40c:	71 81       	ldd	r23, Z+1	; 0x01
 40e:	82 81       	ldd	r24, Z+2	; 0x02
 410:	93 81       	ldd	r25, Z+3	; 0x03
 412:	0c 5f       	subi	r16, 0xFC	; 252
 414:	1f 4f       	sbci	r17, 0xFF	; 255
 416:	08 c0       	rjmp	.+16     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 418:	60 81       	ld	r22, Z
 41a:	71 81       	ldd	r23, Z+1	; 0x01
 41c:	07 2e       	mov	r0, r23
 41e:	00 0c       	add	r0, r0
 420:	88 0b       	sbc	r24, r24
 422:	99 0b       	sbc	r25, r25
 424:	0e 5f       	subi	r16, 0xFE	; 254
 426:	1f 4f       	sbci	r17, 0xFF	; 255
 428:	f3 2d       	mov	r31, r3
 42a:	ff 76       	andi	r31, 0x6F	; 111
 42c:	3f 2e       	mov	r3, r31
 42e:	97 ff       	sbrs	r25, 7
 430:	09 c0       	rjmp	.+18     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 432:	90 95       	com	r25
 434:	80 95       	com	r24
 436:	70 95       	com	r23
 438:	61 95       	neg	r22
 43a:	7f 4f       	sbci	r23, 0xFF	; 255
 43c:	8f 4f       	sbci	r24, 0xFF	; 255
 43e:	9f 4f       	sbci	r25, 0xFF	; 255
 440:	f0 68       	ori	r31, 0x80	; 128
 442:	3f 2e       	mov	r3, r31
 444:	2a e0       	ldi	r18, 0x0A	; 10
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	a3 01       	movw	r20, r6
 44a:	0e 94 4c 03 	call	0x698	; 0x698 <__ultoa_invert>
 44e:	88 2e       	mov	r8, r24
 450:	86 18       	sub	r8, r6
 452:	45 c0       	rjmp	.+138    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 454:	85 37       	cpi	r24, 0x75	; 117
 456:	31 f4       	brne	.+12     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 458:	23 2d       	mov	r18, r3
 45a:	2f 7e       	andi	r18, 0xEF	; 239
 45c:	b2 2e       	mov	r11, r18
 45e:	2a e0       	ldi	r18, 0x0A	; 10
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	25 c0       	rjmp	.+74     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 464:	93 2d       	mov	r25, r3
 466:	99 7f       	andi	r25, 0xF9	; 249
 468:	b9 2e       	mov	r11, r25
 46a:	8f 36       	cpi	r24, 0x6F	; 111
 46c:	c1 f0       	breq	.+48     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 46e:	18 f4       	brcc	.+6      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 470:	88 35       	cpi	r24, 0x58	; 88
 472:	79 f0       	breq	.+30     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 474:	b5 c0       	rjmp	.+362    	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
 476:	80 37       	cpi	r24, 0x70	; 112
 478:	19 f0       	breq	.+6      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 47a:	88 37       	cpi	r24, 0x78	; 120
 47c:	21 f0       	breq	.+8      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 47e:	b0 c0       	rjmp	.+352    	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
 480:	e9 2f       	mov	r30, r25
 482:	e0 61       	ori	r30, 0x10	; 16
 484:	be 2e       	mov	r11, r30
 486:	b4 fe       	sbrs	r11, 4
 488:	0d c0       	rjmp	.+26     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 48a:	fb 2d       	mov	r31, r11
 48c:	f4 60       	ori	r31, 0x04	; 4
 48e:	bf 2e       	mov	r11, r31
 490:	09 c0       	rjmp	.+18     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 492:	34 fe       	sbrs	r3, 4
 494:	0a c0       	rjmp	.+20     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 496:	29 2f       	mov	r18, r25
 498:	26 60       	ori	r18, 0x06	; 6
 49a:	b2 2e       	mov	r11, r18
 49c:	06 c0       	rjmp	.+12     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 49e:	28 e0       	ldi	r18, 0x08	; 8
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	05 c0       	rjmp	.+10     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4a4:	20 e1       	ldi	r18, 0x10	; 16
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4aa:	20 e1       	ldi	r18, 0x10	; 16
 4ac:	32 e0       	ldi	r19, 0x02	; 2
 4ae:	f8 01       	movw	r30, r16
 4b0:	b7 fe       	sbrs	r11, 7
 4b2:	07 c0       	rjmp	.+14     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4b4:	60 81       	ld	r22, Z
 4b6:	71 81       	ldd	r23, Z+1	; 0x01
 4b8:	82 81       	ldd	r24, Z+2	; 0x02
 4ba:	93 81       	ldd	r25, Z+3	; 0x03
 4bc:	0c 5f       	subi	r16, 0xFC	; 252
 4be:	1f 4f       	sbci	r17, 0xFF	; 255
 4c0:	06 c0       	rjmp	.+12     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4c2:	60 81       	ld	r22, Z
 4c4:	71 81       	ldd	r23, Z+1	; 0x01
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 5f       	subi	r16, 0xFE	; 254
 4cc:	1f 4f       	sbci	r17, 0xFF	; 255
 4ce:	a3 01       	movw	r20, r6
 4d0:	0e 94 4c 03 	call	0x698	; 0x698 <__ultoa_invert>
 4d4:	88 2e       	mov	r8, r24
 4d6:	86 18       	sub	r8, r6
 4d8:	fb 2d       	mov	r31, r11
 4da:	ff 77       	andi	r31, 0x7F	; 127
 4dc:	3f 2e       	mov	r3, r31
 4de:	36 fe       	sbrs	r3, 6
 4e0:	0d c0       	rjmp	.+26     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4e2:	23 2d       	mov	r18, r3
 4e4:	2e 7f       	andi	r18, 0xFE	; 254
 4e6:	a2 2e       	mov	r10, r18
 4e8:	89 14       	cp	r8, r9
 4ea:	58 f4       	brcc	.+22     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 4ec:	34 fe       	sbrs	r3, 4
 4ee:	0b c0       	rjmp	.+22     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 4f0:	32 fc       	sbrc	r3, 2
 4f2:	09 c0       	rjmp	.+18     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 4f4:	83 2d       	mov	r24, r3
 4f6:	8e 7e       	andi	r24, 0xEE	; 238
 4f8:	a8 2e       	mov	r10, r24
 4fa:	05 c0       	rjmp	.+10     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 4fc:	b8 2c       	mov	r11, r8
 4fe:	a3 2c       	mov	r10, r3
 500:	03 c0       	rjmp	.+6      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 502:	b8 2c       	mov	r11, r8
 504:	01 c0       	rjmp	.+2      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 506:	b9 2c       	mov	r11, r9
 508:	a4 fe       	sbrs	r10, 4
 50a:	0f c0       	rjmp	.+30     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 50c:	fe 01       	movw	r30, r28
 50e:	e8 0d       	add	r30, r8
 510:	f1 1d       	adc	r31, r1
 512:	80 81       	ld	r24, Z
 514:	80 33       	cpi	r24, 0x30	; 48
 516:	21 f4       	brne	.+8      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 518:	9a 2d       	mov	r25, r10
 51a:	99 7e       	andi	r25, 0xE9	; 233
 51c:	a9 2e       	mov	r10, r25
 51e:	09 c0       	rjmp	.+18     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 520:	a2 fe       	sbrs	r10, 2
 522:	06 c0       	rjmp	.+12     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 524:	b3 94       	inc	r11
 526:	b3 94       	inc	r11
 528:	04 c0       	rjmp	.+8      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 52a:	8a 2d       	mov	r24, r10
 52c:	86 78       	andi	r24, 0x86	; 134
 52e:	09 f0       	breq	.+2      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 530:	b3 94       	inc	r11
 532:	a3 fc       	sbrc	r10, 3
 534:	11 c0       	rjmp	.+34     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 536:	a0 fe       	sbrs	r10, 0
 538:	06 c0       	rjmp	.+12     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 53a:	b2 14       	cp	r11, r2
 53c:	88 f4       	brcc	.+34     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 53e:	28 0c       	add	r2, r8
 540:	92 2c       	mov	r9, r2
 542:	9b 18       	sub	r9, r11
 544:	0e c0       	rjmp	.+28     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 546:	b2 14       	cp	r11, r2
 548:	60 f4       	brcc	.+24     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 54a:	b6 01       	movw	r22, r12
 54c:	80 e2       	ldi	r24, 0x20	; 32
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	0e 94 10 03 	call	0x620	; 0x620 <fputc>
 554:	b3 94       	inc	r11
 556:	f7 cf       	rjmp	.-18     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 558:	b2 14       	cp	r11, r2
 55a:	18 f4       	brcc	.+6      	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 55c:	2b 18       	sub	r2, r11
 55e:	02 c0       	rjmp	.+4      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 560:	98 2c       	mov	r9, r8
 562:	21 2c       	mov	r2, r1
 564:	a4 fe       	sbrs	r10, 4
 566:	10 c0       	rjmp	.+32     	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 568:	b6 01       	movw	r22, r12
 56a:	80 e3       	ldi	r24, 0x30	; 48
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 10 03 	call	0x620	; 0x620 <fputc>
 572:	a2 fe       	sbrs	r10, 2
 574:	17 c0       	rjmp	.+46     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 576:	a1 fc       	sbrc	r10, 1
 578:	03 c0       	rjmp	.+6      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 57a:	88 e7       	ldi	r24, 0x78	; 120
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	02 c0       	rjmp	.+4      	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 580:	88 e5       	ldi	r24, 0x58	; 88
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	b6 01       	movw	r22, r12
 586:	0c c0       	rjmp	.+24     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 588:	8a 2d       	mov	r24, r10
 58a:	86 78       	andi	r24, 0x86	; 134
 58c:	59 f0       	breq	.+22     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 58e:	a1 fe       	sbrs	r10, 1
 590:	02 c0       	rjmp	.+4      	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 592:	8b e2       	ldi	r24, 0x2B	; 43
 594:	01 c0       	rjmp	.+2      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 596:	80 e2       	ldi	r24, 0x20	; 32
 598:	a7 fc       	sbrc	r10, 7
 59a:	8d e2       	ldi	r24, 0x2D	; 45
 59c:	b6 01       	movw	r22, r12
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	0e 94 10 03 	call	0x620	; 0x620 <fputc>
 5a4:	89 14       	cp	r8, r9
 5a6:	38 f4       	brcc	.+14     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 5a8:	b6 01       	movw	r22, r12
 5aa:	80 e3       	ldi	r24, 0x30	; 48
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	0e 94 10 03 	call	0x620	; 0x620 <fputc>
 5b2:	9a 94       	dec	r9
 5b4:	f7 cf       	rjmp	.-18     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 5b6:	8a 94       	dec	r8
 5b8:	f3 01       	movw	r30, r6
 5ba:	e8 0d       	add	r30, r8
 5bc:	f1 1d       	adc	r31, r1
 5be:	80 81       	ld	r24, Z
 5c0:	b6 01       	movw	r22, r12
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	0e 94 10 03 	call	0x620	; 0x620 <fputc>
 5c8:	81 10       	cpse	r8, r1
 5ca:	f5 cf       	rjmp	.-22     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 5cc:	22 20       	and	r2, r2
 5ce:	09 f4       	brne	.+2      	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5d0:	42 ce       	rjmp	.-892    	; 0x256 <vfprintf+0x24>
 5d2:	b6 01       	movw	r22, r12
 5d4:	80 e2       	ldi	r24, 0x20	; 32
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	0e 94 10 03 	call	0x620	; 0x620 <fputc>
 5dc:	2a 94       	dec	r2
 5de:	f6 cf       	rjmp	.-20     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 5e0:	f6 01       	movw	r30, r12
 5e2:	86 81       	ldd	r24, Z+6	; 0x06
 5e4:	97 81       	ldd	r25, Z+7	; 0x07
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 5e8:	8f ef       	ldi	r24, 0xFF	; 255
 5ea:	9f ef       	ldi	r25, 0xFF	; 255
 5ec:	2b 96       	adiw	r28, 0x0b	; 11
 5ee:	e2 e1       	ldi	r30, 0x12	; 18
 5f0:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__epilogue_restores__>

000005f4 <strnlen_P>:
 5f4:	fc 01       	movw	r30, r24
 5f6:	05 90       	lpm	r0, Z+
 5f8:	61 50       	subi	r22, 0x01	; 1
 5fa:	70 40       	sbci	r23, 0x00	; 0
 5fc:	01 10       	cpse	r0, r1
 5fe:	d8 f7       	brcc	.-10     	; 0x5f6 <strnlen_P+0x2>
 600:	80 95       	com	r24
 602:	90 95       	com	r25
 604:	8e 0f       	add	r24, r30
 606:	9f 1f       	adc	r25, r31
 608:	08 95       	ret

0000060a <strnlen>:
 60a:	fc 01       	movw	r30, r24
 60c:	61 50       	subi	r22, 0x01	; 1
 60e:	70 40       	sbci	r23, 0x00	; 0
 610:	01 90       	ld	r0, Z+
 612:	01 10       	cpse	r0, r1
 614:	d8 f7       	brcc	.-10     	; 0x60c <strnlen+0x2>
 616:	80 95       	com	r24
 618:	90 95       	com	r25
 61a:	8e 0f       	add	r24, r30
 61c:	9f 1f       	adc	r25, r31
 61e:	08 95       	ret

00000620 <fputc>:
 620:	0f 93       	push	r16
 622:	1f 93       	push	r17
 624:	cf 93       	push	r28
 626:	df 93       	push	r29
 628:	fb 01       	movw	r30, r22
 62a:	23 81       	ldd	r18, Z+3	; 0x03
 62c:	21 fd       	sbrc	r18, 1
 62e:	03 c0       	rjmp	.+6      	; 0x636 <fputc+0x16>
 630:	8f ef       	ldi	r24, 0xFF	; 255
 632:	9f ef       	ldi	r25, 0xFF	; 255
 634:	2c c0       	rjmp	.+88     	; 0x68e <fputc+0x6e>
 636:	22 ff       	sbrs	r18, 2
 638:	16 c0       	rjmp	.+44     	; 0x666 <fputc+0x46>
 63a:	46 81       	ldd	r20, Z+6	; 0x06
 63c:	57 81       	ldd	r21, Z+7	; 0x07
 63e:	24 81       	ldd	r18, Z+4	; 0x04
 640:	35 81       	ldd	r19, Z+5	; 0x05
 642:	42 17       	cp	r20, r18
 644:	53 07       	cpc	r21, r19
 646:	44 f4       	brge	.+16     	; 0x658 <fputc+0x38>
 648:	a0 81       	ld	r26, Z
 64a:	b1 81       	ldd	r27, Z+1	; 0x01
 64c:	9d 01       	movw	r18, r26
 64e:	2f 5f       	subi	r18, 0xFF	; 255
 650:	3f 4f       	sbci	r19, 0xFF	; 255
 652:	31 83       	std	Z+1, r19	; 0x01
 654:	20 83       	st	Z, r18
 656:	8c 93       	st	X, r24
 658:	26 81       	ldd	r18, Z+6	; 0x06
 65a:	37 81       	ldd	r19, Z+7	; 0x07
 65c:	2f 5f       	subi	r18, 0xFF	; 255
 65e:	3f 4f       	sbci	r19, 0xFF	; 255
 660:	37 83       	std	Z+7, r19	; 0x07
 662:	26 83       	std	Z+6, r18	; 0x06
 664:	14 c0       	rjmp	.+40     	; 0x68e <fputc+0x6e>
 666:	8b 01       	movw	r16, r22
 668:	ec 01       	movw	r28, r24
 66a:	fb 01       	movw	r30, r22
 66c:	00 84       	ldd	r0, Z+8	; 0x08
 66e:	f1 85       	ldd	r31, Z+9	; 0x09
 670:	e0 2d       	mov	r30, r0
 672:	09 95       	icall
 674:	89 2b       	or	r24, r25
 676:	e1 f6       	brne	.-72     	; 0x630 <fputc+0x10>
 678:	d8 01       	movw	r26, r16
 67a:	16 96       	adiw	r26, 0x06	; 6
 67c:	8d 91       	ld	r24, X+
 67e:	9c 91       	ld	r25, X
 680:	17 97       	sbiw	r26, 0x07	; 7
 682:	01 96       	adiw	r24, 0x01	; 1
 684:	17 96       	adiw	r26, 0x07	; 7
 686:	9c 93       	st	X, r25
 688:	8e 93       	st	-X, r24
 68a:	16 97       	sbiw	r26, 0x06	; 6
 68c:	ce 01       	movw	r24, r28
 68e:	df 91       	pop	r29
 690:	cf 91       	pop	r28
 692:	1f 91       	pop	r17
 694:	0f 91       	pop	r16
 696:	08 95       	ret

00000698 <__ultoa_invert>:
 698:	fa 01       	movw	r30, r20
 69a:	aa 27       	eor	r26, r26
 69c:	28 30       	cpi	r18, 0x08	; 8
 69e:	51 f1       	breq	.+84     	; 0x6f4 <__ultoa_invert+0x5c>
 6a0:	20 31       	cpi	r18, 0x10	; 16
 6a2:	81 f1       	breq	.+96     	; 0x704 <__ultoa_invert+0x6c>
 6a4:	e8 94       	clt
 6a6:	6f 93       	push	r22
 6a8:	6e 7f       	andi	r22, 0xFE	; 254
 6aa:	6e 5f       	subi	r22, 0xFE	; 254
 6ac:	7f 4f       	sbci	r23, 0xFF	; 255
 6ae:	8f 4f       	sbci	r24, 0xFF	; 255
 6b0:	9f 4f       	sbci	r25, 0xFF	; 255
 6b2:	af 4f       	sbci	r26, 0xFF	; 255
 6b4:	b1 e0       	ldi	r27, 0x01	; 1
 6b6:	3e d0       	rcall	.+124    	; 0x734 <__ultoa_invert+0x9c>
 6b8:	b4 e0       	ldi	r27, 0x04	; 4
 6ba:	3c d0       	rcall	.+120    	; 0x734 <__ultoa_invert+0x9c>
 6bc:	67 0f       	add	r22, r23
 6be:	78 1f       	adc	r23, r24
 6c0:	89 1f       	adc	r24, r25
 6c2:	9a 1f       	adc	r25, r26
 6c4:	a1 1d       	adc	r26, r1
 6c6:	68 0f       	add	r22, r24
 6c8:	79 1f       	adc	r23, r25
 6ca:	8a 1f       	adc	r24, r26
 6cc:	91 1d       	adc	r25, r1
 6ce:	a1 1d       	adc	r26, r1
 6d0:	6a 0f       	add	r22, r26
 6d2:	71 1d       	adc	r23, r1
 6d4:	81 1d       	adc	r24, r1
 6d6:	91 1d       	adc	r25, r1
 6d8:	a1 1d       	adc	r26, r1
 6da:	20 d0       	rcall	.+64     	; 0x71c <__ultoa_invert+0x84>
 6dc:	09 f4       	brne	.+2      	; 0x6e0 <__ultoa_invert+0x48>
 6de:	68 94       	set
 6e0:	3f 91       	pop	r19
 6e2:	2a e0       	ldi	r18, 0x0A	; 10
 6e4:	26 9f       	mul	r18, r22
 6e6:	11 24       	eor	r1, r1
 6e8:	30 19       	sub	r19, r0
 6ea:	30 5d       	subi	r19, 0xD0	; 208
 6ec:	31 93       	st	Z+, r19
 6ee:	de f6       	brtc	.-74     	; 0x6a6 <__ultoa_invert+0xe>
 6f0:	cf 01       	movw	r24, r30
 6f2:	08 95       	ret
 6f4:	46 2f       	mov	r20, r22
 6f6:	47 70       	andi	r20, 0x07	; 7
 6f8:	40 5d       	subi	r20, 0xD0	; 208
 6fa:	41 93       	st	Z+, r20
 6fc:	b3 e0       	ldi	r27, 0x03	; 3
 6fe:	0f d0       	rcall	.+30     	; 0x71e <__ultoa_invert+0x86>
 700:	c9 f7       	brne	.-14     	; 0x6f4 <__ultoa_invert+0x5c>
 702:	f6 cf       	rjmp	.-20     	; 0x6f0 <__ultoa_invert+0x58>
 704:	46 2f       	mov	r20, r22
 706:	4f 70       	andi	r20, 0x0F	; 15
 708:	40 5d       	subi	r20, 0xD0	; 208
 70a:	4a 33       	cpi	r20, 0x3A	; 58
 70c:	18 f0       	brcs	.+6      	; 0x714 <__ultoa_invert+0x7c>
 70e:	49 5d       	subi	r20, 0xD9	; 217
 710:	31 fd       	sbrc	r19, 1
 712:	40 52       	subi	r20, 0x20	; 32
 714:	41 93       	st	Z+, r20
 716:	02 d0       	rcall	.+4      	; 0x71c <__ultoa_invert+0x84>
 718:	a9 f7       	brne	.-22     	; 0x704 <__ultoa_invert+0x6c>
 71a:	ea cf       	rjmp	.-44     	; 0x6f0 <__ultoa_invert+0x58>
 71c:	b4 e0       	ldi	r27, 0x04	; 4
 71e:	a6 95       	lsr	r26
 720:	97 95       	ror	r25
 722:	87 95       	ror	r24
 724:	77 95       	ror	r23
 726:	67 95       	ror	r22
 728:	ba 95       	dec	r27
 72a:	c9 f7       	brne	.-14     	; 0x71e <__ultoa_invert+0x86>
 72c:	00 97       	sbiw	r24, 0x00	; 0
 72e:	61 05       	cpc	r22, r1
 730:	71 05       	cpc	r23, r1
 732:	08 95       	ret
 734:	9b 01       	movw	r18, r22
 736:	ac 01       	movw	r20, r24
 738:	0a 2e       	mov	r0, r26
 73a:	06 94       	lsr	r0
 73c:	57 95       	ror	r21
 73e:	47 95       	ror	r20
 740:	37 95       	ror	r19
 742:	27 95       	ror	r18
 744:	ba 95       	dec	r27
 746:	c9 f7       	brne	.-14     	; 0x73a <__ultoa_invert+0xa2>
 748:	62 0f       	add	r22, r18
 74a:	73 1f       	adc	r23, r19
 74c:	84 1f       	adc	r24, r20
 74e:	95 1f       	adc	r25, r21
 750:	a0 1d       	adc	r26, r0
 752:	08 95       	ret

00000754 <__prologue_saves__>:
 754:	2f 92       	push	r2
 756:	3f 92       	push	r3
 758:	4f 92       	push	r4
 75a:	5f 92       	push	r5
 75c:	6f 92       	push	r6
 75e:	7f 92       	push	r7
 760:	8f 92       	push	r8
 762:	9f 92       	push	r9
 764:	af 92       	push	r10
 766:	bf 92       	push	r11
 768:	cf 92       	push	r12
 76a:	df 92       	push	r13
 76c:	ef 92       	push	r14
 76e:	ff 92       	push	r15
 770:	0f 93       	push	r16
 772:	1f 93       	push	r17
 774:	cf 93       	push	r28
 776:	df 93       	push	r29
 778:	cd b7       	in	r28, 0x3d	; 61
 77a:	de b7       	in	r29, 0x3e	; 62
 77c:	ca 1b       	sub	r28, r26
 77e:	db 0b       	sbc	r29, r27
 780:	0f b6       	in	r0, 0x3f	; 63
 782:	f8 94       	cli
 784:	de bf       	out	0x3e, r29	; 62
 786:	0f be       	out	0x3f, r0	; 63
 788:	cd bf       	out	0x3d, r28	; 61
 78a:	09 94       	ijmp

0000078c <__epilogue_restores__>:
 78c:	2a 88       	ldd	r2, Y+18	; 0x12
 78e:	39 88       	ldd	r3, Y+17	; 0x11
 790:	48 88       	ldd	r4, Y+16	; 0x10
 792:	5f 84       	ldd	r5, Y+15	; 0x0f
 794:	6e 84       	ldd	r6, Y+14	; 0x0e
 796:	7d 84       	ldd	r7, Y+13	; 0x0d
 798:	8c 84       	ldd	r8, Y+12	; 0x0c
 79a:	9b 84       	ldd	r9, Y+11	; 0x0b
 79c:	aa 84       	ldd	r10, Y+10	; 0x0a
 79e:	b9 84       	ldd	r11, Y+9	; 0x09
 7a0:	c8 84       	ldd	r12, Y+8	; 0x08
 7a2:	df 80       	ldd	r13, Y+7	; 0x07
 7a4:	ee 80       	ldd	r14, Y+6	; 0x06
 7a6:	fd 80       	ldd	r15, Y+5	; 0x05
 7a8:	0c 81       	ldd	r16, Y+4	; 0x04
 7aa:	1b 81       	ldd	r17, Y+3	; 0x03
 7ac:	aa 81       	ldd	r26, Y+2	; 0x02
 7ae:	b9 81       	ldd	r27, Y+1	; 0x01
 7b0:	ce 0f       	add	r28, r30
 7b2:	d1 1d       	adc	r29, r1
 7b4:	0f b6       	in	r0, 0x3f	; 63
 7b6:	f8 94       	cli
 7b8:	de bf       	out	0x3e, r29	; 62
 7ba:	0f be       	out	0x3f, r0	; 63
 7bc:	cd bf       	out	0x3d, r28	; 61
 7be:	ed 01       	movw	r28, r26
 7c0:	08 95       	ret

000007c2 <_exit>:
 7c2:	f8 94       	cli

000007c4 <__stop_program>:
 7c4:	ff cf       	rjmp	.-2      	; 0x7c4 <__stop_program>
