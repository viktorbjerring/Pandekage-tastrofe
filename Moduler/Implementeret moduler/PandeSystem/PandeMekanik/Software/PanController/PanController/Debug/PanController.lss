
PanController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000f46  00000fda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  00800102  00800102  00000fdc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000100c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000108d  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000965  00000000  00000000  000021c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000af6  00000000  00000000  00002b26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c0  00000000  00000000  0000361c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000878  00000000  00000000  000038dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000634  00000000  00000000  00004154  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004788  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 c1 03 	jmp	0x782	; 0x782 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e4       	ldi	r30, 0x46	; 70
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 32       	cpi	r26, 0x29	; 41
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 16 05 	call	0xa2c	; 0xa2c <main>
  9e:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_SLAVE_sendBit>:

static void I2C_SLAVE_sendBit(char bit)
{
	//Workaround implementer so ack-bit can be send without the toSend buffer is lost.
	//If data buffer is already updated the toSend buffer is temporarily stored.
	if(I2C_SLAVE_dataReady == 1)
  a6:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <I2C_SLAVE_dataReady>
  aa:	91 30       	cpi	r25, 0x01	; 1
  ac:	41 f4       	brne	.+16     	; 0xbe <I2C_SLAVE_sendBit+0x18>
	{
		//Saves  toSend in temporary buffer.
		I2C_SLAVE_tempSave = I2C_SLAVE_toSend;
  ae:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <I2C_SLAVE_toSend>
  b2:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <I2C_SLAVE_tempSave>
		//Sets data ready to 2 to indicate that the send buffer should be reverted back to the temporary buffer after sending.
		I2C_SLAVE_dataReady = 2;
  b6:	92 e0       	ldi	r25, 0x02	; 2
  b8:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <I2C_SLAVE_dataReady>
  bc:	03 c0       	rjmp	.+6      	; 0xc4 <I2C_SLAVE_sendBit+0x1e>
	}
	else
	{
		//If the data buffer isn't set, then there is no need to store anything in the temporary buffer.
		I2C_SLAVE_dataReady = 1;
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <I2C_SLAVE_dataReady>
	}
	//Only one bit should be send, therefore bit number 7 is set high and have sended
	//is set to 7, so the byte sending functionality can be utilized for sending only one bit.
	I2C_SLAVE_toSend = bit << 7;
  c4:	87 95       	ror	r24
  c6:	88 27       	eor	r24, r24
  c8:	87 95       	ror	r24
  ca:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <I2C_SLAVE_toSend>
	I2C_SLAVE_haveSended = 7;
  ce:	87 e0       	ldi	r24, 0x07	; 7
  d0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <I2C_SLAVE_haveSended>
  d4:	08 95       	ret

000000d6 <I2C_SLAVE_beginSend>:
}

static void I2C_SLAVE_beginSend()
{
	//sending bits should be updated on a falling edge. SCL int trigger is changed accordingly.
	I2C_SLAVE_SCL_FALLING();
  d6:	e9 e6       	ldi	r30, 0x69	; 105
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	80 83       	st	Z, r24
  e0:	80 81       	ld	r24, Z
  e2:	8e 7f       	andi	r24, 0xFE	; 254
  e4:	80 83       	st	Z, r24
	//If the temporary buffer is used dataReady is set to 3, to indicate that sending has begun and
	//that the buffer should be updated.
	if(I2C_SLAVE_dataReady == 2)
  e6:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <I2C_SLAVE_dataReady>
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	21 f4       	brne	.+8      	; 0xf6 <I2C_SLAVE_beginSend+0x20>
		I2C_SLAVE_dataReady = 3;
  ee:	83 e0       	ldi	r24, 0x03	; 3
  f0:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <I2C_SLAVE_dataReady>
  f4:	08 95       	ret
	else
	//If the temporary buffer isn't used, then it is reverted to show that there is no new data in the toSend buffer. 
		I2C_SLAVE_dataReady = 0;
  f6:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <I2C_SLAVE_dataReady>
  fa:	08 95       	ret

000000fc <setMotorPWM>:

static volatile uint16_t curr_time = 0;	
static volatile bool motor_flipping = MOTOR1;

static void setMotorPWM(uint8_t PWM, bool motor) {
	if (motor == MOTOR1) {
  fc:	61 11       	cpse	r22, r1
  fe:	1f c0       	rjmp	.+62     	; 0x13e <setMotorPWM+0x42>
		OCR0A = (TIMER0_TOP - ceil(((TIMER0_TOP/100) * (PWM > 100? 100 : PWM))));
 100:	85 36       	cpi	r24, 0x65	; 101
 102:	58 f4       	brcc	.+22     	; 0x11a <setMotorPWM+0x1e>
 104:	68 2f       	mov	r22, r24
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	66 0f       	add	r22, r22
 10a:	77 1f       	adc	r23, r23
 10c:	07 2e       	mov	r0, r23
 10e:	00 0c       	add	r0, r0
 110:	88 0b       	sbc	r24, r24
 112:	99 0b       	sbc	r25, r25
 114:	0e 94 67 06 	call	0xcce	; 0xcce <__floatsisf>
 118:	04 c0       	rjmp	.+8      	; 0x122 <setMotorPWM+0x26>
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	88 e4       	ldi	r24, 0x48	; 72
 120:	93 e4       	ldi	r25, 0x43	; 67
 122:	0e 94 1f 06 	call	0xc3e	; 0xc3e <ceil>
 126:	9b 01       	movw	r18, r22
 128:	ac 01       	movw	r20, r24
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	8f e7       	ldi	r24, 0x7F	; 127
 130:	93 e4       	ldi	r25, 0x43	; 67
 132:	0e 94 b2 05 	call	0xb64	; 0xb64 <__subsf3>
 136:	0e 94 36 06 	call	0xc6c	; 0xc6c <__fixunssfsi>
 13a:	67 bd       	out	0x27, r22	; 39
 13c:	08 95       	ret
	}
	else {
		OCR0B = (TIMER0_TOP - ceil(((TIMER0_TOP/100) * (PWM > 100? 100 : PWM))));
 13e:	85 36       	cpi	r24, 0x65	; 101
 140:	58 f4       	brcc	.+22     	; 0x158 <setMotorPWM+0x5c>
 142:	68 2f       	mov	r22, r24
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	66 0f       	add	r22, r22
 148:	77 1f       	adc	r23, r23
 14a:	07 2e       	mov	r0, r23
 14c:	00 0c       	add	r0, r0
 14e:	88 0b       	sbc	r24, r24
 150:	99 0b       	sbc	r25, r25
 152:	0e 94 67 06 	call	0xcce	; 0xcce <__floatsisf>
 156:	04 c0       	rjmp	.+8      	; 0x160 <setMotorPWM+0x64>
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	88 e4       	ldi	r24, 0x48	; 72
 15e:	93 e4       	ldi	r25, 0x43	; 67
 160:	0e 94 1f 06 	call	0xc3e	; 0xc3e <ceil>
 164:	9b 01       	movw	r18, r22
 166:	ac 01       	movw	r20, r24
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	8f e7       	ldi	r24, 0x7F	; 127
 16e:	93 e4       	ldi	r25, 0x43	; 67
 170:	0e 94 b2 05 	call	0xb64	; 0xb64 <__subsf3>
 174:	0e 94 36 06 	call	0xc6c	; 0xc6c <__fixunssfsi>
 178:	68 bd       	out	0x28, r22	; 40
 17a:	08 95       	ret

0000017c <init_digital_comm>:
#define DIGITAL_PROTOCOL_vect	PCINT0_vect

void init_digital_comm() {
	//Pin setup
	//Set Heat on/off as input and PANCAKE_DONE as output
	DDRB &= ~(HEAT_ON_OFF_PIN);
 17c:	20 98       	cbi	0x04, 0	; 4
	DDRB |= PANCAKE_DONE_PIN;	
 17e:	24 9a       	sbi	0x04, 4	; 4
	
	PORTB &= ~(PANCAKE_DONE_PIN | HEAT_ON_OFF_PIN);		//Set PANCAKE_DONE line to low and no pullup for heat on/off
 180:	85 b1       	in	r24, 0x05	; 5
 182:	8e 7e       	andi	r24, 0xEE	; 238
 184:	85 b9       	out	0x05, r24	; 5
	
	//Interrupt setup
	PCICR |= PCIE0;						//Enable pin change interrupt 0
 186:	e8 e6       	ldi	r30, 0x68	; 104
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	80 83       	st	Z, r24
	PCMSK0 |=  (1 << PCINT0);			//Set pin B0 as an interrupt pin
 18e:	eb e6       	ldi	r30, 0x6B	; 107
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	81 60       	ori	r24, 0x01	; 1
 196:	80 83       	st	Z, r24
 198:	08 95       	ret

0000019a <pancakeDone>:
	
}

void pancakeDone(){
	
	if (pancake_done) {
 19a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pancake_done>
 19e:	88 23       	and	r24, r24
 1a0:	21 f0       	breq	.+8      	; 0x1aa <pancakeDone+0x10>
		PORTB |= PANCAKE_DONE_PIN;
 1a2:	2c 9a       	sbi	0x05, 4	; 5
		pancake_done = false;
 1a4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pancake_done>
 1a8:	08 95       	ret
	}
	else {
		PORTB &= ~(PANCAKE_DONE_PIN);
 1aa:	2c 98       	cbi	0x05, 4	; 5
 1ac:	08 95       	ret

000001ae <__vector_3>:
		heat_on_ctrl = !heat_on_ctrl;		//Toggle the heat control variable
	}
}

//PAN_ON/OFF interrupt
ISR(DIGITAL_PROTOCOL_vect){
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
	}

}

static void turnOnPans() {
	if(PINB & HEAT_ON_OFF_PIN){
 1bc:	18 9b       	sbis	0x03, 0	; 3
 1be:	06 c0       	rjmp	.+12     	; 0x1cc <__vector_3+0x1e>
		heat_on_ctrl = !heat_on_ctrl;		//Toggle the heat control variable
 1c0:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <heat_on_ctrl>
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	89 27       	eor	r24, r25
 1c8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <heat_on_ctrl>
}

//PAN_ON/OFF interrupt
ISR(DIGITAL_PROTOCOL_vect){
	turnOnPans();
}
 1cc:	9f 91       	pop	r25
 1ce:	8f 91       	pop	r24
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <init_regulation>:


void init_regulation(){
	
	//Setup ADC
	PRR &= ~(1 << PRADC);	//Power manegment enabling of adc
 1da:	e4 e6       	ldi	r30, 0x64	; 100
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	8e 7f       	andi	r24, 0xFE	; 254
 1e2:	80 83       	st	Z, r24
	DDRC &= 0xFC;			//Port C 0 and 1 is input
 1e4:	87 b1       	in	r24, 0x07	; 7
 1e6:	8c 7f       	andi	r24, 0xFC	; 252
 1e8:	87 b9       	out	0x07, r24	; 7
	ADMUX =	(1 << REFS0);	//REF = VCC, ADC0 selected
 1ea:	80 e4       	ldi	r24, 0x40	; 64
 1ec:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	
	ADCSRA |= (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);	//Enable ADC, Enable ADC convertion interrupt , prescaler = 128
 1f0:	ea e7       	ldi	r30, 0x7A	; 122
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	8f 68       	ori	r24, 0x8F	; 143
 1f8:	80 83       	st	Z, r24
	
	//Setup for power PWM using OCR1B and OCR1A
	DDRB |= (1 << PORTB2) | (1 << PORTB1);	//Output for power PWM at PB2 and PB1
 1fa:	84 b1       	in	r24, 0x04	; 4
 1fc:	86 60       	ori	r24, 0x06	; 6
 1fe:	84 b9       	out	0x04, r24	; 4
	
	OCR1A = TIMER_1HZ_TOP;			//Set PWM level to 0 for pan1
 200:	83 e2       	ldi	r24, 0x23	; 35
 202:	94 ef       	ldi	r25, 0xF4	; 244
 204:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 208:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	OCR1B = TIMER_1HZ_TOP;			//Set PWM level to 0 for pan2
 20c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 210:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
	
	//OCR1A and B is set on compare match and cleared at bottom (0)
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1);
 214:	a0 e8       	ldi	r26, 0x80	; 128
 216:	b0 e0       	ldi	r27, 0x00	; 0
 218:	8c 91       	ld	r24, X
 21a:	80 6a       	ori	r24, 0xA0	; 160
 21c:	8c 93       	st	X, r24
	
	//Start the regulation loop
	ADCSRA |= (1 << ADSC);
 21e:	80 81       	ld	r24, Z
 220:	80 64       	ori	r24, 0x40	; 64
 222:	80 83       	st	Z, r24
 224:	08 95       	ret

00000226 <handle_regulation>:

static volatile bool curr_pan = PAN1;

static volatile bool convertion_done = false;

void handle_regulation() {
 226:	cf 92       	push	r12
 228:	df 92       	push	r13
 22a:	ef 92       	push	r14
 22c:	ff 92       	push	r15
	
	if (convertion_done) {
 22e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <convertion_done>
 232:	88 23       	and	r24, r24
 234:	09 f4       	brne	.+2      	; 0x238 <handle_regulation+0x12>
 236:	82 c0       	rjmp	.+260    	; 0x33c <handle_regulation+0x116>
}

static uint16_t readHeatLevel(){
	
	//Read ADCL first - it is important
	uint8_t temp = ADCL;
 238:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	return ((ADCH & 0x03) << 8) + temp;
 23c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 240:	83 70       	andi	r24, 0x03	; 3
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	98 2f       	mov	r25, r24
 246:	88 27       	eor	r24, r24
 248:	82 0f       	add	r24, r18
 24a:	91 1d       	adc	r25, r1
	if (convertion_done) {
	
		uint16_t temp = readHeatLevel();
	
		//Check heat level
		if (temp >= TRIGGER_LOW && temp <= TRIGGER_HIGH){
 24c:	9c 01       	movw	r18, r24
 24e:	2c 5a       	subi	r18, 0xAC	; 172
 250:	33 40       	sbci	r19, 0x03	; 3
 252:	2d 30       	cpi	r18, 0x0D	; 13
 254:	31 05       	cpc	r19, r1
 256:	20 f4       	brcc	.+8      	; 0x260 <handle_regulation+0x3a>
			heat_ok = true;
 258:	21 e0       	ldi	r18, 0x01	; 1
 25a:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <heat_ok>
 25e:	02 c0       	rjmp	.+4      	; 0x264 <handle_regulation+0x3e>
		}
		else {
			heat_ok = false;
 260:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <heat_ok>
#define KI		((double) 0.001)
#define DT		((double)((128*13)/F_CPU)) //Time for single convertion ~ 1/16000000/(128*13)	(one convertion = 13 clock cyckles)

static void regulate(uint16_t temp) {
	//If no heating control - turn off the pans
	if (!heat_on_ctrl)
 264:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <heat_on_ctrl>
 268:	21 11       	cpse	r18, r1
 26a:	1a c0       	rjmp	.+52     	; 0x2a0 <handle_regulation+0x7a>
	{
		integral = 0;
 26c:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <integral>
 270:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <integral+0x1>
 274:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <integral+0x2>
 278:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <integral+0x3>
	}
}

static void setPWMLevel(uint16_t PWM_level){	//Sets the PWM level for the heating
	
	if (curr_pan)
 27c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <curr_pan>
 280:	88 23       	and	r24, r24
 282:	39 f0       	breq	.+14     	; 0x292 <handle_regulation+0x6c>
		OCR1B = ceil(TIMER_1HZ_TOP - ((TIMER_1HZ_TOP/100) * (PWM_level > 100 ? 100 : PWM_level)));
 284:	83 e2       	ldi	r24, 0x23	; 35
 286:	94 ef       	ldi	r25, 0xF4	; 244
 288:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 28c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 290:	43 c0       	rjmp	.+134    	; 0x318 <handle_regulation+0xf2>
	else
		OCR1A = ceil(TIMER_1HZ_TOP - ((TIMER_1HZ_TOP/100) * (PWM_level > 100 ? 100 : PWM_level)));
 292:	83 e2       	ldi	r24, 0x23	; 35
 294:	94 ef       	ldi	r25, 0xF4	; 244
 296:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 29a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 29e:	3c c0       	rjmp	.+120    	; 0x318 <handle_regulation+0xf2>
		setPWMLevel(0);
	}
	else {
		//Calculate the values for the PI controller
		int16_t error = OPTIMUM_TEMP - temp;
		integral += error*DT;
 2a0:	c0 90 23 01 	lds	r12, 0x0123	; 0x800123 <integral>
 2a4:	d0 90 24 01 	lds	r13, 0x0124	; 0x800124 <integral+0x1>
 2a8:	e0 90 25 01 	lds	r14, 0x0125	; 0x800125 <integral+0x2>
 2ac:	f0 90 26 01 	lds	r15, 0x0126	; 0x800126 <integral+0x3>
 2b0:	62 eb       	ldi	r22, 0xB2	; 178
 2b2:	73 e0       	ldi	r23, 0x03	; 3
 2b4:	68 1b       	sub	r22, r24
 2b6:	79 0b       	sbc	r23, r25
 2b8:	07 2e       	mov	r0, r23
 2ba:	00 0c       	add	r0, r0
 2bc:	88 0b       	sbc	r24, r24
 2be:	99 0b       	sbc	r25, r25
 2c0:	0e 94 67 06 	call	0xcce	; 0xcce <__floatsisf>
 2c4:	20 e0       	ldi	r18, 0x00	; 0
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	a9 01       	movw	r20, r18
 2ca:	0e 94 34 07 	call	0xe68	; 0xe68 <__mulsf3>
 2ce:	a7 01       	movw	r20, r14
 2d0:	96 01       	movw	r18, r12
 2d2:	0e 94 b3 05 	call	0xb66	; 0xb66 <__addsf3>
 2d6:	60 93 23 01 	sts	0x0123, r22	; 0x800123 <integral>
 2da:	70 93 24 01 	sts	0x0124, r23	; 0x800124 <integral+0x1>
 2de:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <integral+0x2>
 2e2:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <integral+0x3>
		
		//Calculate the output
		int16_t output = error*KP + integral*KI;
 2e6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <integral>
 2ea:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <integral+0x1>
 2ee:	a0 91 25 01 	lds	r26, 0x0125	; 0x800125 <integral+0x2>
 2f2:	b0 91 26 01 	lds	r27, 0x0126	; 0x800126 <integral+0x3>
	}
}

static void setPWMLevel(uint16_t PWM_level){	//Sets the PWM level for the heating
	
	if (curr_pan)
 2f6:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <curr_pan>
 2fa:	88 23       	and	r24, r24
 2fc:	39 f0       	breq	.+14     	; 0x30c <handle_regulation+0xe6>
		OCR1B = ceil(TIMER_1HZ_TOP - ((TIMER_1HZ_TOP/100) * (PWM_level > 100 ? 100 : PWM_level)));
 2fe:	83 e4       	ldi	r24, 0x43	; 67
 300:	9a e7       	ldi	r25, 0x7A	; 122
 302:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 306:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 30a:	06 c0       	rjmp	.+12     	; 0x318 <handle_regulation+0xf2>
	else
		OCR1A = ceil(TIMER_1HZ_TOP - ((TIMER_1HZ_TOP/100) * (PWM_level > 100 ? 100 : PWM_level)));
 30c:	83 e4       	ldi	r24, 0x43	; 67
 30e:	9a e7       	ldi	r25, 0x7A	; 122
 310:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 314:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
		}
	
		regulate(temp);
	
		//Change pan
		curr_pan = !curr_pan;
 318:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <curr_pan>
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	98 27       	eor	r25, r24
 320:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <curr_pan>
	
		ADMUX ^= 0x01;		//Change between ADC0 and ADC1
 324:	ec e7       	ldi	r30, 0x7C	; 124
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	90 81       	ld	r25, Z
 32a:	89 27       	eor	r24, r25
 32c:	80 83       	st	Z, r24
		
		convertion_done = false;
 32e:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <convertion_done>
	
		//Restart conversion
		ADCSRA |= (1 << ADSC);
 332:	ea e7       	ldi	r30, 0x7A	; 122
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	80 64       	ori	r24, 0x40	; 64
 33a:	80 83       	st	Z, r24
	}
}
 33c:	ff 90       	pop	r15
 33e:	ef 90       	pop	r14
 340:	df 90       	pop	r13
 342:	cf 90       	pop	r12
 344:	08 95       	ret

00000346 <__vector_21>:
	}
}

//Regulation loop - not time critical
ISR(ADC_vect)
{
 346:	1f 92       	push	r1
 348:	0f 92       	push	r0
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	0f 92       	push	r0
 34e:	11 24       	eor	r1, r1
 350:	8f 93       	push	r24
	convertion_done = true;	
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <convertion_done>
}
 358:	8f 91       	pop	r24
 35a:	0f 90       	pop	r0
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	0f 90       	pop	r0
 360:	1f 90       	pop	r1
 362:	18 95       	reti

00000364 <I2C_SLAVE_checkData>:
// ## Definitions bellow ##

volatile bool I2C_SLAVE_checkData()
{
	//Checks if all data has been read.
	if(I2C_SLAVE_first != I2C_SLAVE_last || I2C_SLAVE_full)
 364:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <I2C_SLAVE_first>
 368:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <I2C_SLAVE_last>
 36c:	98 13       	cpse	r25, r24
 36e:	03 c0       	rjmp	.+6      	; 0x376 <I2C_SLAVE_checkData+0x12>
 370:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <I2C_SLAVE_full>
 374:	08 95       	ret
	{
		return true;
 376:	81 e0       	ldi	r24, 0x01	; 1
	}
	return false;
}
 378:	08 95       	ret

0000037a <I2C_SLAVE_sendData>:

void I2C_SLAVE_sendData(char data)
{
	//Sets send data to send.
	I2C_SLAVE_toSend = data;
 37a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <I2C_SLAVE_toSend>
	//Sets number of bits sended to 0.
	I2C_SLAVE_haveSended = 0;
 37e:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <I2C_SLAVE_haveSended>
	//Indicates that data is needed to be send.
	I2C_SLAVE_dataReady = 1;
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <I2C_SLAVE_dataReady>
	
	
	
	//If begin hold is sat, then sending will begin imidiatly.
	if(I2C_SLAVE_beginHold)
 388:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <I2C_SLAVE_beginHold>
 38c:	88 23       	and	r24, r24
 38e:	09 f4       	brne	.+2      	; 0x392 <I2C_SLAVE_sendData+0x18>
 390:	4a c0       	rjmp	.+148    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	{
		//Resets begin hold
		I2C_SLAVE_beginHold = false;
 392:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <I2C_SLAVE_beginHold>
		//Disables SDA interrupt to avoid stop bit triggering if toSind most significant is 1.
		I2C_SLAVE_SDA_INT_ENAB(0);
 396:	e8 e6       	ldi	r30, 0x68	; 104
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	80 81       	ld	r24, Z
 39c:	8b 7f       	andi	r24, 0xFB	; 251
 39e:	80 83       	st	Z, r24
		//Sets the line to most significant bit.
		I2C_SLAVE_DDR = I2C_SLAVE_SET_BIT(I2C_SLAVE_PORT, I2C_SLAVE_SDA, ~I2C_SLAVE_toSend, 7);
 3a0:	2b b1       	in	r18, 0x0b	; 11
 3a2:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <I2C_SLAVE_toSend>
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	80 95       	com	r24
 3aa:	90 95       	com	r25
 3ac:	88 0f       	add	r24, r24
 3ae:	89 2f       	mov	r24, r25
 3b0:	88 1f       	adc	r24, r24
 3b2:	99 0b       	sbc	r25, r25
 3b4:	82 95       	swap	r24
 3b6:	92 95       	swap	r25
 3b8:	90 7f       	andi	r25, 0xF0	; 240
 3ba:	98 27       	eor	r25, r24
 3bc:	80 7f       	andi	r24, 0xF0	; 240
 3be:	98 27       	eor	r25, r24
 3c0:	80 71       	andi	r24, 0x10	; 16
 3c2:	92 2f       	mov	r25, r18
 3c4:	9f 7e       	andi	r25, 0xEF	; 239
 3c6:	89 0f       	add	r24, r25
 3c8:	8a b9       	out	0x0a, r24	; 10
		I2C_SLAVE_PORT = I2C_SLAVE_SET_BIT(I2C_SLAVE_PORT, I2C_SLAVE_SDA, I2C_SLAVE_toSend, 7);
 3ca:	2b b1       	in	r18, 0x0b	; 11
 3cc:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <I2C_SLAVE_toSend>
 3d0:	88 1f       	adc	r24, r24
 3d2:	88 27       	eor	r24, r24
 3d4:	88 1f       	adc	r24, r24
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	82 95       	swap	r24
 3da:	92 95       	swap	r25
 3dc:	90 7f       	andi	r25, 0xF0	; 240
 3de:	98 27       	eor	r25, r24
 3e0:	80 7f       	andi	r24, 0xF0	; 240
 3e2:	98 27       	eor	r25, r24
 3e4:	80 71       	andi	r24, 0x10	; 16
 3e6:	92 2f       	mov	r25, r18
 3e8:	9f 7e       	andi	r25, 0xEF	; 239
 3ea:	89 0f       	add	r24, r25
 3ec:	8b b9       	out	0x0b, r24	; 11
		//Sets that first bit is sended.
		I2C_SLAVE_haveSended++;
 3ee:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <I2C_SLAVE_haveSended>
 3f2:	8f 5f       	subi	r24, 0xFF	; 255
 3f4:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <I2C_SLAVE_haveSended>
		//Waits until SDA reads the correct bit before enabling interrupt agian.
		while(((I2C_SLAVE_toSend>>7)<<I2C_SLAVE_SDA) != (I2C_SLAVE_PIN & 1 << I2C_SLAVE_SDA)){}
 3f8:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <I2C_SLAVE_toSend>
 3fc:	29 b1       	in	r18, 0x09	; 9
 3fe:	88 1f       	adc	r24, r24
 400:	88 27       	eor	r24, r24
 402:	88 1f       	adc	r24, r24
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	82 95       	swap	r24
 408:	92 95       	swap	r25
 40a:	90 7f       	andi	r25, 0xF0	; 240
 40c:	98 27       	eor	r25, r24
 40e:	80 7f       	andi	r24, 0xF0	; 240
 410:	98 27       	eor	r25, r24
 412:	20 71       	andi	r18, 0x10	; 16
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	82 17       	cp	r24, r18
 418:	93 07       	cpc	r25, r19
 41a:	71 f7       	brne	.-36     	; 0x3f8 <I2C_SLAVE_sendData+0x7e>
		//enables interrupt.
		I2C_SLAVE_SDA_INT_ENAB(1);
 41c:	e8 e6       	ldi	r30, 0x68	; 104
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	80 81       	ld	r24, Z
 422:	84 60       	ori	r24, 0x04	; 4
 424:	80 83       	st	Z, r24
	}
	I2C_SLAVE_DDR &= ~(1 << I2C_SLAVE_SCL);
 426:	52 98       	cbi	0x0a, 2	; 10
	I2C_SLAVE_PORT |= 1 << I2C_SLAVE_SCL;
 428:	5a 9a       	sbi	0x0b, 2	; 11
 42a:	08 95       	ret

0000042c <I2C_SLAVE_getData>:
}

I2C_commands_t I2C_SLAVE_getData()
{
	//Waits for data to have arrived.
	while(!I2C_SLAVE_checkData());
 42c:	0e 94 b2 01 	call	0x364	; 0x364 <I2C_SLAVE_checkData>
 430:	88 23       	and	r24, r24
 432:	e1 f3       	breq	.-8      	; 0x42c <I2C_SLAVE_getData>
}

static char I2C_SLAVE_readFirst()
{
	//If buffer is not empty then it will read the buffer.
	if(I2C_SLAVE_checkData())
 434:	0e 94 b2 01 	call	0x364	; 0x364 <I2C_SLAVE_checkData>
 438:	88 23       	and	r24, r24
 43a:	b9 f0       	breq	.+46     	; 0x46a <I2C_SLAVE_getData+0x3e>
	{
		//After the first is read, then the buffer isn't full anymore.
		if(I2C_SLAVE_full)
 43c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <I2C_SLAVE_full>
 440:	81 11       	cpse	r24, r1
		{
			I2C_SLAVE_full = false;
 442:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <I2C_SLAVE_full>
}

static unsigned char I2C_SLAVE_inc(volatile unsigned char * num)
{
	//Save return value.
	unsigned char temp = *num;
 446:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <I2C_SLAVE_first>

	//Incrementing number 
	(*num)++;
 44a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <I2C_SLAVE_first>
 44e:	8f 5f       	subi	r24, 0xFF	; 255
 450:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <I2C_SLAVE_first>
	
	//If number is higher than receive buffer length then its reset to 0.
	if(*num >= I2C_SLAVE_BUFFER_LENGTH)
 454:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <I2C_SLAVE_first>
 458:	8a 30       	cpi	r24, 0x0A	; 10
 45a:	10 f0       	brcs	.+4      	; 0x460 <I2C_SLAVE_getData+0x34>
	{
		*num = 0;
 45c:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <I2C_SLAVE_first>
		if(I2C_SLAVE_full)
		{
			I2C_SLAVE_full = false;
		}
		//Returns the buffer en increments first by 1.
		return I2C_SLAVE_Buffer[I2C_SLAVE_inc(&I2C_SLAVE_first)];
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	e4 5f       	subi	r30, 0xF4	; 244
 464:	fe 4f       	sbci	r31, 0xFE	; 254
 466:	80 81       	ld	r24, Z
 468:	08 95       	ret
	}
	return 0;
 46a:	80 e0       	ldi	r24, 0x00	; 0
{
	//Waits for data to have arrived.
	while(!I2C_SLAVE_checkData());
	//Returns first data.
	return (I2C_commands_t)I2C_SLAVE_readFirst();
}
 46c:	08 95       	ret

0000046e <I2C_SLAVE_init>:

void I2C_SLAVE_init()
{
	//Sets SCL interrupt to rising edge trigger.
	I2C_SLAVE_SCL_RISING();
 46e:	e9 e6       	ldi	r30, 0x69	; 105
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	80 81       	ld	r24, Z
 474:	82 60       	ori	r24, 0x02	; 2
 476:	80 83       	st	Z, r24
 478:	80 81       	ld	r24, Z
 47a:	81 60       	ori	r24, 0x01	; 1
 47c:	80 83       	st	Z, r24

	//Sets SDA interrupt up.
	I2C_SLAVE_SDA_INT_INIT();
 47e:	e8 e6       	ldi	r30, 0x68	; 104
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	80 61       	ori	r24, 0x10	; 16
 486:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>
	
	//Enables both interrupts.
	I2C_SLAVE_SDA_INT_ENAB(1);
 48a:	80 81       	ld	r24, Z
 48c:	84 60       	ori	r24, 0x04	; 4
 48e:	80 83       	st	Z, r24
	I2C_SLAVE_SCL_INT_ENAB(1);
 490:	e8 9a       	sbi	0x1d, 0	; 29
	
	//Sets up ports to inputs with pull up.
	I2C_SLAVE_DDR &= ~(1 << I2C_SLAVE_SDA | 1 << I2C_SLAVE_SCL);
 492:	8a b1       	in	r24, 0x0a	; 10
 494:	8b 7e       	andi	r24, 0xEB	; 235
 496:	8a b9       	out	0x0a, r24	; 10
	I2C_SLAVE_PORT |= (1 << I2C_SLAVE_SDA | 1 << I2C_SLAVE_SCL);
 498:	8b b1       	in	r24, 0x0b	; 11
 49a:	84 61       	ori	r24, 0x14	; 20
 49c:	8b b9       	out	0x0b, r24	; 11
 49e:	08 95       	ret

000004a0 <__vector_1>:
	return 0;
}

//SCL interrupt for handling data transfer.
ISR(I2C_SLAVE_SCL_vect)
{
 4a0:	1f 92       	push	r1
 4a2:	0f 92       	push	r0
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	0f 92       	push	r0
 4a8:	11 24       	eor	r1, r1
 4aa:	2f 93       	push	r18
 4ac:	3f 93       	push	r19
 4ae:	4f 93       	push	r20
 4b0:	5f 93       	push	r21
 4b2:	6f 93       	push	r22
 4b4:	7f 93       	push	r23
 4b6:	8f 93       	push	r24
 4b8:	9f 93       	push	r25
 4ba:	af 93       	push	r26
 4bc:	bf 93       	push	r27
 4be:	ef 93       	push	r30
 4c0:	ff 93       	push	r31
	//If start-bit received:
	if(I2C_SLAVE_startRecived)
 4c2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <I2C_SLAVE_startRecived>
 4c6:	88 23       	and	r24, r24
 4c8:	09 f4       	brne	.+2      	; 0x4cc <__vector_1+0x2c>
 4ca:	4a c1       	rjmp	.+660    	; 0x760 <__vector_1+0x2c0>
	{
		//If SCL is triggering on rising edge i.e. it's currently reading from SDA.
		if(I2C_SLAVE_SCL_IS_RISING())
 4cc:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 4d0:	83 70       	andi	r24, 0x03	; 3
 4d2:	83 30       	cpi	r24, 0x03	; 3
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <__vector_1+0x38>
 4d6:	af c0       	rjmp	.+350    	; 0x636 <__vector_1+0x196>
		{
			//If it just have been writing to SDA reset pull up to high.
			if(I2C_SLAVE_haveSended > 7)
 4d8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <I2C_SLAVE_haveSended>
 4dc:	88 30       	cpi	r24, 0x08	; 8
 4de:	40 f0       	brcs	.+16     	; 0x4f0 <__vector_1+0x50>
			{
				I2C_SLAVE_haveSended = 0;
 4e0:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <I2C_SLAVE_haveSended>
				I2C_SLAVE_DDR &= ~(1 << I2C_SLAVE_SDA | 1 << I2C_SLAVE_SCL);
 4e4:	8a b1       	in	r24, 0x0a	; 10
 4e6:	8b 7e       	andi	r24, 0xEB	; 235
 4e8:	8a b9       	out	0x0a, r24	; 10
				I2C_SLAVE_PORT |= (1 << I2C_SLAVE_SDA | 1 << I2C_SLAVE_SCL);
 4ea:	8b b1       	in	r24, 0x0b	; 11
 4ec:	84 61       	ori	r24, 0x14	; 20
 4ee:	8b b9       	out	0x0b, r24	; 11
			}
			//First 7 bits read Address.
			if(I2C_SLAVE_recevedBits < 7)
 4f0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <I2C_SLAVE_recevedBits>
 4f4:	87 30       	cpi	r24, 0x07	; 7
 4f6:	20 f5       	brcc	.+72     	; 0x540 <__vector_1+0xa0>
			{
				I2C_SLAVE_recevedAddr = I2C_SLAVE_SET_BIT(I2C_SLAVE_recevedAddr,6-I2C_SLAVE_recevedBits,I2C_SLAVE_PIN,I2C_SLAVE_SDA);
 4f8:	66 e0       	ldi	r22, 0x06	; 6
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	68 1b       	sub	r22, r24
 4fe:	71 09       	sbc	r23, r1
 500:	21 e0       	ldi	r18, 0x01	; 1
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	a9 01       	movw	r20, r18
 506:	06 2e       	mov	r0, r22
 508:	02 c0       	rjmp	.+4      	; 0x50e <__vector_1+0x6e>
 50a:	44 0f       	add	r20, r20
 50c:	55 1f       	adc	r21, r21
 50e:	0a 94       	dec	r0
 510:	e2 f7       	brpl	.-8      	; 0x50a <__vector_1+0x6a>
 512:	99 b1       	in	r25, 0x09	; 9
 514:	54 2f       	mov	r21, r20
 516:	50 95       	com	r21
 518:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <I2C_SLAVE_recevedAddr>
 51c:	52 23       	and	r21, r18
 51e:	92 95       	swap	r25
 520:	9f 70       	andi	r25, 0x0F	; 15
 522:	29 2f       	mov	r18, r25
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	02 c0       	rjmp	.+4      	; 0x52c <__vector_1+0x8c>
 528:	22 0f       	add	r18, r18
 52a:	33 1f       	adc	r19, r19
 52c:	6a 95       	dec	r22
 52e:	e2 f7       	brpl	.-8      	; 0x528 <__vector_1+0x88>
 530:	24 23       	and	r18, r20
 532:	25 0f       	add	r18, r21
 534:	20 93 21 01 	sts	0x0121, r18	; 0x800121 <I2C_SLAVE_recevedAddr>
				I2C_SLAVE_recevedBits++;
 538:	8f 5f       	subi	r24, 0xFF	; 255
 53a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <I2C_SLAVE_recevedBits>
 53e:	10 c1       	rjmp	.+544    	; 0x760 <__vector_1+0x2c0>
			}
			//If address matching:
			else if(I2C_SLAVE_recevedAddr == I2C_SLAVE_ADDR && I2C_SLAVE_recevedBits < 8)
 540:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <I2C_SLAVE_recevedAddr>
 544:	90 37       	cpi	r25, 0x70	; 112
 546:	09 f0       	breq	.+2      	; 0x54a <__vector_1+0xaa>
 548:	0b c1       	rjmp	.+534    	; 0x760 <__vector_1+0x2c0>
 54a:	88 30       	cpi	r24, 0x08	; 8
 54c:	b8 f4       	brcc	.+46     	; 0x57c <__vector_1+0xdc>
			{
				
				I2C_SLAVE_recevedBits++;
 54e:	8f 5f       	subi	r24, 0xFF	; 255
 550:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <I2C_SLAVE_recevedBits>
				//Read the readWrite bit.
				I2C_SLAVE_shouldWrite = I2C_SLAVE_SET_BIT(I2C_SLAVE_shouldWrite,0,I2C_SLAVE_PIN,I2C_SLAVE_SDA);
 554:	89 b1       	in	r24, 0x09	; 9
 556:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <I2C_SLAVE_shouldWrite>
 55a:	9e 7f       	andi	r25, 0xFE	; 254
 55c:	82 95       	swap	r24
 55e:	81 70       	andi	r24, 0x01	; 1
 560:	89 0f       	add	r24, r25
 562:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <I2C_SLAVE_shouldWrite>
				//If it should write, begin hold is set to true.
				if(I2C_SLAVE_shouldWrite)
 566:	88 23       	and	r24, r24
 568:	19 f0       	breq	.+6      	; 0x570 <__vector_1+0xd0>
				{
					//This indicates that the line should be hold right after ack i send.
					I2C_SLAVE_beginHold = true;
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <I2C_SLAVE_beginHold>
				}
				//Set buffer to ack-bit and begin sending.
				I2C_SLAVE_sendBit(0);
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_SLAVE_sendBit>
				I2C_SLAVE_beginSend();
 576:	0e 94 6b 00 	call	0xd6	; 0xd6 <I2C_SLAVE_beginSend>
 57a:	f2 c0       	rjmp	.+484    	; 0x760 <__vector_1+0x2c0>
			}
			else if(I2C_SLAVE_recevedAddr == I2C_SLAVE_ADDR && I2C_SLAVE_recevedBits < (17))
 57c:	81 31       	cpi	r24, 0x11	; 17
 57e:	08 f0       	brcs	.+2      	; 0x582 <__vector_1+0xe2>
 580:	ef c0       	rjmp	.+478    	; 0x760 <__vector_1+0x2c0>
			{
				//If read from master after ack-send if I2C_SLAVE_shouldWrite is false.
				I2C_SLAVE_recevedData = I2C_SLAVE_SET_BIT(I2C_SLAVE_recevedData,7-(I2C_SLAVE_recevedBits-8),I2C_SLAVE_PIN,I2C_SLAVE_SDA);
 582:	6f e0       	ldi	r22, 0x0F	; 15
 584:	70 e0       	ldi	r23, 0x00	; 0
 586:	68 1b       	sub	r22, r24
 588:	71 09       	sbc	r23, r1
 58a:	21 e0       	ldi	r18, 0x01	; 1
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	a9 01       	movw	r20, r18
 590:	06 2e       	mov	r0, r22
 592:	02 c0       	rjmp	.+4      	; 0x598 <__vector_1+0xf8>
 594:	44 0f       	add	r20, r20
 596:	55 1f       	adc	r21, r21
 598:	0a 94       	dec	r0
 59a:	e2 f7       	brpl	.-8      	; 0x594 <__vector_1+0xf4>
 59c:	99 b1       	in	r25, 0x09	; 9
 59e:	54 2f       	mov	r21, r20
 5a0:	50 95       	com	r21
 5a2:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <I2C_SLAVE_recevedData>
 5a6:	52 23       	and	r21, r18
 5a8:	92 95       	swap	r25
 5aa:	9f 70       	andi	r25, 0x0F	; 15
 5ac:	29 2f       	mov	r18, r25
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <__vector_1+0x116>
 5b2:	22 0f       	add	r18, r18
 5b4:	33 1f       	adc	r19, r19
 5b6:	6a 95       	dec	r22
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <__vector_1+0x112>
 5ba:	24 23       	and	r18, r20
 5bc:	25 0f       	add	r18, r21
 5be:	20 93 1b 01 	sts	0x011B, r18	; 0x80011b <I2C_SLAVE_recevedData>
				I2C_SLAVE_recevedBits++;
 5c2:	8f 5f       	subi	r24, 0xFF	; 255
 5c4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <I2C_SLAVE_recevedBits>
				if(I2C_SLAVE_recevedBits == 16)
 5c8:	80 31       	cpi	r24, 0x10	; 16
 5ca:	09 f0       	breq	.+2      	; 0x5ce <__vector_1+0x12e>
 5cc:	c9 c0       	rjmp	.+402    	; 0x760 <__vector_1+0x2c0>
}

static void I2C_SLAVE_addData(char data)
{
	//If the buffer is full, then the oldest data will be overwritten moving first data one.
	if(I2C_SLAVE_full)
 5ce:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <I2C_SLAVE_full>
 5d2:	88 23       	and	r24, r24
 5d4:	69 f0       	breq	.+26     	; 0x5f0 <__vector_1+0x150>
}

static unsigned char I2C_SLAVE_inc(volatile unsigned char * num)
{
	//Save return value.
	unsigned char temp = *num;
 5d6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <I2C_SLAVE_first>

	//Incrementing number 
	(*num)++;
 5da:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <I2C_SLAVE_first>
 5de:	8f 5f       	subi	r24, 0xFF	; 255
 5e0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <I2C_SLAVE_first>
	
	//If number is higher than receive buffer length then its reset to 0.
	if(*num >= I2C_SLAVE_BUFFER_LENGTH)
 5e4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <I2C_SLAVE_first>
 5e8:	8a 30       	cpi	r24, 0x0A	; 10
 5ea:	10 f0       	brcs	.+4      	; 0x5f0 <__vector_1+0x150>
	{
		*num = 0;
 5ec:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <I2C_SLAVE_first>
}

static unsigned char I2C_SLAVE_inc(volatile unsigned char * num)
{
	//Save return value.
	unsigned char temp = *num;
 5f0:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <I2C_SLAVE_last>

	//Incrementing number 
	(*num)++;
 5f4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <I2C_SLAVE_last>
 5f8:	8f 5f       	subi	r24, 0xFF	; 255
 5fa:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <I2C_SLAVE_last>
	
	//If number is higher than receive buffer length then its reset to 0.
	if(*num >= I2C_SLAVE_BUFFER_LENGTH)
 5fe:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <I2C_SLAVE_last>
 602:	8a 30       	cpi	r24, 0x0A	; 10
 604:	10 f0       	brcs	.+4      	; 0x60a <__vector_1+0x16a>
	{
		*num = 0;
 606:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <I2C_SLAVE_last>
	if(I2C_SLAVE_full)
	{
		I2C_SLAVE_inc(&I2C_SLAVE_first);
	}
	//Sets last data and increments last. (Hence last will always be the length of the data in the buffer)
	I2C_SLAVE_Buffer[I2C_SLAVE_inc(&I2C_SLAVE_last)] = data;
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	e4 5f       	subi	r30, 0xF4	; 244
 60e:	fe 4f       	sbci	r31, 0xFE	; 254
 610:	20 83       	st	Z, r18
	//If last position is the same as first the buffer is either full or empty. Therefor at boolean is sat if its full.
	if(I2C_SLAVE_last == I2C_SLAVE_first)
 612:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <I2C_SLAVE_last>
 616:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <I2C_SLAVE_first>
 61a:	98 13       	cpse	r25, r24
 61c:	03 c0       	rjmp	.+6      	; 0x624 <__vector_1+0x184>
	{
		I2C_SLAVE_full = true;
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <I2C_SLAVE_full>
				I2C_SLAVE_recevedBits++;
				if(I2C_SLAVE_recevedBits == 16)
				{
					//When all bits send add data and ack.
					I2C_SLAVE_addData(I2C_SLAVE_recevedData);
					I2C_SLAVE_sendBit(0);
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_SLAVE_sendBit>
					I2C_SLAVE_beginSend();
 62a:	0e 94 6b 00 	call	0xd6	; 0xd6 <I2C_SLAVE_beginSend>
					//Return to bit 8 to continue reading. (Only reading more bytes in one header is not implemented yet.)
					I2C_SLAVE_recevedBits = 8;
 62e:	88 e0       	ldi	r24, 0x08	; 8
 630:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <I2C_SLAVE_recevedBits>
 634:	95 c0       	rjmp	.+298    	; 0x760 <__vector_1+0x2c0>
				}
			}
		}
		//If SCL is triggering on falling edge i.e. it's currently writing on SDA.
		else if(I2C_SLAVE_SCL_IS_FALLING())
 636:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 63a:	83 70       	andi	r24, 0x03	; 3
 63c:	82 30       	cpi	r24, 0x02	; 2
 63e:	09 f0       	breq	.+2      	; 0x642 <__vector_1+0x1a2>
 640:	8f c0       	rjmp	.+286    	; 0x760 <__vector_1+0x2c0>
		{
			//Checks if all data is send.
			if(I2C_SLAVE_haveSended > 7)
 642:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <I2C_SLAVE_haveSended>
 646:	38 30       	cpi	r19, 0x08	; 8
 648:	08 f4       	brcc	.+2      	; 0x64c <__vector_1+0x1ac>
 64a:	52 c0       	rjmp	.+164    	; 0x6f0 <__vector_1+0x250>
			{
				//Updates buffer with temporary buffer if I2C_SLAVE_dataReady is 2 or 3.
				if(I2C_SLAVE_dataReady == 2 || I2C_SLAVE_dataReady == 3)
 64c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <I2C_SLAVE_dataReady>
 650:	82 50       	subi	r24, 0x02	; 2
 652:	82 30       	cpi	r24, 0x02	; 2
 654:	88 f5       	brcc	.+98     	; 0x6b8 <__vector_1+0x218>
				{
					I2C_SLAVE_dataReady = 1;
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <I2C_SLAVE_dataReady>
					I2C_SLAVE_haveSended = 1;
 65c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <I2C_SLAVE_haveSended>
					I2C_SLAVE_toSend = I2C_SLAVE_tempSave;
 660:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <I2C_SLAVE_tempSave>
 664:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <I2C_SLAVE_toSend>
					I2C_SLAVE_DDR = I2C_SLAVE_SET_BIT(I2C_SLAVE_DDR,I2C_SLAVE_SDA,(~I2C_SLAVE_toSend),7);
 668:	2a b1       	in	r18, 0x0a	; 10
 66a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <I2C_SLAVE_toSend>
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	80 95       	com	r24
 672:	90 95       	com	r25
 674:	88 0f       	add	r24, r24
 676:	89 2f       	mov	r24, r25
 678:	88 1f       	adc	r24, r24
 67a:	99 0b       	sbc	r25, r25
 67c:	82 95       	swap	r24
 67e:	92 95       	swap	r25
 680:	90 7f       	andi	r25, 0xF0	; 240
 682:	98 27       	eor	r25, r24
 684:	80 7f       	andi	r24, 0xF0	; 240
 686:	98 27       	eor	r25, r24
 688:	80 71       	andi	r24, 0x10	; 16
 68a:	92 2f       	mov	r25, r18
 68c:	9f 7e       	andi	r25, 0xEF	; 239
 68e:	89 0f       	add	r24, r25
 690:	8a b9       	out	0x0a, r24	; 10
					I2C_SLAVE_PORT = I2C_SLAVE_SET_BIT(I2C_SLAVE_PORT,I2C_SLAVE_SDA,I2C_SLAVE_toSend,7);
 692:	2b b1       	in	r18, 0x0b	; 11
 694:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <I2C_SLAVE_toSend>
 698:	88 1f       	adc	r24, r24
 69a:	88 27       	eor	r24, r24
 69c:	88 1f       	adc	r24, r24
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	82 95       	swap	r24
 6a2:	92 95       	swap	r25
 6a4:	90 7f       	andi	r25, 0xF0	; 240
 6a6:	98 27       	eor	r25, r24
 6a8:	80 7f       	andi	r24, 0xF0	; 240
 6aa:	98 27       	eor	r25, r24
 6ac:	80 71       	andi	r24, 0x10	; 16
 6ae:	92 2f       	mov	r25, r18
 6b0:	9f 7e       	andi	r25, 0xEF	; 239
 6b2:	89 0f       	add	r24, r25
 6b4:	8b b9       	out	0x0b, r24	; 11
 6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <__vector_1+0x220>
				}
				else
				{
					I2C_SLAVE_dataReady = 0;
 6b8:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <I2C_SLAVE_dataReady>
					//Frees SDA if done sending.
					I2C_SLAVE_dataReady = 0;
					I2C_SLAVE_DDR &= ~(1 << I2C_SLAVE_SDA);
 6bc:	54 98       	cbi	0x0a, 4	; 10
					I2C_SLAVE_PORT |= (1 << I2C_SLAVE_SDA);	
 6be:	5c 9a       	sbi	0x0b, 4	; 11
				}
				if(I2C_SLAVE_beginHold)
 6c0:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <I2C_SLAVE_beginHold>
 6c4:	88 23       	and	r24, r24
 6c6:	59 f0       	breq	.+22     	; 0x6de <__vector_1+0x23e>
}

static int I2C_SLAVE_hold()
{
	//If data is ready then it sets beginHold false and returns true.
	if(I2C_SLAVE_dataReady == 1 || I2C_SLAVE_dataReady == 2)
 6c8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <I2C_SLAVE_dataReady>
 6cc:	81 50       	subi	r24, 0x01	; 1
 6ce:	82 30       	cpi	r24, 0x02	; 2
 6d0:	18 f4       	brcc	.+6      	; 0x6d8 <__vector_1+0x238>
	{
		I2C_SLAVE_beginHold = false;
 6d2:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <I2C_SLAVE_beginHold>
 6d6:	44 c0       	rjmp	.+136    	; 0x760 <__vector_1+0x2c0>
		return 1;
	}
	else
	{
		//If no data is ready, then SCL is pulled low.
		I2C_SLAVE_DDR  |=  1 << I2C_SLAVE_SCL;
 6d8:	52 9a       	sbi	0x0a, 2	; 10
		I2C_SLAVE_PORT &=  ~(1 << I2C_SLAVE_SCL);
 6da:	5a 98       	cbi	0x0b, 2	; 11
 6dc:	41 c0       	rjmp	.+130    	; 0x760 <__vector_1+0x2c0>
				}
				else
				{
					//More work here needs to be done in order to be able to write multiple bytes.
					//Returns the line to reading
					I2C_SLAVE_SCL_RISING();
 6de:	e9 e6       	ldi	r30, 0x69	; 105
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	80 81       	ld	r24, Z
 6e4:	82 60       	ori	r24, 0x02	; 2
 6e6:	80 83       	st	Z, r24
 6e8:	80 81       	ld	r24, Z
 6ea:	81 60       	ori	r24, 0x01	; 1
 6ec:	80 83       	st	Z, r24
 6ee:	38 c0       	rjmp	.+112    	; 0x760 <__vector_1+0x2c0>
				}
			}
			else
			{
				I2C_SLAVE_DDR = I2C_SLAVE_SET_BIT(I2C_SLAVE_DDR,I2C_SLAVE_SDA,~I2C_SLAVE_toSend,(7-I2C_SLAVE_haveSended));
 6f0:	2a b1       	in	r18, 0x0a	; 10
 6f2:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <I2C_SLAVE_toSend>
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	80 95       	com	r24
 6fa:	90 95       	com	r25
 6fc:	47 e0       	ldi	r20, 0x07	; 7
 6fe:	50 e0       	ldi	r21, 0x00	; 0
 700:	ba 01       	movw	r22, r20
 702:	63 1b       	sub	r22, r19
 704:	71 09       	sbc	r23, r1
 706:	02 c0       	rjmp	.+4      	; 0x70c <__vector_1+0x26c>
 708:	95 95       	asr	r25
 70a:	87 95       	ror	r24
 70c:	6a 95       	dec	r22
 70e:	e2 f7       	brpl	.-8      	; 0x708 <__vector_1+0x268>
 710:	82 95       	swap	r24
 712:	92 95       	swap	r25
 714:	90 7f       	andi	r25, 0xF0	; 240
 716:	98 27       	eor	r25, r24
 718:	80 7f       	andi	r24, 0xF0	; 240
 71a:	98 27       	eor	r25, r24
 71c:	80 71       	andi	r24, 0x10	; 16
 71e:	92 2f       	mov	r25, r18
 720:	9f 7e       	andi	r25, 0xEF	; 239
 722:	89 0f       	add	r24, r25
 724:	8a b9       	out	0x0a, r24	; 10
				I2C_SLAVE_PORT = I2C_SLAVE_SET_BIT(I2C_SLAVE_PORT,I2C_SLAVE_SDA,I2C_SLAVE_toSend,(7-I2C_SLAVE_haveSended));
 726:	2b b1       	in	r18, 0x0b	; 11
 728:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <I2C_SLAVE_toSend>
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <I2C_SLAVE_haveSended>
 732:	43 1b       	sub	r20, r19
 734:	51 09       	sbc	r21, r1
 736:	02 c0       	rjmp	.+4      	; 0x73c <__vector_1+0x29c>
 738:	95 95       	asr	r25
 73a:	87 95       	ror	r24
 73c:	4a 95       	dec	r20
 73e:	e2 f7       	brpl	.-8      	; 0x738 <__vector_1+0x298>
 740:	82 95       	swap	r24
 742:	92 95       	swap	r25
 744:	90 7f       	andi	r25, 0xF0	; 240
 746:	98 27       	eor	r25, r24
 748:	80 7f       	andi	r24, 0xF0	; 240
 74a:	98 27       	eor	r25, r24
 74c:	80 71       	andi	r24, 0x10	; 16
 74e:	92 2f       	mov	r25, r18
 750:	9f 7e       	andi	r25, 0xEF	; 239
 752:	89 0f       	add	r24, r25
 754:	8b b9       	out	0x0b, r24	; 11
				
				I2C_SLAVE_haveSended++;
 756:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <I2C_SLAVE_haveSended>
 75a:	8f 5f       	subi	r24, 0xFF	; 255
 75c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <I2C_SLAVE_haveSended>
			}
		}
	}
	
}
 760:	ff 91       	pop	r31
 762:	ef 91       	pop	r30
 764:	bf 91       	pop	r27
 766:	af 91       	pop	r26
 768:	9f 91       	pop	r25
 76a:	8f 91       	pop	r24
 76c:	7f 91       	pop	r23
 76e:	6f 91       	pop	r22
 770:	5f 91       	pop	r21
 772:	4f 91       	pop	r20
 774:	3f 91       	pop	r19
 776:	2f 91       	pop	r18
 778:	0f 90       	pop	r0
 77a:	0f be       	out	0x3f, r0	; 63
 77c:	0f 90       	pop	r0
 77e:	1f 90       	pop	r1
 780:	18 95       	reti

00000782 <__vector_5>:

//SDA interrupt for handling stop and start bit.
ISR(I2C_SLAVE_SDA_vect)
{
 782:	1f 92       	push	r1
 784:	0f 92       	push	r0
 786:	0f b6       	in	r0, 0x3f	; 63
 788:	0f 92       	push	r0
 78a:	11 24       	eor	r1, r1
 78c:	8f 93       	push	r24
 78e:	ef 93       	push	r30
 790:	ff 93       	push	r31
	//Both stop and start bit is triggered while SCL is high.
	if((I2C_SLAVE_PIN & (1 << I2C_SLAVE_SCL)) ==(1 << I2C_SLAVE_SCL))
 792:	4a 9b       	sbis	0x09, 2	; 9
 794:	16 c0       	rjmp	.+44     	; 0x7c2 <__vector_5+0x40>
	{
		//If SDA is high then the interrupt was triggered on a rising edge and therefore it's a stop-bit.
		if(I2C_SLAVE_PIN & (1 << I2C_SLAVE_SDA))
 796:	4c 9b       	sbis	0x09, 4	; 9
 798:	11 c0       	rjmp	.+34     	; 0x7bc <__vector_5+0x3a>
		{
			I2C_SLAVE_startRecived = false;
 79a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <I2C_SLAVE_startRecived>
			I2C_SLAVE_startRecived = true;
		}
		//If it was a stop-bit reset received data, and set SCL trigger to rising.
		if(I2C_SLAVE_startRecived == false)
		{
			I2C_SLAVE_beginHold = false;
 79e:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <I2C_SLAVE_beginHold>
			I2C_SLAVE_recevedAddr = 0;
 7a2:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <I2C_SLAVE_recevedAddr>
			I2C_SLAVE_recevedBits = 0;
 7a6:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <I2C_SLAVE_recevedBits>
			I2C_SLAVE_SCL_RISING();
 7aa:	e9 e6       	ldi	r30, 0x69	; 105
 7ac:	f0 e0       	ldi	r31, 0x00	; 0
 7ae:	80 81       	ld	r24, Z
 7b0:	82 60       	ori	r24, 0x02	; 2
 7b2:	80 83       	st	Z, r24
 7b4:	80 81       	ld	r24, Z
 7b6:	81 60       	ori	r24, 0x01	; 1
 7b8:	80 83       	st	Z, r24
 7ba:	03 c0       	rjmp	.+6      	; 0x7c2 <__vector_5+0x40>
			I2C_SLAVE_startRecived = false;
		}
		//Else it is a start-bit.
		else
		{
			I2C_SLAVE_startRecived = true;
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <I2C_SLAVE_startRecived>
			I2C_SLAVE_recevedAddr = 0;
			I2C_SLAVE_recevedBits = 0;
			I2C_SLAVE_SCL_RISING();
		}
	}
}
 7c2:	ff 91       	pop	r31
 7c4:	ef 91       	pop	r30
 7c6:	8f 91       	pop	r24
 7c8:	0f 90       	pop	r0
 7ca:	0f be       	out	0x3f, r0	; 63
 7cc:	0f 90       	pop	r0
 7ce:	1f 90       	pop	r1
 7d0:	18 95       	reti

000007d2 <init_motors>:

static void startTimer2();
static void stopTimer2();
static void startTimePan2();

void init_motors(){
 7d2:	1f 93       	push	r17
 7d4:	cf 93       	push	r28
 7d6:	df 93       	push	r29
	
	//Set pins as output
	MOTOR1_DIR_PORT_DDR |= (1 << MOTOR1_DIR_PIN_LOCATION1) + (1 << MOTOR1_DIR_PIN_LOCATION2);
 7d8:	8a b1       	in	r24, 0x0a	; 10
 7da:	88 68       	ori	r24, 0x88	; 136
 7dc:	8a b9       	out	0x0a, r24	; 10
	MOTOR2_DIR_PORT_DDR |= 0b11 << MOTOR2_DIR_PIN_LOCATION;
 7de:	87 b1       	in	r24, 0x07	; 7
 7e0:	80 63       	ori	r24, 0x30	; 48
 7e2:	87 b9       	out	0x07, r24	; 7
	
	//Set enable pins to output low as default
	MOTOR1_ENABLE_PORT_DDR |= (1 << MOTOR1_EN_PIN_LOCATION);
 7e4:	55 9a       	sbi	0x0a, 5	; 10
	MOTOR2_ENABLE_PORT_DDR |= (1 << MOTOR2_EN_PIN_LOCATION);
 7e6:	56 9a       	sbi	0x0a, 6	; 10
	MOTOR1_ENABLE_PORT &= ~(1 << MOTOR1_EN_PIN_LOCATION);
 7e8:	5d 98       	cbi	0x0b, 5	; 11
	MOTOR2_ENABLE_PORT &= ~(1 << MOTOR2_EN_PIN_LOCATION);
 7ea:	5e 98       	cbi	0x0b, 6	; 11
	
	//Set motor to off
	MOTOR1_SETING(MOTOR_OFF);
 7ec:	5b 98       	cbi	0x0b, 3	; 11
 7ee:	5f 98       	cbi	0x0b, 7	; 11
	MOTOR2_SETING(MOTOR_OFF);
 7f0:	88 b1       	in	r24, 0x08	; 8
 7f2:	80 63       	ori	r24, 0x30	; 48
 7f4:	88 b9       	out	0x08, r24	; 8
	
	//Disable motors
	MOTOR1_DISABLE();
 7f6:	84 b5       	in	r24, 0x24	; 36
 7f8:	8f 7c       	andi	r24, 0xCF	; 207
 7fa:	84 bd       	out	0x24, r24	; 36
	MOTOR2_DISABLE();
 7fc:	84 b5       	in	r24, 0x24	; 36
 7fe:	8f 73       	andi	r24, 0x3F	; 63
 800:	84 bd       	out	0x24, r24	; 36
	
		
	//Setup timer 0 PWMs for the motors
	PRR &= ~(1 << PRTIM0);
 802:	c4 e6       	ldi	r28, 0x64	; 100
 804:	d0 e0       	ldi	r29, 0x00	; 0
 806:	88 81       	ld	r24, Y
 808:	8f 7d       	andi	r24, 0xDF	; 223
 80a:	88 83       	st	Y, r24
	
	// phase correct PWM mode, prescaler = 256, freq ~ 61,27451 Hz (8000000/(256*510)
	TCCR0A = (1 << WGM00);
 80c:	11 e0       	ldi	r17, 0x01	; 1
 80e:	14 bd       	out	0x24, r17	; 36
	TCCR0B = (1 << CS02);
 810:	84 e0       	ldi	r24, 0x04	; 4
 812:	85 bd       	out	0x25, r24	; 37
	
	//Set PWM for the motors
	setMotorPWM(0, MOTOR1);
 814:	60 e0       	ldi	r22, 0x00	; 0
 816:	80 e0       	ldi	r24, 0x00	; 0
 818:	0e 94 7e 00 	call	0xfc	; 0xfc <setMotorPWM>
	setMotorPWM(0, MOTOR2);
 81c:	61 e0       	ldi	r22, 0x01	; 1
 81e:	80 e0       	ldi	r24, 0x00	; 0
 820:	0e 94 7e 00 	call	0xfc	; 0xfc <setMotorPWM>
	
	//Setup timer 2 to 125 Hz and TOF interrupt, prescaler = 256, OCRA = 249 (16000000 Hz/(256*250) = 250 Hz (error = 125 +- 1Hz)
	PRR &= ~(1 << PRTIM2);
 824:	88 81       	ld	r24, Y
 826:	8f 7b       	andi	r24, 0xBF	; 191
 828:	88 83       	st	Y, r24
	TCCR2A = (1 << WGM21) | (1 << WGM20);
 82a:	83 e0       	ldi	r24, 0x03	; 3
 82c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
	TCCR2B = (1 << WGM22);
 830:	88 e0       	ldi	r24, 0x08	; 8
 832:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	OCR2A = TIMER2_TOP;
 836:	89 ef       	ldi	r24, 0xF9	; 249
 838:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
	TIMSK2 = (1 << TOIE2);
 83c:	10 93 70 00 	sts	0x0070, r17	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
	
}
 840:	df 91       	pop	r29
 842:	cf 91       	pop	r28
 844:	1f 91       	pop	r17
 846:	08 95       	ret

00000848 <startTimePan1>:

void startTimePan1(){
	
	//Set internal flag
	pan1_cooking_time = 0;
 848:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <pan1_cooking_time+0x1>
 84c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <pan1_cooking_time>
	pan1Free = false;
 850:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <pan1Free>
 854:	08 95       	ret

00000856 <flipPan1>:
	}
}

void flipPan1(){
	
	motor_flipping = MOTOR1;
 856:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <motor_flipping>
	setMotorPWM(MOTOR_OPTIMUM_PWM_FORWARD, motor_flipping);
 85a:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <motor_flipping>
 85e:	84 e6       	ldi	r24, 0x64	; 100
 860:	0e 94 7e 00 	call	0xfc	; 0xfc <setMotorPWM>
	
	//Flip forward
	MOTOR1_SETING(MOTOR_FORWARD);
 864:	5b 98       	cbi	0x0b, 3	; 11
 866:	5f 98       	cbi	0x0b, 7	; 11
	MOTOR1_ENABLE();
 868:	84 b5       	in	r24, 0x24	; 36
 86a:	80 63       	ori	r24, 0x30	; 48
 86c:	84 bd       	out	0x24, r24	; 36
	startTimer2();
	
}

static void startTimer2(){
	curr_time = 0;
 86e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <curr_time+0x1>
 872:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <curr_time>
	TCCR2B |= (1 << CS22) | (1 << CS20);
 876:	e1 eb       	ldi	r30, 0xB1	; 177
 878:	f0 e0       	ldi	r31, 0x00	; 0
 87a:	80 81       	ld	r24, Z
 87c:	85 60       	ori	r24, 0x05	; 5
 87e:	80 83       	st	Z, r24
 880:	08 95       	ret

00000882 <flipPan2>:
	startTimer2();
}

void flipPan2(){
	
	motor_flipping = MOTOR2;
 882:	81 e0       	ldi	r24, 0x01	; 1
 884:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <motor_flipping>
	setMotorPWM(MOTOR_OPTIMUM_PWM_FORWARD, motor_flipping);
 888:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <motor_flipping>
 88c:	84 e6       	ldi	r24, 0x64	; 100
 88e:	0e 94 7e 00 	call	0xfc	; 0xfc <setMotorPWM>
	
	//Flip forward
	MOTOR2_SETING(MOTOR_FORWARD);
 892:	88 b1       	in	r24, 0x08	; 8
 894:	8f 7c       	andi	r24, 0xCF	; 207
 896:	80 61       	ori	r24, 0x10	; 16
 898:	88 b9       	out	0x08, r24	; 8
	MOTOR2_ENABLE();
 89a:	84 b5       	in	r24, 0x24	; 36
 89c:	80 6c       	ori	r24, 0xC0	; 192
 89e:	84 bd       	out	0x24, r24	; 36
	startTimer2();
	
}

static void startTimer2(){
	curr_time = 0;
 8a0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <curr_time+0x1>
 8a4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <curr_time>
	TCCR2B |= (1 << CS22) | (1 << CS20);
 8a8:	e1 eb       	ldi	r30, 0xB1	; 177
 8aa:	f0 e0       	ldi	r31, 0x00	; 0
 8ac:	80 81       	ld	r24, Z
 8ae:	85 60       	ori	r24, 0x05	; 5
 8b0:	80 83       	st	Z, r24
 8b2:	08 95       	ret

000008b4 <__vector_9>:
	
	//Reset count
	TCNT2 = 0x00;
}

ISR(TIMER2_OVF_vect) {
 8b4:	1f 92       	push	r1
 8b6:	0f 92       	push	r0
 8b8:	0f b6       	in	r0, 0x3f	; 63
 8ba:	0f 92       	push	r0
 8bc:	11 24       	eor	r1, r1
 8be:	2f 93       	push	r18
 8c0:	3f 93       	push	r19
 8c2:	4f 93       	push	r20
 8c4:	5f 93       	push	r21
 8c6:	6f 93       	push	r22
 8c8:	7f 93       	push	r23
 8ca:	8f 93       	push	r24
 8cc:	9f 93       	push	r25
 8ce:	af 93       	push	r26
 8d0:	bf 93       	push	r27
 8d2:	ef 93       	push	r30
 8d4:	ff 93       	push	r31
	
	switch (curr_time++) {
 8d6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <curr_time>
 8da:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <curr_time+0x1>
 8de:	9c 01       	movw	r18, r24
 8e0:	2f 5f       	subi	r18, 0xFF	; 255
 8e2:	3f 4f       	sbci	r19, 0xFF	; 255
 8e4:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <curr_time+0x1>
 8e8:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <curr_time>
 8ec:	86 3d       	cpi	r24, 0xD6	; 214
 8ee:	26 e0       	ldi	r18, 0x06	; 6
 8f0:	92 07       	cpc	r25, r18
 8f2:	79 f1       	breq	.+94     	; 0x952 <__stack+0x53>
 8f4:	20 f4       	brcc	.+8      	; 0x8fe <__vector_9+0x4a>
 8f6:	88 3e       	cpi	r24, 0xE8	; 232
 8f8:	93 40       	sbci	r25, 0x03	; 3
 8fa:	51 f0       	breq	.+20     	; 0x910 <__stack+0x11>
 8fc:	71 c0       	rjmp	.+226    	; 0x9e0 <__stack+0xe1>
 8fe:	8e 3b       	cpi	r24, 0xBE	; 190
 900:	2a e0       	ldi	r18, 0x0A	; 10
 902:	92 07       	cpc	r25, r18
 904:	29 f0       	breq	.+10     	; 0x910 <__stack+0x11>
 906:	8c 3a       	cpi	r24, 0xAC	; 172
 908:	9d 40       	sbci	r25, 0x0D	; 13
 90a:	09 f4       	brne	.+2      	; 0x90e <__stack+0xf>
 90c:	4a c0       	rjmp	.+148    	; 0x9a2 <__stack+0xa3>
 90e:	68 c0       	rjmp	.+208    	; 0x9e0 <__stack+0xe1>
			break;
		
		//Mid way time to break
		case MOTOR_FORWARD_TIME_S:
		case MOTOR_BACKWARD_TIME_S:
			if (motor_flipping == MOTOR1) {
 910:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <motor_flipping>
 914:	81 11       	cpse	r24, r1
 916:	0e c0       	rjmp	.+28     	; 0x934 <__stack+0x35>
				MOTOR1_DISABLE();
 918:	84 b5       	in	r24, 0x24	; 36
 91a:	8f 7c       	andi	r24, 0xCF	; 207
 91c:	84 bd       	out	0x24, r24	; 36
				setMotorPWM(MOTOR_OPTIMUM_PWM_BREAK, motor_flipping);
 91e:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <motor_flipping>
 922:	84 e6       	ldi	r24, 0x64	; 100
 924:	0e 94 7e 00 	call	0xfc	; 0xfc <setMotorPWM>
				MOTOR1_SETING(MOTOR_BREAK);
 928:	5b 98       	cbi	0x0b, 3	; 11
 92a:	5f 98       	cbi	0x0b, 7	; 11
				MOTOR1_ENABLE();
 92c:	84 b5       	in	r24, 0x24	; 36
 92e:	80 63       	ori	r24, 0x30	; 48
 930:	84 bd       	out	0x24, r24	; 36
 932:	56 c0       	rjmp	.+172    	; 0x9e0 <__stack+0xe1>
			}
			else {
				MOTOR2_DISABLE();
 934:	84 b5       	in	r24, 0x24	; 36
 936:	8f 73       	andi	r24, 0x3F	; 63
 938:	84 bd       	out	0x24, r24	; 36
				setMotorPWM(MOTOR_OPTIMUM_PWM_BREAK, motor_flipping);
 93a:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <motor_flipping>
 93e:	84 e6       	ldi	r24, 0x64	; 100
 940:	0e 94 7e 00 	call	0xfc	; 0xfc <setMotorPWM>
				MOTOR2_SETING(MOTOR_BREAK);
 944:	88 b1       	in	r24, 0x08	; 8
 946:	8f 7c       	andi	r24, 0xCF	; 207
 948:	88 b9       	out	0x08, r24	; 8
				MOTOR2_ENABLE();
 94a:	84 b5       	in	r24, 0x24	; 36
 94c:	80 6c       	ori	r24, 0xC0	; 192
 94e:	84 bd       	out	0x24, r24	; 36
 950:	47 c0       	rjmp	.+142    	; 0x9e0 <__stack+0xe1>
			}
			break;
		
		//We have stopped the pan at pancake destination time to go back
		case MOTOR_BREAK_FORWARD_TIME_S:
			if (motor_flipping == MOTOR1) {
 952:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <motor_flipping>
 956:	81 11       	cpse	r24, r1
 958:	14 c0       	rjmp	.+40     	; 0x982 <__stack+0x83>
				MOTOR1_DISABLE();
 95a:	84 b5       	in	r24, 0x24	; 36
 95c:	8f 7c       	andi	r24, 0xCF	; 207
 95e:	84 bd       	out	0x24, r24	; 36
				setMotorPWM(MOTOR_OPTIMUM_PWM_BACKWARD, motor_flipping);
 960:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <motor_flipping>
 964:	84 e6       	ldi	r24, 0x64	; 100
 966:	0e 94 7e 00 	call	0xfc	; 0xfc <setMotorPWM>
				MOTOR1_SETING(MOTOR_BACKWARD);
 96a:	5b 98       	cbi	0x0b, 3	; 11
 96c:	5f 98       	cbi	0x0b, 7	; 11
				MOTOR1_ENABLE();
 96e:	84 b5       	in	r24, 0x24	; 36
 970:	80 63       	ori	r24, 0x30	; 48
 972:	84 bd       	out	0x24, r24	; 36
}

static void startTimePan2(){
	
	//Set internal flag
	pan2_cooking_time = 0;
 974:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 978:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	pan2Free = false;
 97c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 980:	2f c0       	rjmp	.+94     	; 0x9e0 <__stack+0xe1>
				MOTOR1_SETING(MOTOR_BACKWARD);
				MOTOR1_ENABLE();
				startTimePan2();
			}
			else {
				MOTOR2_DISABLE();
 982:	84 b5       	in	r24, 0x24	; 36
 984:	8f 73       	andi	r24, 0x3F	; 63
 986:	84 bd       	out	0x24, r24	; 36
				setMotorPWM(MOTOR_OPTIMUM_PWM_BACKWARD, motor_flipping);
 988:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <motor_flipping>
 98c:	84 e6       	ldi	r24, 0x64	; 100
 98e:	0e 94 7e 00 	call	0xfc	; 0xfc <setMotorPWM>
				MOTOR2_SETING(MOTOR_BACKWARD);
 992:	88 b1       	in	r24, 0x08	; 8
 994:	8f 7c       	andi	r24, 0xCF	; 207
 996:	80 62       	ori	r24, 0x20	; 32
 998:	88 b9       	out	0x08, r24	; 8
				MOTOR2_ENABLE();
 99a:	84 b5       	in	r24, 0x24	; 36
 99c:	80 6c       	ori	r24, 0xC0	; 192
 99e:	84 bd       	out	0x24, r24	; 36
 9a0:	1f c0       	rjmp	.+62     	; 0x9e0 <__stack+0xe1>
			}
			break;
		
		//We have reached the starting position set flags
		case MOTOR_BREAK_BACKWARD_TIME_S:
			if (motor_flipping == MOTOR1) {
 9a2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <motor_flipping>
 9a6:	81 11       	cpse	r24, r1
 9a8:	09 c0       	rjmp	.+18     	; 0x9bc <__stack+0xbd>
				MOTOR1_DISABLE();
 9aa:	84 b5       	in	r24, 0x24	; 36
 9ac:	8f 7c       	andi	r24, 0xCF	; 207
 9ae:	84 bd       	out	0x24, r24	; 36
				MOTOR1_SETING(MOTOR_OFF);
 9b0:	5b 98       	cbi	0x0b, 3	; 11
 9b2:	5f 98       	cbi	0x0b, 7	; 11
				pan1Free = true;
 9b4:	81 e0       	ldi	r24, 0x01	; 1
 9b6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pan1Free>
 9ba:	0b c0       	rjmp	.+22     	; 0x9d2 <__stack+0xd3>
			}
			else {
				MOTOR2_DISABLE();
 9bc:	84 b5       	in	r24, 0x24	; 36
 9be:	8f 73       	andi	r24, 0x3F	; 63
 9c0:	84 bd       	out	0x24, r24	; 36
				MOTOR2_SETING(MOTOR_OFF);
 9c2:	88 b1       	in	r24, 0x08	; 8
 9c4:	80 63       	ori	r24, 0x30	; 48
 9c6:	88 b9       	out	0x08, r24	; 8
				pancake_done = true;
 9c8:	81 e0       	ldi	r24, 0x01	; 1
 9ca:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pancake_done>
				pan2Free = true;
 9ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	TCCR2B |= (1 << CS22) | (1 << CS20);
}

static void stopTimer2(){
	//Stop clock
	TCCR2B &= ~((1 << CS22) | (1 << CS20));
 9d2:	e1 eb       	ldi	r30, 0xB1	; 177
 9d4:	f0 e0       	ldi	r31, 0x00	; 0
 9d6:	80 81       	ld	r24, Z
 9d8:	8a 7f       	andi	r24, 0xFA	; 250
 9da:	80 83       	st	Z, r24
	
	//Reset count
	TCNT2 = 0x00;
 9dc:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
			}
			//Stop the timer
			stopTimer2();
			break;
	}
}
 9e0:	ff 91       	pop	r31
 9e2:	ef 91       	pop	r30
 9e4:	bf 91       	pop	r27
 9e6:	af 91       	pop	r26
 9e8:	9f 91       	pop	r25
 9ea:	8f 91       	pop	r24
 9ec:	7f 91       	pop	r23
 9ee:	6f 91       	pop	r22
 9f0:	5f 91       	pop	r21
 9f2:	4f 91       	pop	r20
 9f4:	3f 91       	pop	r19
 9f6:	2f 91       	pop	r18
 9f8:	0f 90       	pop	r0
 9fa:	0f be       	out	0x3f, r0	; 63
 9fc:	0f 90       	pop	r0
 9fe:	1f 90       	pop	r1
 a00:	18 95       	reti

00000a02 <init_1Hz_timer>:
    }
}

void init_1Hz_timer(){
	//Setup timer
	PRR &= ~(1 << PRTIM1);	//Enable timer 1
 a02:	e4 e6       	ldi	r30, 0x64	; 100
 a04:	f0 e0       	ldi	r31, 0x00	; 0
 a06:	80 81       	ld	r24, Z
 a08:	87 7f       	andi	r24, 0xF7	; 247
 a0a:	80 83       	st	Z, r24
	
	 
	//Timer is in fast PWM mode, TOP is ICR1 and prescaler is 256
	TCCR1A = (1 << WGM11);
 a0c:	82 e0       	ldi	r24, 0x02	; 2
 a0e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS12);
 a12:	8c e1       	ldi	r24, 0x1C	; 28
 a14:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	
	//Set TOP value
	ICR1 = TIMER_1HZ_TOP;
 a18:	83 e2       	ldi	r24, 0x23	; 35
 a1a:	94 ef       	ldi	r25, 0xF4	; 244
 a1c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 a20:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	
	//Overflow interrupt enabled
	TIMSK1 = (1 << TOIE1);
 a24:	81 e0       	ldi	r24, 0x01	; 1
 a26:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 a2a:	08 95       	ret

00000a2c <main>:
void init_1Hz_timer();

int main(void)
{
	//Enable interrupts
	sei();
 a2c:	78 94       	sei
	init_1Hz_timer();
 a2e:	0e 94 01 05 	call	0xa02	; 0xa02 <init_1Hz_timer>
	
	init_digital_comm();		//Initialize the digital communication
 a32:	0e 94 be 00 	call	0x17c	; 0x17c <init_digital_comm>
	I2C_SLAVE_init();			//Initialize the I2C communication
 a36:	0e 94 37 02 	call	0x46e	; 0x46e <I2C_SLAVE_init>
	init_regulation();			//Initialize the regulation
 a3a:	0e 94 ed 00 	call	0x1da	; 0x1da <init_regulation>
	init_motors();				//Initialize the motor pins and PWMs
 a3e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <init_motors>

	I2C_commands_t temp = 0xFF;
	
	bool check_for_free_pan = false;
	DDRB |= 1<<DDB3;
 a42:	23 9a       	sbi	0x04, 3	; 4
	init_regulation();			//Initialize the regulation
	init_motors();				//Initialize the motor pins and PWMs

	I2C_commands_t temp = 0xFF;
	
	bool check_for_free_pan = false;
 a44:	d0 e0       	ldi	r29, 0x00	; 0
	init_digital_comm();		//Initialize the digital communication
	I2C_SLAVE_init();			//Initialize the I2C communication
	init_regulation();			//Initialize the regulation
	init_motors();				//Initialize the motor pins and PWMs

	I2C_commands_t temp = 0xFF;
 a46:	cf ef       	ldi	r28, 0xFF	; 255
			temp = I2C_SLAVE_getData();
		}
		
		if (check_for_free_pan && pan1Free && heat_ok){
			I2C_SLAVE_sendData(pan1Free);
			check_for_free_pan = false;
 a48:	00 e0       	ldi	r16, 0x00	; 0
				I2C_SLAVE_sendData(temp);
				temp = 0xFF;
				break;

			case GET_FIRST_PAN_STATUS:
				check_for_free_pan = true;
 a4a:	ff 24       	eor	r15, r15
 a4c:	f3 94       	inc	r15
				temp = 0xFF;
 a4e:	1f ef       	ldi	r17, 0xFF	; 255
	bool check_for_free_pan = false;
	DDRB |= 1<<DDB3;
    /* Replace with your application code */
    while (1) 
    {
		handle_regulation();
 a50:	0e 94 13 01 	call	0x226	; 0x226 <handle_regulation>
		
		if (heat_ok)
 a54:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <heat_ok>
 a58:	88 23       	and	r24, r24
 a5a:	11 f0       	breq	.+4      	; 0xa60 <main+0x34>
		{
			PORTB |= 1<<PORTB3;
 a5c:	2b 9a       	sbi	0x05, 3	; 5
 a5e:	01 c0       	rjmp	.+2      	; 0xa62 <main+0x36>
		}
		else {
			PORTB &= ~(1<<PORTB3);
 a60:	2b 98       	cbi	0x05, 3	; 5
		}
		if (pan1_cooking_time == PANCAKE_COOKING_TIME1_S){
 a62:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pan1_cooking_time>
 a66:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pan1_cooking_time+0x1>
 a6a:	05 97       	sbiw	r24, 0x05	; 5
 a6c:	11 f4       	brne	.+4      	; 0xa72 <main+0x46>
			flipPan1();
 a6e:	0e 94 2b 04 	call	0x856	; 0x856 <flipPan1>
		}
		
		if (pan2_cooking_time == PANCAKE_COOKING_TIME2_S){
 a72:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 a76:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 a7a:	0a 97       	sbiw	r24, 0x0a	; 10
 a7c:	11 f4       	brne	.+4      	; 0xa82 <main+0x56>
			flipPan2();
 a7e:	0e 94 41 04 	call	0x882	; 0x882 <flipPan2>
		}
		
		if (I2C_SLAVE_checkData()){
 a82:	0e 94 b2 01 	call	0x364	; 0x364 <I2C_SLAVE_checkData>
 a86:	88 23       	and	r24, r24
 a88:	19 f0       	breq	.+6      	; 0xa90 <main+0x64>
			temp = I2C_SLAVE_getData();
 a8a:	0e 94 16 02 	call	0x42c	; 0x42c <I2C_SLAVE_getData>
 a8e:	c8 2f       	mov	r28, r24
		}
		
		if (check_for_free_pan && pan1Free && heat_ok){
 a90:	dd 23       	and	r29, r29
 a92:	69 f0       	breq	.+26     	; 0xaae <main+0x82>
 a94:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pan1Free>
 a98:	88 23       	and	r24, r24
 a9a:	49 f0       	breq	.+18     	; 0xaae <main+0x82>
 a9c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <heat_ok>
 aa0:	88 23       	and	r24, r24
 aa2:	29 f0       	breq	.+10     	; 0xaae <main+0x82>
			I2C_SLAVE_sendData(pan1Free);
 aa4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pan1Free>
 aa8:	0e 94 bd 01 	call	0x37a	; 0x37a <I2C_SLAVE_sendData>
			check_for_free_pan = false;
 aac:	d0 2f       	mov	r29, r16
		}
		
		switch (temp) {
 aae:	c1 30       	cpi	r28, 0x01	; 1
 ab0:	21 f0       	breq	.+8      	; 0xaba <main+0x8e>
 ab2:	30 f0       	brcs	.+12     	; 0xac0 <main+0x94>
 ab4:	c2 30       	cpi	r28, 0x02	; 2
 ab6:	49 f0       	breq	.+18     	; 0xaca <main+0x9e>
 ab8:	cb cf       	rjmp	.-106    	; 0xa50 <main+0x24>
				I2C_SLAVE_sendData(temp);
				temp = 0xFF;
				break;

			case GET_FIRST_PAN_STATUS:
				check_for_free_pan = true;
 aba:	df 2d       	mov	r29, r15
				temp = 0xFF;
 abc:	c1 2f       	mov	r28, r17
 abe:	c8 cf       	rjmp	.-112    	; 0xa50 <main+0x24>
		}
		
		switch (temp) {
				
			case PING:
				I2C_SLAVE_sendData(temp);
 ac0:	80 2f       	mov	r24, r16
 ac2:	0e 94 bd 01 	call	0x37a	; 0x37a <I2C_SLAVE_sendData>
				temp = 0xFF;
 ac6:	c1 2f       	mov	r28, r17
				break;
 ac8:	c3 cf       	rjmp	.-122    	; 0xa50 <main+0x24>
				check_for_free_pan = true;
				temp = 0xFF;
				break;

			case BEGIN_COOKING:
				if (pan1Free & heat_ok)
 aca:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pan1Free>
 ace:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <heat_ok>
 ad2:	88 23       	and	r24, r24
 ad4:	09 f4       	brne	.+2      	; 0xad8 <main+0xac>
 ad6:	bc cf       	rjmp	.-136    	; 0xa50 <main+0x24>
 ad8:	99 23       	and	r25, r25
 ada:	09 f4       	brne	.+2      	; 0xade <main+0xb2>
 adc:	b9 cf       	rjmp	.-142    	; 0xa50 <main+0x24>
				startTimePan1();
 ade:	0e 94 24 04 	call	0x848	; 0x848 <startTimePan1>
 ae2:	b6 cf       	rjmp	.-148    	; 0xa50 <main+0x24>

00000ae4 <__vector_13>:
	
	//Overflow interrupt enabled
	TIMSK1 = (1 << TOIE1);
}

ISR(TIMER1_OVF_vect){
 ae4:	1f 92       	push	r1
 ae6:	0f 92       	push	r0
 ae8:	0f b6       	in	r0, 0x3f	; 63
 aea:	0f 92       	push	r0
 aec:	11 24       	eor	r1, r1
 aee:	2f 93       	push	r18
 af0:	3f 93       	push	r19
 af2:	4f 93       	push	r20
 af4:	5f 93       	push	r21
 af6:	6f 93       	push	r22
 af8:	7f 93       	push	r23
 afa:	8f 93       	push	r24
 afc:	9f 93       	push	r25
 afe:	af 93       	push	r26
 b00:	bf 93       	push	r27
 b02:	ef 93       	push	r30
 b04:	ff 93       	push	r31
	
	//Control cooking time
	pan1_cooking_time += (pan1Free ? 0 : 1);
 b06:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <pan1Free>
 b0a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <pan1_cooking_time>
 b0e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <pan1_cooking_time+0x1>
 b12:	81 e0       	ldi	r24, 0x01	; 1
 b14:	98 27       	eor	r25, r24
 b16:	29 0f       	add	r18, r25
 b18:	31 1d       	adc	r19, r1
 b1a:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <pan1_cooking_time+0x1>
 b1e:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <pan1_cooking_time>
	pan2_cooking_time += (pan2Free ? 0 : 1);
 b22:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 b26:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 b2a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
 b2e:	89 27       	eor	r24, r25
 b30:	a9 01       	movw	r20, r18
 b32:	48 0f       	add	r20, r24
 b34:	51 1d       	adc	r21, r1
 b36:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <__data_end+0x1>
 b3a:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <__data_end>
	
	//Pancake Done
	pancakeDone();
 b3e:	0e 94 cd 00 	call	0x19a	; 0x19a <pancakeDone>
	
}
 b42:	ff 91       	pop	r31
 b44:	ef 91       	pop	r30
 b46:	bf 91       	pop	r27
 b48:	af 91       	pop	r26
 b4a:	9f 91       	pop	r25
 b4c:	8f 91       	pop	r24
 b4e:	7f 91       	pop	r23
 b50:	6f 91       	pop	r22
 b52:	5f 91       	pop	r21
 b54:	4f 91       	pop	r20
 b56:	3f 91       	pop	r19
 b58:	2f 91       	pop	r18
 b5a:	0f 90       	pop	r0
 b5c:	0f be       	out	0x3f, r0	; 63
 b5e:	0f 90       	pop	r0
 b60:	1f 90       	pop	r1
 b62:	18 95       	reti

00000b64 <__subsf3>:
 b64:	50 58       	subi	r21, 0x80	; 128

00000b66 <__addsf3>:
 b66:	bb 27       	eor	r27, r27
 b68:	aa 27       	eor	r26, r26
 b6a:	0e 94 ca 05 	call	0xb94	; 0xb94 <__addsf3x>
 b6e:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__fp_round>
 b72:	0e 94 d4 06 	call	0xda8	; 0xda8 <__fp_pscA>
 b76:	38 f0       	brcs	.+14     	; 0xb86 <__addsf3+0x20>
 b78:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__fp_pscB>
 b7c:	20 f0       	brcs	.+8      	; 0xb86 <__addsf3+0x20>
 b7e:	39 f4       	brne	.+14     	; 0xb8e <__addsf3+0x28>
 b80:	9f 3f       	cpi	r25, 0xFF	; 255
 b82:	19 f4       	brne	.+6      	; 0xb8a <__addsf3+0x24>
 b84:	26 f4       	brtc	.+8      	; 0xb8e <__addsf3+0x28>
 b86:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__fp_nan>
 b8a:	0e f4       	brtc	.+2      	; 0xb8e <__addsf3+0x28>
 b8c:	e0 95       	com	r30
 b8e:	e7 fb       	bst	r30, 7
 b90:	0c 94 a2 06 	jmp	0xd44	; 0xd44 <__fp_inf>

00000b94 <__addsf3x>:
 b94:	e9 2f       	mov	r30, r25
 b96:	0e 94 f3 06 	call	0xde6	; 0xde6 <__fp_split3>
 b9a:	58 f3       	brcs	.-42     	; 0xb72 <__addsf3+0xc>
 b9c:	ba 17       	cp	r27, r26
 b9e:	62 07       	cpc	r22, r18
 ba0:	73 07       	cpc	r23, r19
 ba2:	84 07       	cpc	r24, r20
 ba4:	95 07       	cpc	r25, r21
 ba6:	20 f0       	brcs	.+8      	; 0xbb0 <__addsf3x+0x1c>
 ba8:	79 f4       	brne	.+30     	; 0xbc8 <__addsf3x+0x34>
 baa:	a6 f5       	brtc	.+104    	; 0xc14 <__addsf3x+0x80>
 bac:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <__fp_zero>
 bb0:	0e f4       	brtc	.+2      	; 0xbb4 <__addsf3x+0x20>
 bb2:	e0 95       	com	r30
 bb4:	0b 2e       	mov	r0, r27
 bb6:	ba 2f       	mov	r27, r26
 bb8:	a0 2d       	mov	r26, r0
 bba:	0b 01       	movw	r0, r22
 bbc:	b9 01       	movw	r22, r18
 bbe:	90 01       	movw	r18, r0
 bc0:	0c 01       	movw	r0, r24
 bc2:	ca 01       	movw	r24, r20
 bc4:	a0 01       	movw	r20, r0
 bc6:	11 24       	eor	r1, r1
 bc8:	ff 27       	eor	r31, r31
 bca:	59 1b       	sub	r21, r25
 bcc:	99 f0       	breq	.+38     	; 0xbf4 <__addsf3x+0x60>
 bce:	59 3f       	cpi	r21, 0xF9	; 249
 bd0:	50 f4       	brcc	.+20     	; 0xbe6 <__addsf3x+0x52>
 bd2:	50 3e       	cpi	r21, 0xE0	; 224
 bd4:	68 f1       	brcs	.+90     	; 0xc30 <__addsf3x+0x9c>
 bd6:	1a 16       	cp	r1, r26
 bd8:	f0 40       	sbci	r31, 0x00	; 0
 bda:	a2 2f       	mov	r26, r18
 bdc:	23 2f       	mov	r18, r19
 bde:	34 2f       	mov	r19, r20
 be0:	44 27       	eor	r20, r20
 be2:	58 5f       	subi	r21, 0xF8	; 248
 be4:	f3 cf       	rjmp	.-26     	; 0xbcc <__addsf3x+0x38>
 be6:	46 95       	lsr	r20
 be8:	37 95       	ror	r19
 bea:	27 95       	ror	r18
 bec:	a7 95       	ror	r26
 bee:	f0 40       	sbci	r31, 0x00	; 0
 bf0:	53 95       	inc	r21
 bf2:	c9 f7       	brne	.-14     	; 0xbe6 <__addsf3x+0x52>
 bf4:	7e f4       	brtc	.+30     	; 0xc14 <__addsf3x+0x80>
 bf6:	1f 16       	cp	r1, r31
 bf8:	ba 0b       	sbc	r27, r26
 bfa:	62 0b       	sbc	r22, r18
 bfc:	73 0b       	sbc	r23, r19
 bfe:	84 0b       	sbc	r24, r20
 c00:	ba f0       	brmi	.+46     	; 0xc30 <__addsf3x+0x9c>
 c02:	91 50       	subi	r25, 0x01	; 1
 c04:	a1 f0       	breq	.+40     	; 0xc2e <__addsf3x+0x9a>
 c06:	ff 0f       	add	r31, r31
 c08:	bb 1f       	adc	r27, r27
 c0a:	66 1f       	adc	r22, r22
 c0c:	77 1f       	adc	r23, r23
 c0e:	88 1f       	adc	r24, r24
 c10:	c2 f7       	brpl	.-16     	; 0xc02 <__addsf3x+0x6e>
 c12:	0e c0       	rjmp	.+28     	; 0xc30 <__addsf3x+0x9c>
 c14:	ba 0f       	add	r27, r26
 c16:	62 1f       	adc	r22, r18
 c18:	73 1f       	adc	r23, r19
 c1a:	84 1f       	adc	r24, r20
 c1c:	48 f4       	brcc	.+18     	; 0xc30 <__addsf3x+0x9c>
 c1e:	87 95       	ror	r24
 c20:	77 95       	ror	r23
 c22:	67 95       	ror	r22
 c24:	b7 95       	ror	r27
 c26:	f7 95       	ror	r31
 c28:	9e 3f       	cpi	r25, 0xFE	; 254
 c2a:	08 f0       	brcs	.+2      	; 0xc2e <__addsf3x+0x9a>
 c2c:	b0 cf       	rjmp	.-160    	; 0xb8e <__addsf3+0x28>
 c2e:	93 95       	inc	r25
 c30:	88 0f       	add	r24, r24
 c32:	08 f0       	brcs	.+2      	; 0xc36 <__addsf3x+0xa2>
 c34:	99 27       	eor	r25, r25
 c36:	ee 0f       	add	r30, r30
 c38:	97 95       	ror	r25
 c3a:	87 95       	ror	r24
 c3c:	08 95       	ret

00000c3e <ceil>:
 c3e:	0e 94 15 07 	call	0xe2a	; 0xe2a <__fp_trunc>
 c42:	90 f0       	brcs	.+36     	; 0xc68 <ceil+0x2a>
 c44:	9f 37       	cpi	r25, 0x7F	; 127
 c46:	48 f4       	brcc	.+18     	; 0xc5a <ceil+0x1c>
 c48:	91 11       	cpse	r25, r1
 c4a:	16 f4       	brtc	.+4      	; 0xc50 <ceil+0x12>
 c4c:	0c 94 2e 07 	jmp	0xe5c	; 0xe5c <__fp_szero>
 c50:	60 e0       	ldi	r22, 0x00	; 0
 c52:	70 e0       	ldi	r23, 0x00	; 0
 c54:	80 e8       	ldi	r24, 0x80	; 128
 c56:	9f e3       	ldi	r25, 0x3F	; 63
 c58:	08 95       	ret
 c5a:	26 f0       	brts	.+8      	; 0xc64 <ceil+0x26>
 c5c:	1b 16       	cp	r1, r27
 c5e:	61 1d       	adc	r22, r1
 c60:	71 1d       	adc	r23, r1
 c62:	81 1d       	adc	r24, r1
 c64:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__fp_mintl>
 c68:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__fp_mpack>

00000c6c <__fixunssfsi>:
 c6c:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__fp_splitA>
 c70:	88 f0       	brcs	.+34     	; 0xc94 <__fixunssfsi+0x28>
 c72:	9f 57       	subi	r25, 0x7F	; 127
 c74:	98 f0       	brcs	.+38     	; 0xc9c <__fixunssfsi+0x30>
 c76:	b9 2f       	mov	r27, r25
 c78:	99 27       	eor	r25, r25
 c7a:	b7 51       	subi	r27, 0x17	; 23
 c7c:	b0 f0       	brcs	.+44     	; 0xcaa <__fixunssfsi+0x3e>
 c7e:	e1 f0       	breq	.+56     	; 0xcb8 <__fixunssfsi+0x4c>
 c80:	66 0f       	add	r22, r22
 c82:	77 1f       	adc	r23, r23
 c84:	88 1f       	adc	r24, r24
 c86:	99 1f       	adc	r25, r25
 c88:	1a f0       	brmi	.+6      	; 0xc90 <__fixunssfsi+0x24>
 c8a:	ba 95       	dec	r27
 c8c:	c9 f7       	brne	.-14     	; 0xc80 <__fixunssfsi+0x14>
 c8e:	14 c0       	rjmp	.+40     	; 0xcb8 <__fixunssfsi+0x4c>
 c90:	b1 30       	cpi	r27, 0x01	; 1
 c92:	91 f0       	breq	.+36     	; 0xcb8 <__fixunssfsi+0x4c>
 c94:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__fp_zero>
 c98:	b1 e0       	ldi	r27, 0x01	; 1
 c9a:	08 95       	ret
 c9c:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <__fp_zero>
 ca0:	67 2f       	mov	r22, r23
 ca2:	78 2f       	mov	r23, r24
 ca4:	88 27       	eor	r24, r24
 ca6:	b8 5f       	subi	r27, 0xF8	; 248
 ca8:	39 f0       	breq	.+14     	; 0xcb8 <__fixunssfsi+0x4c>
 caa:	b9 3f       	cpi	r27, 0xF9	; 249
 cac:	cc f3       	brlt	.-14     	; 0xca0 <__fixunssfsi+0x34>
 cae:	86 95       	lsr	r24
 cb0:	77 95       	ror	r23
 cb2:	67 95       	ror	r22
 cb4:	b3 95       	inc	r27
 cb6:	d9 f7       	brne	.-10     	; 0xcae <__fixunssfsi+0x42>
 cb8:	3e f4       	brtc	.+14     	; 0xcc8 <__fixunssfsi+0x5c>
 cba:	90 95       	com	r25
 cbc:	80 95       	com	r24
 cbe:	70 95       	com	r23
 cc0:	61 95       	neg	r22
 cc2:	7f 4f       	sbci	r23, 0xFF	; 255
 cc4:	8f 4f       	sbci	r24, 0xFF	; 255
 cc6:	9f 4f       	sbci	r25, 0xFF	; 255
 cc8:	08 95       	ret

00000cca <__floatunsisf>:
 cca:	e8 94       	clt
 ccc:	09 c0       	rjmp	.+18     	; 0xce0 <__floatsisf+0x12>

00000cce <__floatsisf>:
 cce:	97 fb       	bst	r25, 7
 cd0:	3e f4       	brtc	.+14     	; 0xce0 <__floatsisf+0x12>
 cd2:	90 95       	com	r25
 cd4:	80 95       	com	r24
 cd6:	70 95       	com	r23
 cd8:	61 95       	neg	r22
 cda:	7f 4f       	sbci	r23, 0xFF	; 255
 cdc:	8f 4f       	sbci	r24, 0xFF	; 255
 cde:	9f 4f       	sbci	r25, 0xFF	; 255
 ce0:	99 23       	and	r25, r25
 ce2:	a9 f0       	breq	.+42     	; 0xd0e <__floatsisf+0x40>
 ce4:	f9 2f       	mov	r31, r25
 ce6:	96 e9       	ldi	r25, 0x96	; 150
 ce8:	bb 27       	eor	r27, r27
 cea:	93 95       	inc	r25
 cec:	f6 95       	lsr	r31
 cee:	87 95       	ror	r24
 cf0:	77 95       	ror	r23
 cf2:	67 95       	ror	r22
 cf4:	b7 95       	ror	r27
 cf6:	f1 11       	cpse	r31, r1
 cf8:	f8 cf       	rjmp	.-16     	; 0xcea <__floatsisf+0x1c>
 cfa:	fa f4       	brpl	.+62     	; 0xd3a <__floatsisf+0x6c>
 cfc:	bb 0f       	add	r27, r27
 cfe:	11 f4       	brne	.+4      	; 0xd04 <__floatsisf+0x36>
 d00:	60 ff       	sbrs	r22, 0
 d02:	1b c0       	rjmp	.+54     	; 0xd3a <__floatsisf+0x6c>
 d04:	6f 5f       	subi	r22, 0xFF	; 255
 d06:	7f 4f       	sbci	r23, 0xFF	; 255
 d08:	8f 4f       	sbci	r24, 0xFF	; 255
 d0a:	9f 4f       	sbci	r25, 0xFF	; 255
 d0c:	16 c0       	rjmp	.+44     	; 0xd3a <__floatsisf+0x6c>
 d0e:	88 23       	and	r24, r24
 d10:	11 f0       	breq	.+4      	; 0xd16 <__floatsisf+0x48>
 d12:	96 e9       	ldi	r25, 0x96	; 150
 d14:	11 c0       	rjmp	.+34     	; 0xd38 <__floatsisf+0x6a>
 d16:	77 23       	and	r23, r23
 d18:	21 f0       	breq	.+8      	; 0xd22 <__floatsisf+0x54>
 d1a:	9e e8       	ldi	r25, 0x8E	; 142
 d1c:	87 2f       	mov	r24, r23
 d1e:	76 2f       	mov	r23, r22
 d20:	05 c0       	rjmp	.+10     	; 0xd2c <__floatsisf+0x5e>
 d22:	66 23       	and	r22, r22
 d24:	71 f0       	breq	.+28     	; 0xd42 <__floatsisf+0x74>
 d26:	96 e8       	ldi	r25, 0x86	; 134
 d28:	86 2f       	mov	r24, r22
 d2a:	70 e0       	ldi	r23, 0x00	; 0
 d2c:	60 e0       	ldi	r22, 0x00	; 0
 d2e:	2a f0       	brmi	.+10     	; 0xd3a <__floatsisf+0x6c>
 d30:	9a 95       	dec	r25
 d32:	66 0f       	add	r22, r22
 d34:	77 1f       	adc	r23, r23
 d36:	88 1f       	adc	r24, r24
 d38:	da f7       	brpl	.-10     	; 0xd30 <__floatsisf+0x62>
 d3a:	88 0f       	add	r24, r24
 d3c:	96 95       	lsr	r25
 d3e:	87 95       	ror	r24
 d40:	97 f9       	bld	r25, 7
 d42:	08 95       	ret

00000d44 <__fp_inf>:
 d44:	97 f9       	bld	r25, 7
 d46:	9f 67       	ori	r25, 0x7F	; 127
 d48:	80 e8       	ldi	r24, 0x80	; 128
 d4a:	70 e0       	ldi	r23, 0x00	; 0
 d4c:	60 e0       	ldi	r22, 0x00	; 0
 d4e:	08 95       	ret

00000d50 <__fp_mintl>:
 d50:	88 23       	and	r24, r24
 d52:	71 f4       	brne	.+28     	; 0xd70 <__fp_mintl+0x20>
 d54:	77 23       	and	r23, r23
 d56:	21 f0       	breq	.+8      	; 0xd60 <__fp_mintl+0x10>
 d58:	98 50       	subi	r25, 0x08	; 8
 d5a:	87 2b       	or	r24, r23
 d5c:	76 2f       	mov	r23, r22
 d5e:	07 c0       	rjmp	.+14     	; 0xd6e <__fp_mintl+0x1e>
 d60:	66 23       	and	r22, r22
 d62:	11 f4       	brne	.+4      	; 0xd68 <__fp_mintl+0x18>
 d64:	99 27       	eor	r25, r25
 d66:	0d c0       	rjmp	.+26     	; 0xd82 <__fp_mintl+0x32>
 d68:	90 51       	subi	r25, 0x10	; 16
 d6a:	86 2b       	or	r24, r22
 d6c:	70 e0       	ldi	r23, 0x00	; 0
 d6e:	60 e0       	ldi	r22, 0x00	; 0
 d70:	2a f0       	brmi	.+10     	; 0xd7c <__fp_mintl+0x2c>
 d72:	9a 95       	dec	r25
 d74:	66 0f       	add	r22, r22
 d76:	77 1f       	adc	r23, r23
 d78:	88 1f       	adc	r24, r24
 d7a:	da f7       	brpl	.-10     	; 0xd72 <__fp_mintl+0x22>
 d7c:	88 0f       	add	r24, r24
 d7e:	96 95       	lsr	r25
 d80:	87 95       	ror	r24
 d82:	97 f9       	bld	r25, 7
 d84:	08 95       	ret

00000d86 <__fp_mpack>:
 d86:	9f 3f       	cpi	r25, 0xFF	; 255
 d88:	31 f0       	breq	.+12     	; 0xd96 <__fp_mpack_finite+0xc>

00000d8a <__fp_mpack_finite>:
 d8a:	91 50       	subi	r25, 0x01	; 1
 d8c:	20 f4       	brcc	.+8      	; 0xd96 <__fp_mpack_finite+0xc>
 d8e:	87 95       	ror	r24
 d90:	77 95       	ror	r23
 d92:	67 95       	ror	r22
 d94:	b7 95       	ror	r27
 d96:	88 0f       	add	r24, r24
 d98:	91 1d       	adc	r25, r1
 d9a:	96 95       	lsr	r25
 d9c:	87 95       	ror	r24
 d9e:	97 f9       	bld	r25, 7
 da0:	08 95       	ret

00000da2 <__fp_nan>:
 da2:	9f ef       	ldi	r25, 0xFF	; 255
 da4:	80 ec       	ldi	r24, 0xC0	; 192
 da6:	08 95       	ret

00000da8 <__fp_pscA>:
 da8:	00 24       	eor	r0, r0
 daa:	0a 94       	dec	r0
 dac:	16 16       	cp	r1, r22
 dae:	17 06       	cpc	r1, r23
 db0:	18 06       	cpc	r1, r24
 db2:	09 06       	cpc	r0, r25
 db4:	08 95       	ret

00000db6 <__fp_pscB>:
 db6:	00 24       	eor	r0, r0
 db8:	0a 94       	dec	r0
 dba:	12 16       	cp	r1, r18
 dbc:	13 06       	cpc	r1, r19
 dbe:	14 06       	cpc	r1, r20
 dc0:	05 06       	cpc	r0, r21
 dc2:	08 95       	ret

00000dc4 <__fp_round>:
 dc4:	09 2e       	mov	r0, r25
 dc6:	03 94       	inc	r0
 dc8:	00 0c       	add	r0, r0
 dca:	11 f4       	brne	.+4      	; 0xdd0 <__fp_round+0xc>
 dcc:	88 23       	and	r24, r24
 dce:	52 f0       	brmi	.+20     	; 0xde4 <__fp_round+0x20>
 dd0:	bb 0f       	add	r27, r27
 dd2:	40 f4       	brcc	.+16     	; 0xde4 <__fp_round+0x20>
 dd4:	bf 2b       	or	r27, r31
 dd6:	11 f4       	brne	.+4      	; 0xddc <__fp_round+0x18>
 dd8:	60 ff       	sbrs	r22, 0
 dda:	04 c0       	rjmp	.+8      	; 0xde4 <__fp_round+0x20>
 ddc:	6f 5f       	subi	r22, 0xFF	; 255
 dde:	7f 4f       	sbci	r23, 0xFF	; 255
 de0:	8f 4f       	sbci	r24, 0xFF	; 255
 de2:	9f 4f       	sbci	r25, 0xFF	; 255
 de4:	08 95       	ret

00000de6 <__fp_split3>:
 de6:	57 fd       	sbrc	r21, 7
 de8:	90 58       	subi	r25, 0x80	; 128
 dea:	44 0f       	add	r20, r20
 dec:	55 1f       	adc	r21, r21
 dee:	59 f0       	breq	.+22     	; 0xe06 <__fp_splitA+0x10>
 df0:	5f 3f       	cpi	r21, 0xFF	; 255
 df2:	71 f0       	breq	.+28     	; 0xe10 <__fp_splitA+0x1a>
 df4:	47 95       	ror	r20

00000df6 <__fp_splitA>:
 df6:	88 0f       	add	r24, r24
 df8:	97 fb       	bst	r25, 7
 dfa:	99 1f       	adc	r25, r25
 dfc:	61 f0       	breq	.+24     	; 0xe16 <__fp_splitA+0x20>
 dfe:	9f 3f       	cpi	r25, 0xFF	; 255
 e00:	79 f0       	breq	.+30     	; 0xe20 <__fp_splitA+0x2a>
 e02:	87 95       	ror	r24
 e04:	08 95       	ret
 e06:	12 16       	cp	r1, r18
 e08:	13 06       	cpc	r1, r19
 e0a:	14 06       	cpc	r1, r20
 e0c:	55 1f       	adc	r21, r21
 e0e:	f2 cf       	rjmp	.-28     	; 0xdf4 <__fp_split3+0xe>
 e10:	46 95       	lsr	r20
 e12:	f1 df       	rcall	.-30     	; 0xdf6 <__fp_splitA>
 e14:	08 c0       	rjmp	.+16     	; 0xe26 <__fp_splitA+0x30>
 e16:	16 16       	cp	r1, r22
 e18:	17 06       	cpc	r1, r23
 e1a:	18 06       	cpc	r1, r24
 e1c:	99 1f       	adc	r25, r25
 e1e:	f1 cf       	rjmp	.-30     	; 0xe02 <__fp_splitA+0xc>
 e20:	86 95       	lsr	r24
 e22:	71 05       	cpc	r23, r1
 e24:	61 05       	cpc	r22, r1
 e26:	08 94       	sec
 e28:	08 95       	ret

00000e2a <__fp_trunc>:
 e2a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__fp_splitA>
 e2e:	a0 f0       	brcs	.+40     	; 0xe58 <__fp_trunc+0x2e>
 e30:	be e7       	ldi	r27, 0x7E	; 126
 e32:	b9 17       	cp	r27, r25
 e34:	88 f4       	brcc	.+34     	; 0xe58 <__fp_trunc+0x2e>
 e36:	bb 27       	eor	r27, r27
 e38:	9f 38       	cpi	r25, 0x8F	; 143
 e3a:	60 f4       	brcc	.+24     	; 0xe54 <__fp_trunc+0x2a>
 e3c:	16 16       	cp	r1, r22
 e3e:	b1 1d       	adc	r27, r1
 e40:	67 2f       	mov	r22, r23
 e42:	78 2f       	mov	r23, r24
 e44:	88 27       	eor	r24, r24
 e46:	98 5f       	subi	r25, 0xF8	; 248
 e48:	f7 cf       	rjmp	.-18     	; 0xe38 <__fp_trunc+0xe>
 e4a:	86 95       	lsr	r24
 e4c:	77 95       	ror	r23
 e4e:	67 95       	ror	r22
 e50:	b1 1d       	adc	r27, r1
 e52:	93 95       	inc	r25
 e54:	96 39       	cpi	r25, 0x96	; 150
 e56:	c8 f3       	brcs	.-14     	; 0xe4a <__fp_trunc+0x20>
 e58:	08 95       	ret

00000e5a <__fp_zero>:
 e5a:	e8 94       	clt

00000e5c <__fp_szero>:
 e5c:	bb 27       	eor	r27, r27
 e5e:	66 27       	eor	r22, r22
 e60:	77 27       	eor	r23, r23
 e62:	cb 01       	movw	r24, r22
 e64:	97 f9       	bld	r25, 7
 e66:	08 95       	ret

00000e68 <__mulsf3>:
 e68:	0e 94 47 07 	call	0xe8e	; 0xe8e <__mulsf3x>
 e6c:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__fp_round>
 e70:	0e 94 d4 06 	call	0xda8	; 0xda8 <__fp_pscA>
 e74:	38 f0       	brcs	.+14     	; 0xe84 <__mulsf3+0x1c>
 e76:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__fp_pscB>
 e7a:	20 f0       	brcs	.+8      	; 0xe84 <__mulsf3+0x1c>
 e7c:	95 23       	and	r25, r21
 e7e:	11 f0       	breq	.+4      	; 0xe84 <__mulsf3+0x1c>
 e80:	0c 94 a2 06 	jmp	0xd44	; 0xd44 <__fp_inf>
 e84:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__fp_nan>
 e88:	11 24       	eor	r1, r1
 e8a:	0c 94 2e 07 	jmp	0xe5c	; 0xe5c <__fp_szero>

00000e8e <__mulsf3x>:
 e8e:	0e 94 f3 06 	call	0xde6	; 0xde6 <__fp_split3>
 e92:	70 f3       	brcs	.-36     	; 0xe70 <__mulsf3+0x8>

00000e94 <__mulsf3_pse>:
 e94:	95 9f       	mul	r25, r21
 e96:	c1 f3       	breq	.-16     	; 0xe88 <__mulsf3+0x20>
 e98:	95 0f       	add	r25, r21
 e9a:	50 e0       	ldi	r21, 0x00	; 0
 e9c:	55 1f       	adc	r21, r21
 e9e:	62 9f       	mul	r22, r18
 ea0:	f0 01       	movw	r30, r0
 ea2:	72 9f       	mul	r23, r18
 ea4:	bb 27       	eor	r27, r27
 ea6:	f0 0d       	add	r31, r0
 ea8:	b1 1d       	adc	r27, r1
 eaa:	63 9f       	mul	r22, r19
 eac:	aa 27       	eor	r26, r26
 eae:	f0 0d       	add	r31, r0
 eb0:	b1 1d       	adc	r27, r1
 eb2:	aa 1f       	adc	r26, r26
 eb4:	64 9f       	mul	r22, r20
 eb6:	66 27       	eor	r22, r22
 eb8:	b0 0d       	add	r27, r0
 eba:	a1 1d       	adc	r26, r1
 ebc:	66 1f       	adc	r22, r22
 ebe:	82 9f       	mul	r24, r18
 ec0:	22 27       	eor	r18, r18
 ec2:	b0 0d       	add	r27, r0
 ec4:	a1 1d       	adc	r26, r1
 ec6:	62 1f       	adc	r22, r18
 ec8:	73 9f       	mul	r23, r19
 eca:	b0 0d       	add	r27, r0
 ecc:	a1 1d       	adc	r26, r1
 ece:	62 1f       	adc	r22, r18
 ed0:	83 9f       	mul	r24, r19
 ed2:	a0 0d       	add	r26, r0
 ed4:	61 1d       	adc	r22, r1
 ed6:	22 1f       	adc	r18, r18
 ed8:	74 9f       	mul	r23, r20
 eda:	33 27       	eor	r19, r19
 edc:	a0 0d       	add	r26, r0
 ede:	61 1d       	adc	r22, r1
 ee0:	23 1f       	adc	r18, r19
 ee2:	84 9f       	mul	r24, r20
 ee4:	60 0d       	add	r22, r0
 ee6:	21 1d       	adc	r18, r1
 ee8:	82 2f       	mov	r24, r18
 eea:	76 2f       	mov	r23, r22
 eec:	6a 2f       	mov	r22, r26
 eee:	11 24       	eor	r1, r1
 ef0:	9f 57       	subi	r25, 0x7F	; 127
 ef2:	50 40       	sbci	r21, 0x00	; 0
 ef4:	9a f0       	brmi	.+38     	; 0xf1c <__mulsf3_pse+0x88>
 ef6:	f1 f0       	breq	.+60     	; 0xf34 <__mulsf3_pse+0xa0>
 ef8:	88 23       	and	r24, r24
 efa:	4a f0       	brmi	.+18     	; 0xf0e <__mulsf3_pse+0x7a>
 efc:	ee 0f       	add	r30, r30
 efe:	ff 1f       	adc	r31, r31
 f00:	bb 1f       	adc	r27, r27
 f02:	66 1f       	adc	r22, r22
 f04:	77 1f       	adc	r23, r23
 f06:	88 1f       	adc	r24, r24
 f08:	91 50       	subi	r25, 0x01	; 1
 f0a:	50 40       	sbci	r21, 0x00	; 0
 f0c:	a9 f7       	brne	.-22     	; 0xef8 <__mulsf3_pse+0x64>
 f0e:	9e 3f       	cpi	r25, 0xFE	; 254
 f10:	51 05       	cpc	r21, r1
 f12:	80 f0       	brcs	.+32     	; 0xf34 <__mulsf3_pse+0xa0>
 f14:	0c 94 a2 06 	jmp	0xd44	; 0xd44 <__fp_inf>
 f18:	0c 94 2e 07 	jmp	0xe5c	; 0xe5c <__fp_szero>
 f1c:	5f 3f       	cpi	r21, 0xFF	; 255
 f1e:	e4 f3       	brlt	.-8      	; 0xf18 <__mulsf3_pse+0x84>
 f20:	98 3e       	cpi	r25, 0xE8	; 232
 f22:	d4 f3       	brlt	.-12     	; 0xf18 <__mulsf3_pse+0x84>
 f24:	86 95       	lsr	r24
 f26:	77 95       	ror	r23
 f28:	67 95       	ror	r22
 f2a:	b7 95       	ror	r27
 f2c:	f7 95       	ror	r31
 f2e:	e7 95       	ror	r30
 f30:	9f 5f       	subi	r25, 0xFF	; 255
 f32:	c1 f7       	brne	.-16     	; 0xf24 <__mulsf3_pse+0x90>
 f34:	fe 2b       	or	r31, r30
 f36:	88 0f       	add	r24, r24
 f38:	91 1d       	adc	r25, r1
 f3a:	96 95       	lsr	r25
 f3c:	87 95       	ror	r24
 f3e:	97 f9       	bld	r25, 7
 f40:	08 95       	ret

00000f42 <_exit>:
 f42:	f8 94       	cli

00000f44 <__stop_program>:
 f44:	ff cf       	rjmp	.-2      	; 0xf44 <__stop_program>
