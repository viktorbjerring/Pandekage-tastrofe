
BatterController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000e24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000db0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800100  00800100  00000e24  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016ef  00000000  00000000  0000103c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e93  00000000  00000000  0000272b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001068  00000000  00000000  000035be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000398  00000000  00000000  00004628  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c5d  00000000  00000000  000049c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000665  00000000  00000000  0000561d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00005c82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 ca 01 	jmp	0x394	; 0x394 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 37 04 	jmp	0x86e	; 0x86e <__vector_4>
  14:	0c 94 46 03 	jmp	0x68c	; 0x68c <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 0b 04 	jmp	0x816	; 0x816 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 32       	cpi	r26, 0x2A	; 42
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 92 03 	call	0x724	; 0x724 <main>
  88:	0c 94 d6 06 	jmp	0xdac	; 0xdac <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z22beginCoolingRegulationv>:
	while (!isReady) {
		_delay_ms(10);
	}
	isReady = false;
	return temp;
}
  90:	21 9a       	sbi	0x04, 1	; 4
  92:	3b 98       	cbi	0x07, 3	; 7
  94:	e0 e8       	ldi	r30, 0x80	; 128
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	82 68       	ori	r24, 0x82	; 130
  9c:	80 83       	st	Z, r24
  9e:	e1 e8       	ldi	r30, 0x81	; 129
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	8a 61       	ori	r24, 0x1A	; 26
  a6:	80 83       	st	Z, r24
  a8:	8f e3       	ldi	r24, 0x3F	; 63
  aa:	9c e9       	ldi	r25, 0x9C	; 156
  ac:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
  b0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
  b4:	80 e2       	ldi	r24, 0x20	; 32
  b6:	9e e4       	ldi	r25, 0x4E	; 78
  b8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  bc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
  c0:	16 bc       	out	0x26, r1	; 38
  c2:	84 b5       	in	r24, 0x24	; 36
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	84 bd       	out	0x24, r24	; 36
  c8:	85 b5       	in	r24, 0x25	; 37
  ca:	85 60       	ori	r24, 0x05	; 5
  cc:	85 bd       	out	0x25, r24	; 37
  ce:	83 e4       	ldi	r24, 0x43	; 67
  d0:	87 bd       	out	0x27, r24	; 39
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	80 83       	st	Z, r24
  dc:	ac e7       	ldi	r26, 0x7C	; 124
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	8c 91       	ld	r24, X
  e2:	83 62       	ori	r24, 0x23	; 35
  e4:	8c 93       	st	X, r24
  e6:	80 81       	ld	r24, Z
  e8:	88 6a       	ori	r24, 0xA8	; 168
  ea:	80 83       	st	Z, r24
  ec:	eb e7       	ldi	r30, 0x7B	; 123
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	83 60       	ori	r24, 0x03	; 3
  f4:	80 83       	st	Z, r24
  f6:	08 95       	ret

000000f8 <_Z20endCoolingRegulationv>:
  f8:	15 bc       	out	0x25, r1	; 37
  fa:	e0 e8       	ldi	r30, 0x80	; 128
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	8f 77       	andi	r24, 0x7F	; 127
 102:	80 83       	st	Z, r24
 104:	ea e7       	ldi	r30, 0x7A	; 122
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	8f 77       	andi	r24, 0x7F	; 127
 10c:	80 83       	st	Z, r24
 10e:	08 95       	ret

00000110 <__vector_21>:

ISR(ADC_vect) {
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
	TIFR0 |= (1 << OCF0A);
 11e:	a9 9a       	sbi	0x15, 1	; 21
	temp = ADC >> 6; // Read ADC
 120:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 124:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 128:	00 24       	eor	r0, r0
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	00 1c       	adc	r0, r0
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	00 1c       	adc	r0, r0
 136:	89 2f       	mov	r24, r25
 138:	90 2d       	mov	r25, r0
 13a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <temp+0x1>
 13e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <temp>
	isReady = true;
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	// Set OCR1A for PWM.
	//ADCSRA |= (1 << ADIF); //Clear interrupt
}
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <_Z8addDoughv>:
}


void addDough()
{
	servoTop = extended;
 156:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <extended>
 15a:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <extended+0x1>
 15e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <servoTop+0x1>
 162:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <servoTop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	83 ec       	ldi	r24, 0xC3	; 195
 16a:	99 e0       	ldi	r25, 0x09	; 9
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <_Z8addDoughv+0x16>
 174:	00 c0       	rjmp	.+0      	; 0x176 <_Z8addDoughv+0x20>
 176:	00 00       	nop
	_delay_ms(moveTime);
	servoBottom = retracted;
 178:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <retracted>
 17c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <retracted+0x1>
 180:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <servoBottom+0x1>
 184:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <servoBottom>
 188:	2f ef       	ldi	r18, 0xFF	; 255
 18a:	83 ec       	ldi	r24, 0xC3	; 195
 18c:	99 e0       	ldi	r25, 0x09	; 9
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	80 40       	sbci	r24, 0x00	; 0
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <_Z8addDoughv+0x38>
 196:	00 c0       	rjmp	.+0      	; 0x198 <_Z8addDoughv+0x42>
 198:	00 00       	nop
	_delay_ms(moveTime);
	servoBottom = extended;
 19a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <extended>
 19e:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <extended+0x1>
 1a2:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <servoBottom+0x1>
 1a6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <servoBottom>
 1aa:	2f ef       	ldi	r18, 0xFF	; 255
 1ac:	83 ec       	ldi	r24, 0xC3	; 195
 1ae:	99 e0       	ldi	r25, 0x09	; 9
 1b0:	21 50       	subi	r18, 0x01	; 1
 1b2:	80 40       	sbci	r24, 0x00	; 0
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <_Z8addDoughv+0x5a>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <_Z8addDoughv+0x64>
 1ba:	00 00       	nop
	_delay_ms(moveTime);
	servoTop = retracted;
 1bc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <retracted>
 1c0:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <retracted+0x1>
 1c4:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <servoTop+0x1>
 1c8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <servoTop>
 1cc:	08 95       	ret

000001ce <__vector_13>:
	return;
}

ISR(TIMER1_OVF_vect) {
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	8f 93       	push	r24
 1da:	9f 93       	push	r25
	cycle++;
 1dc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <cycle>
 1e0:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <cycle+0x1>
 1e4:	01 96       	adiw	r24, 0x01	; 1
 1e6:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <cycle+0x1>
 1ea:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <cycle>
	if (cycle == cycleCount - 1) {
 1ee:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <cycle>
 1f2:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <cycle+0x1>
 1f6:	04 97       	sbiw	r24, 0x04	; 4
 1f8:	49 f4       	brne	.+18     	; 0x20c <__vector_13+0x3e>
		OCR1B = servoBottom;
 1fa:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <servoBottom>
 1fe:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <servoBottom+0x1>
 202:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 206:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 20a:	22 c0       	rjmp	.+68     	; 0x250 <__vector_13+0x82>
	} else if (cycle == cycleCount) {
 20c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <cycle>
 210:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <cycle+0x1>
 214:	05 97       	sbiw	r24, 0x05	; 5
 216:	11 f4       	brne	.+4      	; 0x21c <__vector_13+0x4e>
		PORTB |= (1 << PORTB3);		
 218:	2b 9a       	sbi	0x05, 3	; 5
 21a:	1a c0       	rjmp	.+52     	; 0x250 <__vector_13+0x82>
	} else if (cycle == cycleCount * 2 - 1) {
 21c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <cycle>
 220:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <cycle+0x1>
 224:	09 97       	sbiw	r24, 0x09	; 9
 226:	49 f4       	brne	.+18     	; 0x23a <__vector_13+0x6c>
		OCR1B = servoTop;	
 228:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <servoTop>
 22c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <servoTop+0x1>
 230:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 234:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 238:	0b c0       	rjmp	.+22     	; 0x250 <__vector_13+0x82>
	} else if (cycle == cycleCount * 2) {
 23a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <cycle>
 23e:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <cycle+0x1>
 242:	0a 97       	sbiw	r24, 0x0a	; 10
 244:	29 f4       	brne	.+10     	; 0x250 <__vector_13+0x82>
		cycle = 0;	
 246:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <cycle+0x1>
 24a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <cycle>
		PORTB &= ~(1 << PORTB3);
 24e:	2b 98       	cbi	0x05, 3	; 5
	}
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <_ZL17I2C_SLAVE_sendBitc>:
#include "../main.h"
#include "../I2C/I2C_SLAVE.h"

void initControlUnit()
{
	I2C_SLAVE_init();
 25e:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <_ZL19I2C_SLAVE_dataReady>
 262:	91 30       	cpi	r25, 0x01	; 1
 264:	41 f4       	brne	.+16     	; 0x276 <_ZL17I2C_SLAVE_sendBitc+0x18>
 266:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <_ZL16I2C_SLAVE_toSend>
 26a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <_ZL18I2C_SLAVE_tempSave>
 26e:	92 e0       	ldi	r25, 0x02	; 2
 270:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <_ZL19I2C_SLAVE_dataReady>
 274:	03 c0       	rjmp	.+6      	; 0x27c <_ZL17I2C_SLAVE_sendBitc+0x1e>
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <_ZL19I2C_SLAVE_dataReady>
 27c:	87 95       	ror	r24
 27e:	88 27       	eor	r24, r24
 280:	87 95       	ror	r24
 282:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <_ZL16I2C_SLAVE_toSend>
 286:	87 e0       	ldi	r24, 0x07	; 7
 288:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZL20I2C_SLAVE_haveSended>
 28c:	08 95       	ret

0000028e <_ZL19I2C_SLAVE_beginSendv>:
 28e:	e9 e6       	ldi	r30, 0x69	; 105
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	82 60       	ori	r24, 0x02	; 2
 296:	80 83       	st	Z, r24
 298:	80 81       	ld	r24, Z
 29a:	8e 7f       	andi	r24, 0xFE	; 254
 29c:	80 83       	st	Z, r24
 29e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <_ZL19I2C_SLAVE_dataReady>
 2a2:	82 30       	cpi	r24, 0x02	; 2
 2a4:	21 f4       	brne	.+8      	; 0x2ae <_ZL19I2C_SLAVE_beginSendv+0x20>
 2a6:	83 e0       	ldi	r24, 0x03	; 3
 2a8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <_ZL19I2C_SLAVE_dataReady>
 2ac:	08 95       	ret
 2ae:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <_ZL19I2C_SLAVE_dataReady>
 2b2:	08 95       	ret

000002b4 <_Z19I2C_SLAVE_checkDatav>:
 2b4:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <_ZL15I2C_SLAVE_first>
 2b8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <_ZL14I2C_SLAVE_last>
 2bc:	98 13       	cpse	r25, r24
 2be:	03 c0       	rjmp	.+6      	; 0x2c6 <_Z19I2C_SLAVE_checkDatav+0x12>
 2c0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <_ZL14I2C_SLAVE_full>
 2c4:	08 95       	ret
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	08 95       	ret

000002ca <_Z18I2C_SLAVE_sendDatac>:
 2ca:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <_ZL16I2C_SLAVE_toSend>
 2ce:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <_ZL20I2C_SLAVE_haveSended>
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <_ZL19I2C_SLAVE_dataReady>
 2d8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_ZL19I2C_SLAVE_beginHold>
 2dc:	88 23       	and	r24, r24
 2de:	b9 f1       	breq	.+110    	; 0x34e <_Z18I2C_SLAVE_sendDatac+0x84>
 2e0:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <_ZL19I2C_SLAVE_beginHold>
 2e4:	e8 e6       	ldi	r30, 0x68	; 104
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 81       	ld	r24, Z
 2ea:	8b 7f       	andi	r24, 0xFB	; 251
 2ec:	80 83       	st	Z, r24
 2ee:	2b b1       	in	r18, 0x0b	; 11
 2f0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <_ZL16I2C_SLAVE_toSend>
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	88 0f       	add	r24, r24
 2f8:	89 2f       	mov	r24, r25
 2fa:	88 1f       	adc	r24, r24
 2fc:	99 0b       	sbc	r25, r25
 2fe:	82 95       	swap	r24
 300:	92 95       	swap	r25
 302:	90 7f       	andi	r25, 0xF0	; 240
 304:	98 27       	eor	r25, r24
 306:	80 7f       	andi	r24, 0xF0	; 240
 308:	98 27       	eor	r25, r24
 30a:	80 71       	andi	r24, 0x10	; 16
 30c:	92 2f       	mov	r25, r18
 30e:	9f 7e       	andi	r25, 0xEF	; 239
 310:	89 0f       	add	r24, r25
 312:	8b b9       	out	0x0b, r24	; 11
 314:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL20I2C_SLAVE_haveSended>
 318:	8f 5f       	subi	r24, 0xFF	; 255
 31a:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZL20I2C_SLAVE_haveSended>
 31e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <_ZL16I2C_SLAVE_toSend>
 322:	29 b1       	in	r18, 0x09	; 9
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	88 0f       	add	r24, r24
 328:	89 2f       	mov	r24, r25
 32a:	88 1f       	adc	r24, r24
 32c:	99 0b       	sbc	r25, r25
 32e:	82 95       	swap	r24
 330:	92 95       	swap	r25
 332:	90 7f       	andi	r25, 0xF0	; 240
 334:	98 27       	eor	r25, r24
 336:	80 7f       	andi	r24, 0xF0	; 240
 338:	98 27       	eor	r25, r24
 33a:	20 71       	andi	r18, 0x10	; 16
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	82 17       	cp	r24, r18
 340:	93 07       	cpc	r25, r19
 342:	69 f7       	brne	.-38     	; 0x31e <_Z18I2C_SLAVE_sendDatac+0x54>
 344:	e8 e6       	ldi	r30, 0x68	; 104
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	84 60       	ori	r24, 0x04	; 4
 34c:	80 83       	st	Z, r24
 34e:	5a 9a       	sbi	0x0b, 2	; 11
 350:	08 95       	ret

00000352 <_Z17I2C_SLAVE_getDatav>:
 352:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <_Z19I2C_SLAVE_checkDatav>
 356:	88 23       	and	r24, r24
 358:	e1 f3       	breq	.-8      	; 0x352 <_Z17I2C_SLAVE_getDatav>
 35a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <_Z19I2C_SLAVE_checkDatav>
 35e:	88 23       	and	r24, r24
 360:	b9 f0       	breq	.+46     	; 0x390 <_Z17I2C_SLAVE_getDatav+0x3e>
 362:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <_ZL14I2C_SLAVE_full>
 366:	81 11       	cpse	r24, r1
 368:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <_ZL14I2C_SLAVE_full>
 36c:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <_ZL15I2C_SLAVE_first>
 370:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_ZL15I2C_SLAVE_first>
 374:	8f 5f       	subi	r24, 0xFF	; 255
 376:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <_ZL15I2C_SLAVE_first>
 37a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_ZL15I2C_SLAVE_first>
 37e:	8a 30       	cpi	r24, 0x0A	; 10
 380:	10 f0       	brcs	.+4      	; 0x386 <_Z17I2C_SLAVE_getDatav+0x34>
 382:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <_ZL15I2C_SLAVE_first>
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	e3 5f       	subi	r30, 0xF3	; 243
 38a:	fe 4f       	sbci	r31, 0xFE	; 254
 38c:	80 81       	ld	r24, Z
 38e:	08 95       	ret
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	08 95       	ret

00000394 <__vector_1>:
 394:	1f 92       	push	r1
 396:	0f 92       	push	r0
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	0f 92       	push	r0
 39c:	11 24       	eor	r1, r1
 39e:	2f 93       	push	r18
 3a0:	3f 93       	push	r19
 3a2:	4f 93       	push	r20
 3a4:	5f 93       	push	r21
 3a6:	6f 93       	push	r22
 3a8:	7f 93       	push	r23
 3aa:	8f 93       	push	r24
 3ac:	9f 93       	push	r25
 3ae:	af 93       	push	r26
 3b0:	bf 93       	push	r27
 3b2:	ef 93       	push	r30
 3b4:	ff 93       	push	r31
 3b6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <_ZL22I2C_SLAVE_startRecived>
 3ba:	88 23       	and	r24, r24
 3bc:	09 f4       	brne	.+2      	; 0x3c0 <__vector_1+0x2c>
 3be:	55 c1       	rjmp	.+682    	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 3c0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 3c4:	83 70       	andi	r24, 0x03	; 3
 3c6:	83 30       	cpi	r24, 0x03	; 3
 3c8:	09 f0       	breq	.+2      	; 0x3cc <__vector_1+0x38>
 3ca:	bb c0       	rjmp	.+374    	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 3cc:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL20I2C_SLAVE_haveSended>
 3d0:	88 30       	cpi	r24, 0x08	; 8
 3d2:	40 f0       	brcs	.+16     	; 0x3e4 <__vector_1+0x50>
 3d4:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <_ZL20I2C_SLAVE_haveSended>
 3d8:	8a b1       	in	r24, 0x0a	; 10
 3da:	8b 7e       	andi	r24, 0xEB	; 235
 3dc:	8a b9       	out	0x0a, r24	; 10
 3de:	8b b1       	in	r24, 0x0b	; 11
 3e0:	84 61       	ori	r24, 0x14	; 20
 3e2:	8b b9       	out	0x0b, r24	; 11
 3e4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <_ZL21I2C_SLAVE_recevedBits>
 3e8:	87 30       	cpi	r24, 0x07	; 7
 3ea:	50 f5       	brcc	.+84     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 3ec:	66 e0       	ldi	r22, 0x06	; 6
 3ee:	70 e0       	ldi	r23, 0x00	; 0
 3f0:	68 1b       	sub	r22, r24
 3f2:	71 09       	sbc	r23, r1
 3f4:	21 e0       	ldi	r18, 0x01	; 1
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	a9 01       	movw	r20, r18
 3fa:	06 2e       	mov	r0, r22
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fe:	44 0f       	add	r20, r20
 400:	55 1f       	adc	r21, r21
 402:	0a 94       	dec	r0
 404:	e2 f7       	brpl	.-8      	; 0x3fe <__vector_1+0x6a>
 406:	99 b1       	in	r25, 0x09	; 9
 408:	54 2f       	mov	r21, r20
 40a:	50 95       	com	r21
 40c:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <_ZL21I2C_SLAVE_recevedAddr>
 410:	52 23       	and	r21, r18
 412:	29 2f       	mov	r18, r25
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	35 95       	asr	r19
 418:	27 95       	ror	r18
 41a:	35 95       	asr	r19
 41c:	27 95       	ror	r18
 41e:	35 95       	asr	r19
 420:	27 95       	ror	r18
 422:	35 95       	asr	r19
 424:	27 95       	ror	r18
 426:	02 c0       	rjmp	.+4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 428:	22 0f       	add	r18, r18
 42a:	33 1f       	adc	r19, r19
 42c:	6a 95       	dec	r22
 42e:	e2 f7       	brpl	.-8      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 430:	24 23       	and	r18, r20
 432:	25 0f       	add	r18, r21
 434:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <_ZL21I2C_SLAVE_recevedAddr>
 438:	8f 5f       	subi	r24, 0xFF	; 255
 43a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_ZL21I2C_SLAVE_recevedBits>
 43e:	15 c1       	rjmp	.+554    	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 440:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <_ZL21I2C_SLAVE_recevedAddr>
 444:	90 37       	cpi	r25, 0x70	; 112
 446:	09 f0       	breq	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 448:	10 c1       	rjmp	.+544    	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 44a:	88 30       	cpi	r24, 0x08	; 8
 44c:	b8 f4       	brcc	.+46     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 44e:	8f 5f       	subi	r24, 0xFF	; 255
 450:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_ZL21I2C_SLAVE_recevedBits>
 454:	89 b1       	in	r24, 0x09	; 9
 456:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <_ZL21I2C_SLAVE_shouldWrite>
 45a:	9e 7f       	andi	r25, 0xFE	; 254
 45c:	82 95       	swap	r24
 45e:	81 70       	andi	r24, 0x01	; 1
 460:	89 0f       	add	r24, r25
 462:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <_ZL21I2C_SLAVE_shouldWrite>
 466:	88 23       	and	r24, r24
 468:	19 f0       	breq	.+6      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_ZL19I2C_SLAVE_beginHold>
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	0e 94 2f 01 	call	0x25e	; 0x25e <_ZL17I2C_SLAVE_sendBitc>
 476:	0e 94 47 01 	call	0x28e	; 0x28e <_ZL19I2C_SLAVE_beginSendv>
 47a:	f7 c0       	rjmp	.+494    	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 47c:	81 31       	cpi	r24, 0x11	; 17
 47e:	08 f0       	brcs	.+2      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 480:	f4 c0       	rjmp	.+488    	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 482:	6f e0       	ldi	r22, 0x0F	; 15
 484:	70 e0       	ldi	r23, 0x00	; 0
 486:	68 1b       	sub	r22, r24
 488:	71 09       	sbc	r23, r1
 48a:	21 e0       	ldi	r18, 0x01	; 1
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	a9 01       	movw	r20, r18
 490:	06 2e       	mov	r0, r22
 492:	02 c0       	rjmp	.+4      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 494:	44 0f       	add	r20, r20
 496:	55 1f       	adc	r21, r21
 498:	0a 94       	dec	r0
 49a:	e2 f7       	brpl	.-8      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 49c:	99 b1       	in	r25, 0x09	; 9
 49e:	54 2f       	mov	r21, r20
 4a0:	50 95       	com	r21
 4a2:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <_ZL21I2C_SLAVE_recevedData>
 4a6:	52 23       	and	r21, r18
 4a8:	29 2f       	mov	r18, r25
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	35 95       	asr	r19
 4ae:	27 95       	ror	r18
 4b0:	35 95       	asr	r19
 4b2:	27 95       	ror	r18
 4b4:	35 95       	asr	r19
 4b6:	27 95       	ror	r18
 4b8:	35 95       	asr	r19
 4ba:	27 95       	ror	r18
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4be:	22 0f       	add	r18, r18
 4c0:	33 1f       	adc	r19, r19
 4c2:	6a 95       	dec	r22
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4c6:	24 23       	and	r18, r20
 4c8:	25 0f       	add	r18, r21
 4ca:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <_ZL21I2C_SLAVE_recevedData>
 4ce:	8f 5f       	subi	r24, 0xFF	; 255
 4d0:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_ZL21I2C_SLAVE_recevedBits>
 4d4:	80 31       	cpi	r24, 0x10	; 16
 4d6:	09 f0       	breq	.+2      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4d8:	c8 c0       	rjmp	.+400    	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 4da:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <_ZL14I2C_SLAVE_full>
 4de:	88 23       	and	r24, r24
 4e0:	69 f0       	breq	.+26     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4e2:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_ZL15I2C_SLAVE_first>
 4e6:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_ZL15I2C_SLAVE_first>
 4ea:	8f 5f       	subi	r24, 0xFF	; 255
 4ec:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <_ZL15I2C_SLAVE_first>
 4f0:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_ZL15I2C_SLAVE_first>
 4f4:	8a 30       	cpi	r24, 0x0A	; 10
 4f6:	10 f0       	brcs	.+4      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4f8:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <_ZL15I2C_SLAVE_first>
 4fc:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <_ZL14I2C_SLAVE_last>
 500:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <_ZL14I2C_SLAVE_last>
 504:	8f 5f       	subi	r24, 0xFF	; 255
 506:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_ZL14I2C_SLAVE_last>
 50a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <_ZL14I2C_SLAVE_last>
 50e:	8a 30       	cpi	r24, 0x0A	; 10
 510:	10 f0       	brcs	.+4      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 512:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <_ZL14I2C_SLAVE_last>
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	e3 5f       	subi	r30, 0xF3	; 243
 51a:	fe 4f       	sbci	r31, 0xFE	; 254
 51c:	20 83       	st	Z, r18
 51e:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <_ZL14I2C_SLAVE_last>
 522:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_ZL15I2C_SLAVE_first>
 526:	98 13       	cpse	r25, r24
 528:	03 c0       	rjmp	.+6      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <_ZL14I2C_SLAVE_full>
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	0e 94 2f 01 	call	0x25e	; 0x25e <_ZL17I2C_SLAVE_sendBitc>
 536:	0e 94 47 01 	call	0x28e	; 0x28e <_ZL19I2C_SLAVE_beginSendv>
 53a:	88 e0       	ldi	r24, 0x08	; 8
 53c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_ZL21I2C_SLAVE_recevedBits>
 540:	94 c0       	rjmp	.+296    	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 542:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 546:	83 70       	andi	r24, 0x03	; 3
 548:	82 30       	cpi	r24, 0x02	; 2
 54a:	09 f0       	breq	.+2      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 54c:	8e c0       	rjmp	.+284    	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 54e:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <_ZL20I2C_SLAVE_haveSended>
 552:	38 30       	cpi	r19, 0x08	; 8
 554:	08 f4       	brcc	.+2      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 556:	51 c0       	rjmp	.+162    	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
 558:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <_ZL19I2C_SLAVE_dataReady>
 55c:	82 50       	subi	r24, 0x02	; 2
 55e:	82 30       	cpi	r24, 0x02	; 2
 560:	90 f5       	brcc	.+100    	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <_ZL19I2C_SLAVE_dataReady>
 568:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZL20I2C_SLAVE_haveSended>
 56c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <_ZL18I2C_SLAVE_tempSave>
 570:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <_ZL16I2C_SLAVE_toSend>
 574:	2a b1       	in	r18, 0x0a	; 10
 576:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <_ZL16I2C_SLAVE_toSend>
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	80 95       	com	r24
 57e:	90 95       	com	r25
 580:	88 0f       	add	r24, r24
 582:	89 2f       	mov	r24, r25
 584:	88 1f       	adc	r24, r24
 586:	99 0b       	sbc	r25, r25
 588:	82 95       	swap	r24
 58a:	92 95       	swap	r25
 58c:	90 7f       	andi	r25, 0xF0	; 240
 58e:	98 27       	eor	r25, r24
 590:	80 7f       	andi	r24, 0xF0	; 240
 592:	98 27       	eor	r25, r24
 594:	80 71       	andi	r24, 0x10	; 16
 596:	92 2f       	mov	r25, r18
 598:	9f 7e       	andi	r25, 0xEF	; 239
 59a:	89 0f       	add	r24, r25
 59c:	8a b9       	out	0x0a, r24	; 10
 59e:	2b b1       	in	r18, 0x0b	; 11
 5a0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <_ZL16I2C_SLAVE_toSend>
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	88 0f       	add	r24, r24
 5a8:	89 2f       	mov	r24, r25
 5aa:	88 1f       	adc	r24, r24
 5ac:	99 0b       	sbc	r25, r25
 5ae:	82 95       	swap	r24
 5b0:	92 95       	swap	r25
 5b2:	90 7f       	andi	r25, 0xF0	; 240
 5b4:	98 27       	eor	r25, r24
 5b6:	80 7f       	andi	r24, 0xF0	; 240
 5b8:	98 27       	eor	r25, r24
 5ba:	80 71       	andi	r24, 0x10	; 16
 5bc:	92 2f       	mov	r25, r18
 5be:	9f 7e       	andi	r25, 0xEF	; 239
 5c0:	89 0f       	add	r24, r25
 5c2:	8b b9       	out	0x0b, r24	; 11
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
 5c6:	54 98       	cbi	0x0a, 4	; 10
 5c8:	5c 9a       	sbi	0x0b, 4	; 11
 5ca:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_ZL19I2C_SLAVE_beginHold>
 5ce:	88 23       	and	r24, r24
 5d0:	59 f0       	breq	.+22     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5d2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <_ZL19I2C_SLAVE_dataReady>
 5d6:	81 50       	subi	r24, 0x01	; 1
 5d8:	82 30       	cpi	r24, 0x02	; 2
 5da:	18 f4       	brcc	.+6      	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
 5dc:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <_ZL19I2C_SLAVE_beginHold>
 5e0:	44 c0       	rjmp	.+136    	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 5e2:	52 9a       	sbi	0x0a, 2	; 10
 5e4:	5a 98       	cbi	0x0b, 2	; 11
 5e6:	41 c0       	rjmp	.+130    	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 5e8:	e9 e6       	ldi	r30, 0x69	; 105
 5ea:	f0 e0       	ldi	r31, 0x00	; 0
 5ec:	80 81       	ld	r24, Z
 5ee:	82 60       	ori	r24, 0x02	; 2
 5f0:	80 83       	st	Z, r24
 5f2:	80 81       	ld	r24, Z
 5f4:	81 60       	ori	r24, 0x01	; 1
 5f6:	80 83       	st	Z, r24
 5f8:	38 c0       	rjmp	.+112    	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 5fa:	2a b1       	in	r18, 0x0a	; 10
 5fc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <_ZL16I2C_SLAVE_toSend>
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	80 95       	com	r24
 604:	90 95       	com	r25
 606:	47 e0       	ldi	r20, 0x07	; 7
 608:	50 e0       	ldi	r21, 0x00	; 0
 60a:	ba 01       	movw	r22, r20
 60c:	63 1b       	sub	r22, r19
 60e:	71 09       	sbc	r23, r1
 610:	02 c0       	rjmp	.+4      	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 612:	95 95       	asr	r25
 614:	87 95       	ror	r24
 616:	6a 95       	dec	r22
 618:	e2 f7       	brpl	.-8      	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 61a:	82 95       	swap	r24
 61c:	92 95       	swap	r25
 61e:	90 7f       	andi	r25, 0xF0	; 240
 620:	98 27       	eor	r25, r24
 622:	80 7f       	andi	r24, 0xF0	; 240
 624:	98 27       	eor	r25, r24
 626:	80 71       	andi	r24, 0x10	; 16
 628:	92 2f       	mov	r25, r18
 62a:	9f 7e       	andi	r25, 0xEF	; 239
 62c:	89 0f       	add	r24, r25
 62e:	8a b9       	out	0x0a, r24	; 10
 630:	2b b1       	in	r18, 0x0b	; 11
 632:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <_ZL16I2C_SLAVE_toSend>
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <_ZL20I2C_SLAVE_haveSended>
 63c:	43 1b       	sub	r20, r19
 63e:	51 09       	sbc	r21, r1
 640:	02 c0       	rjmp	.+4      	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
 642:	95 95       	asr	r25
 644:	87 95       	ror	r24
 646:	4a 95       	dec	r20
 648:	e2 f7       	brpl	.-8      	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
 64a:	82 95       	swap	r24
 64c:	92 95       	swap	r25
 64e:	90 7f       	andi	r25, 0xF0	; 240
 650:	98 27       	eor	r25, r24
 652:	80 7f       	andi	r24, 0xF0	; 240
 654:	98 27       	eor	r25, r24
 656:	80 71       	andi	r24, 0x10	; 16
 658:	92 2f       	mov	r25, r18
 65a:	9f 7e       	andi	r25, 0xEF	; 239
 65c:	89 0f       	add	r24, r25
 65e:	8b b9       	out	0x0b, r24	; 11
 660:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL20I2C_SLAVE_haveSended>
 664:	8f 5f       	subi	r24, 0xFF	; 255
 666:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZL20I2C_SLAVE_haveSended>
 66a:	ff 91       	pop	r31
 66c:	ef 91       	pop	r30
 66e:	bf 91       	pop	r27
 670:	af 91       	pop	r26
 672:	9f 91       	pop	r25
 674:	8f 91       	pop	r24
 676:	7f 91       	pop	r23
 678:	6f 91       	pop	r22
 67a:	5f 91       	pop	r21
 67c:	4f 91       	pop	r20
 67e:	3f 91       	pop	r19
 680:	2f 91       	pop	r18
 682:	0f 90       	pop	r0
 684:	0f be       	out	0x3f, r0	; 63
 686:	0f 90       	pop	r0
 688:	1f 90       	pop	r1
 68a:	18 95       	reti

0000068c <__vector_5>:
 68c:	1f 92       	push	r1
 68e:	0f 92       	push	r0
 690:	0f b6       	in	r0, 0x3f	; 63
 692:	0f 92       	push	r0
 694:	11 24       	eor	r1, r1
 696:	8f 93       	push	r24
 698:	ef 93       	push	r30
 69a:	ff 93       	push	r31
 69c:	4a 9b       	sbis	0x09, 2	; 9
 69e:	14 c0       	rjmp	.+40     	; 0x6c8 <__vector_5+0x3c>
 6a0:	4c 9b       	sbis	0x09, 4	; 9
 6a2:	0f c0       	rjmp	.+30     	; 0x6c2 <__vector_5+0x36>
 6a4:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <_ZL22I2C_SLAVE_startRecived>
 6a8:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <_ZL21I2C_SLAVE_recevedAddr>
 6ac:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <_ZL21I2C_SLAVE_recevedBits>
 6b0:	e9 e6       	ldi	r30, 0x69	; 105
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	80 81       	ld	r24, Z
 6b6:	82 60       	ori	r24, 0x02	; 2
 6b8:	80 83       	st	Z, r24
 6ba:	80 81       	ld	r24, Z
 6bc:	81 60       	ori	r24, 0x01	; 1
 6be:	80 83       	st	Z, r24
 6c0:	03 c0       	rjmp	.+6      	; 0x6c8 <__vector_5+0x3c>
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <_ZL22I2C_SLAVE_startRecived>
 6c8:	ff 91       	pop	r31
 6ca:	ef 91       	pop	r30
 6cc:	8f 91       	pop	r24
 6ce:	0f 90       	pop	r0
 6d0:	0f be       	out	0x3f, r0	; 63
 6d2:	0f 90       	pop	r0
 6d4:	1f 90       	pop	r1
 6d6:	18 95       	reti

000006d8 <_Z9slavePollv>:
}

void slavePoll() {
	if (I2C_SLAVE_checkData()) {
 6d8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <_Z19I2C_SLAVE_checkDatav>
 6dc:	88 23       	and	r24, r24
 6de:	09 f1       	breq	.+66     	; 0x722 <_Z9slavePollv+0x4a>
		I2C_commands_t cmd = I2C_SLAVE_getData();
 6e0:	0e 94 a9 01 	call	0x352	; 0x352 <_Z17I2C_SLAVE_getDatav>
		DDRB |= (1<<PORTB0);
 6e4:	20 9a       	sbi	0x04, 0	; 4
		PORTB |= (1<<PORTB0);
 6e6:	28 9a       	sbi	0x05, 0	; 5
		switch (cmd) {
 6e8:	85 30       	cpi	r24, 0x05	; 5
 6ea:	71 f0       	breq	.+28     	; 0x708 <_Z9slavePollv+0x30>
 6ec:	28 f4       	brcc	.+10     	; 0x6f8 <_Z9slavePollv+0x20>
 6ee:	83 30       	cpi	r24, 0x03	; 3
 6f0:	41 f0       	breq	.+16     	; 0x702 <_Z9slavePollv+0x2a>
 6f2:	84 30       	cpi	r24, 0x04	; 4
 6f4:	91 f0       	breq	.+36     	; 0x71a <_Z9slavePollv+0x42>
 6f6:	08 95       	ret
 6f8:	86 30       	cpi	r24, 0x06	; 6
 6fa:	49 f0       	breq	.+18     	; 0x70e <_Z9slavePollv+0x36>
 6fc:	87 30       	cpi	r24, 0x07	; 7
 6fe:	51 f0       	breq	.+20     	; 0x714 <_Z9slavePollv+0x3c>
 700:	08 95       	ret
			default:
				break;
			
			case MAKE_PANCAKE:
				pancakeBegin();
 702:	0e 94 a2 03 	call	0x744	; 0x744 <_Z12pancakeBeginv>
				break;
 706:	08 95       	ret
				
			case TURN_ON_COOLING:
				turnOnCooling();
 708:	0e 94 b0 03 	call	0x760	; 0x760 <_Z13turnOnCoolingv>
				break;
 70c:	08 95       	ret
				
			case TURN_OFF_COOLING:
				turnOffCooling();
 70e:	0e 94 b3 03 	call	0x766	; 0x766 <_Z14turnOffCoolingv>
				break;
 712:	08 95       	ret
				
			case TURN_OFF_ALARM:
				turnOffAlarm();
 714:	0e 94 b6 03 	call	0x76c	; 0x76c <_Z12turnOffAlarmv>
				break;
 718:	08 95       	ret
			
			case GET_BATTER_AMOUNT:
				int level = getBatterAmount();
 71a:	0e 94 a9 03 	call	0x752	; 0x752 <_Z15getBatterAmountv>
				I2C_SLAVE_sendData(static_cast<char>(level));
 71e:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z18I2C_SLAVE_sendDatac>
 722:	08 95       	ret

00000724 <main>:
#include "PanController/PanController.h"


int main()
{
	sei();
 724:	78 94       	sei
	/*
	initControlUnit();
	initPanController();
	initUltrasonic();
	initBatterDispenser();*/
	beginCoolingRegulation();
 726:	0e 94 48 00 	call	0x90	; 0x90 <_Z22beginCoolingRegulationv>
	/* Initialize indicator */
	INDCTR_DDR |= (1<<INDCTR_PORT_NUM);
 72a:	20 9a       	sbi	0x04, 0	; 4
    while (1) 
    {
		slavePoll();
 72c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_Z9slavePollv>
 730:	2f ef       	ldi	r18, 0xFF	; 255
 732:	89 e6       	ldi	r24, 0x69	; 105
 734:	98 e1       	ldi	r25, 0x18	; 24
 736:	21 50       	subi	r18, 0x01	; 1
 738:	80 40       	sbci	r24, 0x00	; 0
 73a:	90 40       	sbci	r25, 0x00	; 0
 73c:	e1 f7       	brne	.-8      	; 0x736 <main+0x12>
 73e:	00 c0       	rjmp	.+0      	; 0x740 <main+0x1c>
 740:	00 00       	nop
 742:	f4 cf       	rjmp	.-24     	; 0x72c <main+0x8>

00000744 <_Z12pancakeBeginv>:
		_delay_ms(500);
    }
}

void pancakeBegin() {
	waitForFreePan();
 744:	0e 94 2d 04 	call	0x85a	; 0x85a <_Z14waitForFreePanv>
	addDough();
 748:	0e 94 ab 00 	call	0x156	; 0x156 <_Z8addDoughv>
	cookingBegin();
 74c:	0e 94 32 04 	call	0x864	; 0x864 <_Z12cookingBeginv>
 750:	08 95       	ret

00000752 <_Z15getBatterAmountv>:
}

int getBatterAmount() {
	int level = readBatterAmount();
 752:	0e 94 98 04 	call	0x930	; 0x930 <_Z16readBatterAmountv>
	
	if (level > MIN_BATTER_LEVEL)
 756:	86 30       	cpi	r24, 0x06	; 6
 758:	91 05       	cpc	r25, r1
 75a:	0c f0       	brlt	.+2      	; 0x75e <_Z15getBatterAmountv+0xc>
		INDCTR_PORT |=  (1<<INDCTR_PORT_NUM); // Turn on indicator LED
 75c:	28 9a       	sbi	0x05, 0	; 5
	
	return level;
}
 75e:	08 95       	ret

00000760 <_Z13turnOnCoolingv>:

void turnOnCooling() {
	beginCoolingRegulation();
 760:	0e 94 48 00 	call	0x90	; 0x90 <_Z22beginCoolingRegulationv>
 764:	08 95       	ret

00000766 <_Z14turnOffCoolingv>:
}

void turnOffCooling() {
	endCoolingRegulation();
 766:	0e 94 7c 00 	call	0xf8	; 0xf8 <_Z20endCoolingRegulationv>
 76a:	08 95       	ret

0000076c <_Z12turnOffAlarmv>:
}

void turnOffAlarm() {
	INDCTR_PORT &= !(1<<INDCTR_PORT_NUM); // Turn off indicator LED
 76c:	85 b1       	in	r24, 0x05	; 5
 76e:	15 b8       	out	0x05, r1	; 5
 770:	08 95       	ret

00000772 <_Z19I2C_MASTER_sendDatac14I2C_commands_t>:
void I2C_MASTER_init(char bitRate, I2C_MASTER_prescale_t pre)
{
	TWBR = bitRate;	//Set bitRate
	TWSR = (char)pre;	//Set prescaler
	
	TWCR = (1 << TWEN);	//Setup TWI to send NACK when data is recieved and enable HW
 772:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <_ZL19I2C_MASTER_hw_mutex>
 776:	91 11       	cpse	r25, r1
 778:	4c c0       	rjmp	.+152    	; 0x812 <_Z19I2C_MASTER_sendDatac14I2C_commands_t+0xa0>
 77a:	91 e0       	ldi	r25, 0x01	; 1
 77c:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <_ZL19I2C_MASTER_hw_mutex>
 780:	94 ea       	ldi	r25, 0xA4	; 164
 782:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 786:	ec eb       	ldi	r30, 0xBC	; 188
 788:	f0 e0       	ldi	r31, 0x00	; 0
 78a:	90 81       	ld	r25, Z
 78c:	99 23       	and	r25, r25
 78e:	ec f7       	brge	.-6      	; 0x78a <_Z19I2C_MASTER_sendDatac14I2C_commands_t+0x18>
 790:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 794:	98 7f       	andi	r25, 0xF8	; 248
 796:	98 30       	cpi	r25, 0x08	; 8
 798:	59 f5       	brne	.+86     	; 0x7f0 <_Z19I2C_MASTER_sendDatac14I2C_commands_t+0x7e>
 79a:	88 0f       	add	r24, r24
 79c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 7a0:	84 e8       	ldi	r24, 0x84	; 132
 7a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 7a6:	ec eb       	ldi	r30, 0xBC	; 188
 7a8:	f0 e0       	ldi	r31, 0x00	; 0
 7aa:	80 81       	ld	r24, Z
 7ac:	88 23       	and	r24, r24
 7ae:	ec f7       	brge	.-6      	; 0x7aa <_Z19I2C_MASTER_sendDatac14I2C_commands_t+0x38>
 7b0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 7b4:	88 7f       	andi	r24, 0xF8	; 248
 7b6:	80 32       	cpi	r24, 0x20	; 32
 7b8:	d9 f0       	breq	.+54     	; 0x7f0 <_Z19I2C_MASTER_sendDatac14I2C_commands_t+0x7e>
 7ba:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 7be:	84 e8       	ldi	r24, 0x84	; 132
 7c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 7c4:	ec eb       	ldi	r30, 0xBC	; 188
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	80 81       	ld	r24, Z
 7ca:	88 23       	and	r24, r24
 7cc:	ec f7       	brge	.-6      	; 0x7c8 <_Z19I2C_MASTER_sendDatac14I2C_commands_t+0x56>
 7ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 7d2:	88 7f       	andi	r24, 0xF8	; 248
 7d4:	80 33       	cpi	r24, 0x30	; 48
 7d6:	61 f0       	breq	.+24     	; 0x7f0 <_Z19I2C_MASTER_sendDatac14I2C_commands_t+0x7e>
 7d8:	84 e9       	ldi	r24, 0x94	; 148
 7da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 7de:	ec eb       	ldi	r30, 0xBC	; 188
 7e0:	f0 e0       	ldi	r31, 0x00	; 0
 7e2:	80 81       	ld	r24, Z
 7e4:	84 fd       	sbrc	r24, 4
 7e6:	fd cf       	rjmp	.-6      	; 0x7e2 <_Z19I2C_MASTER_sendDatac14I2C_commands_t+0x70>
 7e8:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <_ZL19I2C_MASTER_hw_mutex>
 7ec:	80 e0       	ldi	r24, 0x00	; 0
 7ee:	08 95       	ret
 7f0:	84 e9       	ldi	r24, 0x94	; 148
 7f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 7f6:	ec eb       	ldi	r30, 0xBC	; 188
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	80 81       	ld	r24, Z
 7fc:	84 fd       	sbrc	r24, 4
 7fe:	fd cf       	rjmp	.-6      	; 0x7fa <_Z19I2C_MASTER_sendDatac14I2C_commands_t+0x88>
 800:	ec eb       	ldi	r30, 0xBC	; 188
 802:	f0 e0       	ldi	r31, 0x00	; 0
 804:	80 81       	ld	r24, Z
 806:	8b 7f       	andi	r24, 0xFB	; 251
 808:	80 83       	st	Z, r24
 80a:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <_ZL19I2C_MASTER_hw_mutex>
 80e:	81 e0       	ldi	r24, 0x01	; 1
 810:	08 95       	ret
 812:	83 e0       	ldi	r24, 0x03	; 3
 814:	08 95       	ret

00000816 <__vector_24>:
 816:	1f 92       	push	r1
 818:	0f 92       	push	r0
 81a:	0f b6       	in	r0, 0x3f	; 63
 81c:	0f 92       	push	r0
 81e:	11 24       	eor	r1, r1
 820:	8f 93       	push	r24
 822:	ef 93       	push	r30
 824:	ff 93       	push	r31
 826:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 82a:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <_ZL15local_read_data>
 82e:	81 e0       	ldi	r24, 0x01	; 1
 830:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <_ZL15data_ready_flag>
 834:	84 e9       	ldi	r24, 0x94	; 148
 836:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 83a:	78 94       	sei
 83c:	ec eb       	ldi	r30, 0xBC	; 188
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	80 81       	ld	r24, Z
 842:	84 fd       	sbrc	r24, 4
 844:	fd cf       	rjmp	.-6      	; 0x840 <__vector_24+0x2a>
 846:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <_ZL19I2C_MASTER_hw_mutex>
 84a:	ff 91       	pop	r31
 84c:	ef 91       	pop	r30
 84e:	8f 91       	pop	r24
 850:	0f 90       	pop	r0
 852:	0f be       	out	0x3f, r0	; 63
 854:	0f 90       	pop	r0
 856:	1f 90       	pop	r1
 858:	18 95       	reti

0000085a <_Z14waitForFreePanv>:
void initPanController() {
	I2C_MASTER_init(I2C_BIT_RATE, I2C_MASTER_PRESCALE_64);
}

void waitForFreePan() {
	I2C_MASTER_sendData(I2C_PAN_ADDR, GET_FIRST_PAN_STATUS);
 85a:	61 e0       	ldi	r22, 0x01	; 1
 85c:	80 e7       	ldi	r24, 0x70	; 112
 85e:	0e 94 b9 03 	call	0x772	; 0x772 <_Z19I2C_MASTER_sendDatac14I2C_commands_t>
 862:	08 95       	ret

00000864 <_Z12cookingBeginv>:
} 

void cookingBegin() {
	I2C_MASTER_sendData(I2C_PAN_ADDR, BEGIN_COOKING);
 864:	62 e0       	ldi	r22, 0x02	; 2
 866:	80 e7       	ldi	r24, 0x70	; 112
 868:	0e 94 b9 03 	call	0x772	; 0x772 <_Z19I2C_MASTER_sendDatac14I2C_commands_t>
 86c:	08 95       	ret

0000086e <__vector_4>:

void initUltrasonic() {
	ULTRSNC_TRGGR_DDR |=  (1<<ULTRSNC_TRGGR_PORT_NUM); // Trigger pin
	ULTRSNC_ECHO_DDR &= ~(1<<ULTRSNC_ECHO_PIN_NUM); // Echo pin
	ULTRSNC_TCCRA = 0; // Clear timer2 register A
	PCICR |= (1 << ULTRSNC_PCIE); // enable pin change interrupt 1
 86e:	1f 92       	push	r1
 870:	0f 92       	push	r0
 872:	0f b6       	in	r0, 0x3f	; 63
 874:	0f 92       	push	r0
 876:	11 24       	eor	r1, r1
 878:	2f 93       	push	r18
 87a:	3f 93       	push	r19
 87c:	4f 93       	push	r20
 87e:	5f 93       	push	r21
 880:	6f 93       	push	r22
 882:	7f 93       	push	r23
 884:	8f 93       	push	r24
 886:	9f 93       	push	r25
 888:	af 93       	push	r26
 88a:	bf 93       	push	r27
 88c:	ef 93       	push	r30
 88e:	ff 93       	push	r31
 890:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <isEcho_>
 894:	88 23       	and	r24, r24
 896:	99 f1       	breq	.+102    	; 0x8fe <__vector_4+0x90>
 898:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 89c:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
 8a0:	70 e0       	ldi	r23, 0x00	; 0
 8a2:	80 e0       	ldi	r24, 0x00	; 0
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	0e 94 dd 05 	call	0xbba	; 0xbba <__floatsisf>
 8aa:	29 ee       	ldi	r18, 0xE9	; 233
 8ac:	38 e4       	ldi	r19, 0x48	; 72
 8ae:	4e e8       	ldi	r20, 0x8E	; 142
 8b0:	5e e3       	ldi	r21, 0x3E	; 62
 8b2:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__mulsf3>
 8b6:	2a ee       	ldi	r18, 0xEA	; 234
 8b8:	34 e0       	ldi	r19, 0x04	; 4
 8ba:	44 e7       	ldi	r20, 0x74	; 116
 8bc:	5e e3       	ldi	r21, 0x3E	; 62
 8be:	0e 94 c6 04 	call	0x98c	; 0x98c <__subsf3>
 8c2:	20 e0       	ldi	r18, 0x00	; 0
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	40 e2       	ldi	r20, 0x20	; 32
 8c8:	51 e4       	ldi	r21, 0x41	; 65
 8ca:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__mulsf3>
 8ce:	0e 94 ac 05 	call	0xb58	; 0xb58 <__fixunssfsi>
 8d2:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <batterLevel_+0x1>
 8d6:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <batterLevel_>
 8da:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <batterLevel_>
 8de:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <batterLevel_+0x1>
 8e2:	84 e6       	ldi	r24, 0x64	; 100
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	82 1b       	sub	r24, r18
 8e8:	93 0b       	sbc	r25, r19
 8ea:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <batterLevel_+0x1>
 8ee:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <batterLevel_>
 8f2:	ec e6       	ldi	r30, 0x6C	; 108
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	80 81       	ld	r24, Z
 8f8:	8f 7d       	andi	r24, 0xDF	; 223
 8fa:	80 83       	st	Z, r24
 8fc:	08 c0       	rjmp	.+16     	; 0x90e <__stack+0xf>
 8fe:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
 902:	86 e0       	ldi	r24, 0x06	; 6
 904:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 908:	81 e0       	ldi	r24, 0x01	; 1
 90a:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <isEcho_>
 90e:	ff 91       	pop	r31
 910:	ef 91       	pop	r30
 912:	bf 91       	pop	r27
 914:	af 91       	pop	r26
 916:	9f 91       	pop	r25
 918:	8f 91       	pop	r24
 91a:	7f 91       	pop	r23
 91c:	6f 91       	pop	r22
 91e:	5f 91       	pop	r21
 920:	4f 91       	pop	r20
 922:	3f 91       	pop	r19
 924:	2f 91       	pop	r18
 926:	0f 90       	pop	r0
 928:	0f be       	out	0x3f, r0	; 63
 92a:	0f 90       	pop	r0
 92c:	1f 90       	pop	r1
 92e:	18 95       	reti

00000930 <_Z16readBatterAmountv>:
}

int readBatterAmount() {
	isEcho_ = false;
 930:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <isEcho_>
	
	/* Set PC1 to trigger on pin 13, PINC5 */
	ULTRSNC_PCMSK |= (1 << ULTRSNC_PCINT);
 934:	ec e6       	ldi	r30, 0x6C	; 108
 936:	f0 e0       	ldi	r31, 0x00	; 0
 938:	80 81       	ld	r24, Z
 93a:	80 62       	ori	r24, 0x20	; 32
 93c:	80 83       	st	Z, r24
	
	/* Pulse trigger pin */
	ULTRSNC_TRGGR_PORT |= (1<<ULTRSNC_TRGGR_PORT_NUM);
 93e:	41 9a       	sbi	0x08, 1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 940:	85 e3       	ldi	r24, 0x35	; 53
 942:	8a 95       	dec	r24
 944:	f1 f7       	brne	.-4      	; 0x942 <_Z16readBatterAmountv+0x12>
 946:	00 00       	nop
	_delay_us(10);
	ULTRSNC_TRGGR_PORT &= ~(1<<ULTRSNC_TRGGR_PORT_NUM);
 948:	41 98       	cbi	0x08, 1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 94a:	8f e3       	ldi	r24, 0x3F	; 63
 94c:	9c e9       	ldi	r25, 0x9C	; 156
 94e:	01 97       	sbiw	r24, 0x01	; 1
 950:	f1 f7       	brne	.-4      	; 0x94e <_Z16readBatterAmountv+0x1e>
 952:	00 c0       	rjmp	.+0      	; 0x954 <_Z16readBatterAmountv+0x24>
 954:	00 00       	nop
	
	/* Wait for measurement */
	_delay_ms(10);
	
	/* Calculate amount of pancakes that can be made with current amount of batter */
	float batterVolume = batterLevel_ * CNTNR_W * CNTNR_L;
 956:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <batterLevel_>
 95a:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <batterLevel_+0x1>
	int pancakesLeft = batterVolume / DSG_VOL;
	
	return pancakesLeft;
 95e:	80 e1       	ldi	r24, 0x10	; 16
 960:	97 e2       	ldi	r25, 0x27	; 39
 962:	28 9f       	mul	r18, r24
 964:	b0 01       	movw	r22, r0
 966:	29 9f       	mul	r18, r25
 968:	70 0d       	add	r23, r0
 96a:	38 9f       	mul	r19, r24
 96c:	70 0d       	add	r23, r0
 96e:	11 24       	eor	r1, r1
 970:	80 e0       	ldi	r24, 0x00	; 0
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__floatunsisf>
 978:	20 e0       	ldi	r18, 0x00	; 0
 97a:	30 e0       	ldi	r19, 0x00	; 0
 97c:	48 ec       	ldi	r20, 0xC8	; 200
 97e:	52 e4       	ldi	r21, 0x42	; 66
 980:	0e 94 33 05 	call	0xa66	; 0xa66 <__divsf3>
 984:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__fixsfsi>
 988:	cb 01       	movw	r24, r22
 98a:	08 95       	ret

0000098c <__subsf3>:
 98c:	50 58       	subi	r21, 0x80	; 128

0000098e <__addsf3>:
 98e:	bb 27       	eor	r27, r27
 990:	aa 27       	eor	r26, r26
 992:	0e 94 de 04 	call	0x9bc	; 0x9bc <__addsf3x>
 996:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__fp_round>
 99a:	0e 94 21 06 	call	0xc42	; 0xc42 <__fp_pscA>
 99e:	38 f0       	brcs	.+14     	; 0x9ae <__addsf3+0x20>
 9a0:	0e 94 28 06 	call	0xc50	; 0xc50 <__fp_pscB>
 9a4:	20 f0       	brcs	.+8      	; 0x9ae <__addsf3+0x20>
 9a6:	39 f4       	brne	.+14     	; 0x9b6 <__addsf3+0x28>
 9a8:	9f 3f       	cpi	r25, 0xFF	; 255
 9aa:	19 f4       	brne	.+6      	; 0x9b2 <__addsf3+0x24>
 9ac:	26 f4       	brtc	.+8      	; 0x9b6 <__addsf3+0x28>
 9ae:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__fp_nan>
 9b2:	0e f4       	brtc	.+2      	; 0x9b6 <__addsf3+0x28>
 9b4:	e0 95       	com	r30
 9b6:	e7 fb       	bst	r30, 7
 9b8:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_inf>

000009bc <__addsf3x>:
 9bc:	e9 2f       	mov	r30, r25
 9be:	0e 94 40 06 	call	0xc80	; 0xc80 <__fp_split3>
 9c2:	58 f3       	brcs	.-42     	; 0x99a <__addsf3+0xc>
 9c4:	ba 17       	cp	r27, r26
 9c6:	62 07       	cpc	r22, r18
 9c8:	73 07       	cpc	r23, r19
 9ca:	84 07       	cpc	r24, r20
 9cc:	95 07       	cpc	r25, r21
 9ce:	20 f0       	brcs	.+8      	; 0x9d8 <__addsf3x+0x1c>
 9d0:	79 f4       	brne	.+30     	; 0x9f0 <__addsf3x+0x34>
 9d2:	a6 f5       	brtc	.+104    	; 0xa3c <__addsf3x+0x80>
 9d4:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__fp_zero>
 9d8:	0e f4       	brtc	.+2      	; 0x9dc <__addsf3x+0x20>
 9da:	e0 95       	com	r30
 9dc:	0b 2e       	mov	r0, r27
 9de:	ba 2f       	mov	r27, r26
 9e0:	a0 2d       	mov	r26, r0
 9e2:	0b 01       	movw	r0, r22
 9e4:	b9 01       	movw	r22, r18
 9e6:	90 01       	movw	r18, r0
 9e8:	0c 01       	movw	r0, r24
 9ea:	ca 01       	movw	r24, r20
 9ec:	a0 01       	movw	r20, r0
 9ee:	11 24       	eor	r1, r1
 9f0:	ff 27       	eor	r31, r31
 9f2:	59 1b       	sub	r21, r25
 9f4:	99 f0       	breq	.+38     	; 0xa1c <__addsf3x+0x60>
 9f6:	59 3f       	cpi	r21, 0xF9	; 249
 9f8:	50 f4       	brcc	.+20     	; 0xa0e <__addsf3x+0x52>
 9fa:	50 3e       	cpi	r21, 0xE0	; 224
 9fc:	68 f1       	brcs	.+90     	; 0xa58 <__addsf3x+0x9c>
 9fe:	1a 16       	cp	r1, r26
 a00:	f0 40       	sbci	r31, 0x00	; 0
 a02:	a2 2f       	mov	r26, r18
 a04:	23 2f       	mov	r18, r19
 a06:	34 2f       	mov	r19, r20
 a08:	44 27       	eor	r20, r20
 a0a:	58 5f       	subi	r21, 0xF8	; 248
 a0c:	f3 cf       	rjmp	.-26     	; 0x9f4 <__addsf3x+0x38>
 a0e:	46 95       	lsr	r20
 a10:	37 95       	ror	r19
 a12:	27 95       	ror	r18
 a14:	a7 95       	ror	r26
 a16:	f0 40       	sbci	r31, 0x00	; 0
 a18:	53 95       	inc	r21
 a1a:	c9 f7       	brne	.-14     	; 0xa0e <__addsf3x+0x52>
 a1c:	7e f4       	brtc	.+30     	; 0xa3c <__addsf3x+0x80>
 a1e:	1f 16       	cp	r1, r31
 a20:	ba 0b       	sbc	r27, r26
 a22:	62 0b       	sbc	r22, r18
 a24:	73 0b       	sbc	r23, r19
 a26:	84 0b       	sbc	r24, r20
 a28:	ba f0       	brmi	.+46     	; 0xa58 <__addsf3x+0x9c>
 a2a:	91 50       	subi	r25, 0x01	; 1
 a2c:	a1 f0       	breq	.+40     	; 0xa56 <__addsf3x+0x9a>
 a2e:	ff 0f       	add	r31, r31
 a30:	bb 1f       	adc	r27, r27
 a32:	66 1f       	adc	r22, r22
 a34:	77 1f       	adc	r23, r23
 a36:	88 1f       	adc	r24, r24
 a38:	c2 f7       	brpl	.-16     	; 0xa2a <__addsf3x+0x6e>
 a3a:	0e c0       	rjmp	.+28     	; 0xa58 <__addsf3x+0x9c>
 a3c:	ba 0f       	add	r27, r26
 a3e:	62 1f       	adc	r22, r18
 a40:	73 1f       	adc	r23, r19
 a42:	84 1f       	adc	r24, r20
 a44:	48 f4       	brcc	.+18     	; 0xa58 <__addsf3x+0x9c>
 a46:	87 95       	ror	r24
 a48:	77 95       	ror	r23
 a4a:	67 95       	ror	r22
 a4c:	b7 95       	ror	r27
 a4e:	f7 95       	ror	r31
 a50:	9e 3f       	cpi	r25, 0xFE	; 254
 a52:	08 f0       	brcs	.+2      	; 0xa56 <__addsf3x+0x9a>
 a54:	b0 cf       	rjmp	.-160    	; 0x9b6 <__addsf3+0x28>
 a56:	93 95       	inc	r25
 a58:	88 0f       	add	r24, r24
 a5a:	08 f0       	brcs	.+2      	; 0xa5e <__addsf3x+0xa2>
 a5c:	99 27       	eor	r25, r25
 a5e:	ee 0f       	add	r30, r30
 a60:	97 95       	ror	r25
 a62:	87 95       	ror	r24
 a64:	08 95       	ret

00000a66 <__divsf3>:
 a66:	0e 94 47 05 	call	0xa8e	; 0xa8e <__divsf3x>
 a6a:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__fp_round>
 a6e:	0e 94 28 06 	call	0xc50	; 0xc50 <__fp_pscB>
 a72:	58 f0       	brcs	.+22     	; 0xa8a <__divsf3+0x24>
 a74:	0e 94 21 06 	call	0xc42	; 0xc42 <__fp_pscA>
 a78:	40 f0       	brcs	.+16     	; 0xa8a <__divsf3+0x24>
 a7a:	29 f4       	brne	.+10     	; 0xa86 <__divsf3+0x20>
 a7c:	5f 3f       	cpi	r21, 0xFF	; 255
 a7e:	29 f0       	breq	.+10     	; 0xa8a <__divsf3+0x24>
 a80:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_inf>
 a84:	51 11       	cpse	r21, r1
 a86:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_szero>
 a8a:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__fp_nan>

00000a8e <__divsf3x>:
 a8e:	0e 94 40 06 	call	0xc80	; 0xc80 <__fp_split3>
 a92:	68 f3       	brcs	.-38     	; 0xa6e <__divsf3+0x8>

00000a94 <__divsf3_pse>:
 a94:	99 23       	and	r25, r25
 a96:	b1 f3       	breq	.-20     	; 0xa84 <__divsf3+0x1e>
 a98:	55 23       	and	r21, r21
 a9a:	91 f3       	breq	.-28     	; 0xa80 <__divsf3+0x1a>
 a9c:	95 1b       	sub	r25, r21
 a9e:	55 0b       	sbc	r21, r21
 aa0:	bb 27       	eor	r27, r27
 aa2:	aa 27       	eor	r26, r26
 aa4:	62 17       	cp	r22, r18
 aa6:	73 07       	cpc	r23, r19
 aa8:	84 07       	cpc	r24, r20
 aaa:	38 f0       	brcs	.+14     	; 0xaba <__divsf3_pse+0x26>
 aac:	9f 5f       	subi	r25, 0xFF	; 255
 aae:	5f 4f       	sbci	r21, 0xFF	; 255
 ab0:	22 0f       	add	r18, r18
 ab2:	33 1f       	adc	r19, r19
 ab4:	44 1f       	adc	r20, r20
 ab6:	aa 1f       	adc	r26, r26
 ab8:	a9 f3       	breq	.-22     	; 0xaa4 <__divsf3_pse+0x10>
 aba:	35 d0       	rcall	.+106    	; 0xb26 <__divsf3_pse+0x92>
 abc:	0e 2e       	mov	r0, r30
 abe:	3a f0       	brmi	.+14     	; 0xace <__divsf3_pse+0x3a>
 ac0:	e0 e8       	ldi	r30, 0x80	; 128
 ac2:	32 d0       	rcall	.+100    	; 0xb28 <__divsf3_pse+0x94>
 ac4:	91 50       	subi	r25, 0x01	; 1
 ac6:	50 40       	sbci	r21, 0x00	; 0
 ac8:	e6 95       	lsr	r30
 aca:	00 1c       	adc	r0, r0
 acc:	ca f7       	brpl	.-14     	; 0xac0 <__divsf3_pse+0x2c>
 ace:	2b d0       	rcall	.+86     	; 0xb26 <__divsf3_pse+0x92>
 ad0:	fe 2f       	mov	r31, r30
 ad2:	29 d0       	rcall	.+82     	; 0xb26 <__divsf3_pse+0x92>
 ad4:	66 0f       	add	r22, r22
 ad6:	77 1f       	adc	r23, r23
 ad8:	88 1f       	adc	r24, r24
 ada:	bb 1f       	adc	r27, r27
 adc:	26 17       	cp	r18, r22
 ade:	37 07       	cpc	r19, r23
 ae0:	48 07       	cpc	r20, r24
 ae2:	ab 07       	cpc	r26, r27
 ae4:	b0 e8       	ldi	r27, 0x80	; 128
 ae6:	09 f0       	breq	.+2      	; 0xaea <__divsf3_pse+0x56>
 ae8:	bb 0b       	sbc	r27, r27
 aea:	80 2d       	mov	r24, r0
 aec:	bf 01       	movw	r22, r30
 aee:	ff 27       	eor	r31, r31
 af0:	93 58       	subi	r25, 0x83	; 131
 af2:	5f 4f       	sbci	r21, 0xFF	; 255
 af4:	3a f0       	brmi	.+14     	; 0xb04 <__divsf3_pse+0x70>
 af6:	9e 3f       	cpi	r25, 0xFE	; 254
 af8:	51 05       	cpc	r21, r1
 afa:	78 f0       	brcs	.+30     	; 0xb1a <__divsf3_pse+0x86>
 afc:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_inf>
 b00:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_szero>
 b04:	5f 3f       	cpi	r21, 0xFF	; 255
 b06:	e4 f3       	brlt	.-8      	; 0xb00 <__divsf3_pse+0x6c>
 b08:	98 3e       	cpi	r25, 0xE8	; 232
 b0a:	d4 f3       	brlt	.-12     	; 0xb00 <__divsf3_pse+0x6c>
 b0c:	86 95       	lsr	r24
 b0e:	77 95       	ror	r23
 b10:	67 95       	ror	r22
 b12:	b7 95       	ror	r27
 b14:	f7 95       	ror	r31
 b16:	9f 5f       	subi	r25, 0xFF	; 255
 b18:	c9 f7       	brne	.-14     	; 0xb0c <__divsf3_pse+0x78>
 b1a:	88 0f       	add	r24, r24
 b1c:	91 1d       	adc	r25, r1
 b1e:	96 95       	lsr	r25
 b20:	87 95       	ror	r24
 b22:	97 f9       	bld	r25, 7
 b24:	08 95       	ret
 b26:	e1 e0       	ldi	r30, 0x01	; 1
 b28:	66 0f       	add	r22, r22
 b2a:	77 1f       	adc	r23, r23
 b2c:	88 1f       	adc	r24, r24
 b2e:	bb 1f       	adc	r27, r27
 b30:	62 17       	cp	r22, r18
 b32:	73 07       	cpc	r23, r19
 b34:	84 07       	cpc	r24, r20
 b36:	ba 07       	cpc	r27, r26
 b38:	20 f0       	brcs	.+8      	; 0xb42 <__divsf3_pse+0xae>
 b3a:	62 1b       	sub	r22, r18
 b3c:	73 0b       	sbc	r23, r19
 b3e:	84 0b       	sbc	r24, r20
 b40:	ba 0b       	sbc	r27, r26
 b42:	ee 1f       	adc	r30, r30
 b44:	88 f7       	brcc	.-30     	; 0xb28 <__divsf3_pse+0x94>
 b46:	e0 95       	com	r30
 b48:	08 95       	ret

00000b4a <__fixsfsi>:
 b4a:	0e 94 ac 05 	call	0xb58	; 0xb58 <__fixunssfsi>
 b4e:	68 94       	set
 b50:	b1 11       	cpse	r27, r1
 b52:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_szero>
 b56:	08 95       	ret

00000b58 <__fixunssfsi>:
 b58:	0e 94 48 06 	call	0xc90	; 0xc90 <__fp_splitA>
 b5c:	88 f0       	brcs	.+34     	; 0xb80 <__fixunssfsi+0x28>
 b5e:	9f 57       	subi	r25, 0x7F	; 127
 b60:	98 f0       	brcs	.+38     	; 0xb88 <__fixunssfsi+0x30>
 b62:	b9 2f       	mov	r27, r25
 b64:	99 27       	eor	r25, r25
 b66:	b7 51       	subi	r27, 0x17	; 23
 b68:	b0 f0       	brcs	.+44     	; 0xb96 <__fixunssfsi+0x3e>
 b6a:	e1 f0       	breq	.+56     	; 0xba4 <__fixunssfsi+0x4c>
 b6c:	66 0f       	add	r22, r22
 b6e:	77 1f       	adc	r23, r23
 b70:	88 1f       	adc	r24, r24
 b72:	99 1f       	adc	r25, r25
 b74:	1a f0       	brmi	.+6      	; 0xb7c <__fixunssfsi+0x24>
 b76:	ba 95       	dec	r27
 b78:	c9 f7       	brne	.-14     	; 0xb6c <__fixunssfsi+0x14>
 b7a:	14 c0       	rjmp	.+40     	; 0xba4 <__fixunssfsi+0x4c>
 b7c:	b1 30       	cpi	r27, 0x01	; 1
 b7e:	91 f0       	breq	.+36     	; 0xba4 <__fixunssfsi+0x4c>
 b80:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__fp_zero>
 b84:	b1 e0       	ldi	r27, 0x01	; 1
 b86:	08 95       	ret
 b88:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__fp_zero>
 b8c:	67 2f       	mov	r22, r23
 b8e:	78 2f       	mov	r23, r24
 b90:	88 27       	eor	r24, r24
 b92:	b8 5f       	subi	r27, 0xF8	; 248
 b94:	39 f0       	breq	.+14     	; 0xba4 <__fixunssfsi+0x4c>
 b96:	b9 3f       	cpi	r27, 0xF9	; 249
 b98:	cc f3       	brlt	.-14     	; 0xb8c <__fixunssfsi+0x34>
 b9a:	86 95       	lsr	r24
 b9c:	77 95       	ror	r23
 b9e:	67 95       	ror	r22
 ba0:	b3 95       	inc	r27
 ba2:	d9 f7       	brne	.-10     	; 0xb9a <__fixunssfsi+0x42>
 ba4:	3e f4       	brtc	.+14     	; 0xbb4 <__fixunssfsi+0x5c>
 ba6:	90 95       	com	r25
 ba8:	80 95       	com	r24
 baa:	70 95       	com	r23
 bac:	61 95       	neg	r22
 bae:	7f 4f       	sbci	r23, 0xFF	; 255
 bb0:	8f 4f       	sbci	r24, 0xFF	; 255
 bb2:	9f 4f       	sbci	r25, 0xFF	; 255
 bb4:	08 95       	ret

00000bb6 <__floatunsisf>:
 bb6:	e8 94       	clt
 bb8:	09 c0       	rjmp	.+18     	; 0xbcc <__floatsisf+0x12>

00000bba <__floatsisf>:
 bba:	97 fb       	bst	r25, 7
 bbc:	3e f4       	brtc	.+14     	; 0xbcc <__floatsisf+0x12>
 bbe:	90 95       	com	r25
 bc0:	80 95       	com	r24
 bc2:	70 95       	com	r23
 bc4:	61 95       	neg	r22
 bc6:	7f 4f       	sbci	r23, 0xFF	; 255
 bc8:	8f 4f       	sbci	r24, 0xFF	; 255
 bca:	9f 4f       	sbci	r25, 0xFF	; 255
 bcc:	99 23       	and	r25, r25
 bce:	a9 f0       	breq	.+42     	; 0xbfa <__floatsisf+0x40>
 bd0:	f9 2f       	mov	r31, r25
 bd2:	96 e9       	ldi	r25, 0x96	; 150
 bd4:	bb 27       	eor	r27, r27
 bd6:	93 95       	inc	r25
 bd8:	f6 95       	lsr	r31
 bda:	87 95       	ror	r24
 bdc:	77 95       	ror	r23
 bde:	67 95       	ror	r22
 be0:	b7 95       	ror	r27
 be2:	f1 11       	cpse	r31, r1
 be4:	f8 cf       	rjmp	.-16     	; 0xbd6 <__floatsisf+0x1c>
 be6:	fa f4       	brpl	.+62     	; 0xc26 <__floatsisf+0x6c>
 be8:	bb 0f       	add	r27, r27
 bea:	11 f4       	brne	.+4      	; 0xbf0 <__floatsisf+0x36>
 bec:	60 ff       	sbrs	r22, 0
 bee:	1b c0       	rjmp	.+54     	; 0xc26 <__floatsisf+0x6c>
 bf0:	6f 5f       	subi	r22, 0xFF	; 255
 bf2:	7f 4f       	sbci	r23, 0xFF	; 255
 bf4:	8f 4f       	sbci	r24, 0xFF	; 255
 bf6:	9f 4f       	sbci	r25, 0xFF	; 255
 bf8:	16 c0       	rjmp	.+44     	; 0xc26 <__floatsisf+0x6c>
 bfa:	88 23       	and	r24, r24
 bfc:	11 f0       	breq	.+4      	; 0xc02 <__floatsisf+0x48>
 bfe:	96 e9       	ldi	r25, 0x96	; 150
 c00:	11 c0       	rjmp	.+34     	; 0xc24 <__floatsisf+0x6a>
 c02:	77 23       	and	r23, r23
 c04:	21 f0       	breq	.+8      	; 0xc0e <__floatsisf+0x54>
 c06:	9e e8       	ldi	r25, 0x8E	; 142
 c08:	87 2f       	mov	r24, r23
 c0a:	76 2f       	mov	r23, r22
 c0c:	05 c0       	rjmp	.+10     	; 0xc18 <__floatsisf+0x5e>
 c0e:	66 23       	and	r22, r22
 c10:	71 f0       	breq	.+28     	; 0xc2e <__floatsisf+0x74>
 c12:	96 e8       	ldi	r25, 0x86	; 134
 c14:	86 2f       	mov	r24, r22
 c16:	70 e0       	ldi	r23, 0x00	; 0
 c18:	60 e0       	ldi	r22, 0x00	; 0
 c1a:	2a f0       	brmi	.+10     	; 0xc26 <__floatsisf+0x6c>
 c1c:	9a 95       	dec	r25
 c1e:	66 0f       	add	r22, r22
 c20:	77 1f       	adc	r23, r23
 c22:	88 1f       	adc	r24, r24
 c24:	da f7       	brpl	.-10     	; 0xc1c <__floatsisf+0x62>
 c26:	88 0f       	add	r24, r24
 c28:	96 95       	lsr	r25
 c2a:	87 95       	ror	r24
 c2c:	97 f9       	bld	r25, 7
 c2e:	08 95       	ret

00000c30 <__fp_inf>:
 c30:	97 f9       	bld	r25, 7
 c32:	9f 67       	ori	r25, 0x7F	; 127
 c34:	80 e8       	ldi	r24, 0x80	; 128
 c36:	70 e0       	ldi	r23, 0x00	; 0
 c38:	60 e0       	ldi	r22, 0x00	; 0
 c3a:	08 95       	ret

00000c3c <__fp_nan>:
 c3c:	9f ef       	ldi	r25, 0xFF	; 255
 c3e:	80 ec       	ldi	r24, 0xC0	; 192
 c40:	08 95       	ret

00000c42 <__fp_pscA>:
 c42:	00 24       	eor	r0, r0
 c44:	0a 94       	dec	r0
 c46:	16 16       	cp	r1, r22
 c48:	17 06       	cpc	r1, r23
 c4a:	18 06       	cpc	r1, r24
 c4c:	09 06       	cpc	r0, r25
 c4e:	08 95       	ret

00000c50 <__fp_pscB>:
 c50:	00 24       	eor	r0, r0
 c52:	0a 94       	dec	r0
 c54:	12 16       	cp	r1, r18
 c56:	13 06       	cpc	r1, r19
 c58:	14 06       	cpc	r1, r20
 c5a:	05 06       	cpc	r0, r21
 c5c:	08 95       	ret

00000c5e <__fp_round>:
 c5e:	09 2e       	mov	r0, r25
 c60:	03 94       	inc	r0
 c62:	00 0c       	add	r0, r0
 c64:	11 f4       	brne	.+4      	; 0xc6a <__fp_round+0xc>
 c66:	88 23       	and	r24, r24
 c68:	52 f0       	brmi	.+20     	; 0xc7e <__fp_round+0x20>
 c6a:	bb 0f       	add	r27, r27
 c6c:	40 f4       	brcc	.+16     	; 0xc7e <__fp_round+0x20>
 c6e:	bf 2b       	or	r27, r31
 c70:	11 f4       	brne	.+4      	; 0xc76 <__fp_round+0x18>
 c72:	60 ff       	sbrs	r22, 0
 c74:	04 c0       	rjmp	.+8      	; 0xc7e <__fp_round+0x20>
 c76:	6f 5f       	subi	r22, 0xFF	; 255
 c78:	7f 4f       	sbci	r23, 0xFF	; 255
 c7a:	8f 4f       	sbci	r24, 0xFF	; 255
 c7c:	9f 4f       	sbci	r25, 0xFF	; 255
 c7e:	08 95       	ret

00000c80 <__fp_split3>:
 c80:	57 fd       	sbrc	r21, 7
 c82:	90 58       	subi	r25, 0x80	; 128
 c84:	44 0f       	add	r20, r20
 c86:	55 1f       	adc	r21, r21
 c88:	59 f0       	breq	.+22     	; 0xca0 <__fp_splitA+0x10>
 c8a:	5f 3f       	cpi	r21, 0xFF	; 255
 c8c:	71 f0       	breq	.+28     	; 0xcaa <__fp_splitA+0x1a>
 c8e:	47 95       	ror	r20

00000c90 <__fp_splitA>:
 c90:	88 0f       	add	r24, r24
 c92:	97 fb       	bst	r25, 7
 c94:	99 1f       	adc	r25, r25
 c96:	61 f0       	breq	.+24     	; 0xcb0 <__fp_splitA+0x20>
 c98:	9f 3f       	cpi	r25, 0xFF	; 255
 c9a:	79 f0       	breq	.+30     	; 0xcba <__fp_splitA+0x2a>
 c9c:	87 95       	ror	r24
 c9e:	08 95       	ret
 ca0:	12 16       	cp	r1, r18
 ca2:	13 06       	cpc	r1, r19
 ca4:	14 06       	cpc	r1, r20
 ca6:	55 1f       	adc	r21, r21
 ca8:	f2 cf       	rjmp	.-28     	; 0xc8e <__fp_split3+0xe>
 caa:	46 95       	lsr	r20
 cac:	f1 df       	rcall	.-30     	; 0xc90 <__fp_splitA>
 cae:	08 c0       	rjmp	.+16     	; 0xcc0 <__fp_splitA+0x30>
 cb0:	16 16       	cp	r1, r22
 cb2:	17 06       	cpc	r1, r23
 cb4:	18 06       	cpc	r1, r24
 cb6:	99 1f       	adc	r25, r25
 cb8:	f1 cf       	rjmp	.-30     	; 0xc9c <__fp_splitA+0xc>
 cba:	86 95       	lsr	r24
 cbc:	71 05       	cpc	r23, r1
 cbe:	61 05       	cpc	r22, r1
 cc0:	08 94       	sec
 cc2:	08 95       	ret

00000cc4 <__fp_zero>:
 cc4:	e8 94       	clt

00000cc6 <__fp_szero>:
 cc6:	bb 27       	eor	r27, r27
 cc8:	66 27       	eor	r22, r22
 cca:	77 27       	eor	r23, r23
 ccc:	cb 01       	movw	r24, r22
 cce:	97 f9       	bld	r25, 7
 cd0:	08 95       	ret

00000cd2 <__mulsf3>:
 cd2:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__mulsf3x>
 cd6:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__fp_round>
 cda:	0e 94 21 06 	call	0xc42	; 0xc42 <__fp_pscA>
 cde:	38 f0       	brcs	.+14     	; 0xcee <__mulsf3+0x1c>
 ce0:	0e 94 28 06 	call	0xc50	; 0xc50 <__fp_pscB>
 ce4:	20 f0       	brcs	.+8      	; 0xcee <__mulsf3+0x1c>
 ce6:	95 23       	and	r25, r21
 ce8:	11 f0       	breq	.+4      	; 0xcee <__mulsf3+0x1c>
 cea:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_inf>
 cee:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__fp_nan>
 cf2:	11 24       	eor	r1, r1
 cf4:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_szero>

00000cf8 <__mulsf3x>:
 cf8:	0e 94 40 06 	call	0xc80	; 0xc80 <__fp_split3>
 cfc:	70 f3       	brcs	.-36     	; 0xcda <__mulsf3+0x8>

00000cfe <__mulsf3_pse>:
 cfe:	95 9f       	mul	r25, r21
 d00:	c1 f3       	breq	.-16     	; 0xcf2 <__mulsf3+0x20>
 d02:	95 0f       	add	r25, r21
 d04:	50 e0       	ldi	r21, 0x00	; 0
 d06:	55 1f       	adc	r21, r21
 d08:	62 9f       	mul	r22, r18
 d0a:	f0 01       	movw	r30, r0
 d0c:	72 9f       	mul	r23, r18
 d0e:	bb 27       	eor	r27, r27
 d10:	f0 0d       	add	r31, r0
 d12:	b1 1d       	adc	r27, r1
 d14:	63 9f       	mul	r22, r19
 d16:	aa 27       	eor	r26, r26
 d18:	f0 0d       	add	r31, r0
 d1a:	b1 1d       	adc	r27, r1
 d1c:	aa 1f       	adc	r26, r26
 d1e:	64 9f       	mul	r22, r20
 d20:	66 27       	eor	r22, r22
 d22:	b0 0d       	add	r27, r0
 d24:	a1 1d       	adc	r26, r1
 d26:	66 1f       	adc	r22, r22
 d28:	82 9f       	mul	r24, r18
 d2a:	22 27       	eor	r18, r18
 d2c:	b0 0d       	add	r27, r0
 d2e:	a1 1d       	adc	r26, r1
 d30:	62 1f       	adc	r22, r18
 d32:	73 9f       	mul	r23, r19
 d34:	b0 0d       	add	r27, r0
 d36:	a1 1d       	adc	r26, r1
 d38:	62 1f       	adc	r22, r18
 d3a:	83 9f       	mul	r24, r19
 d3c:	a0 0d       	add	r26, r0
 d3e:	61 1d       	adc	r22, r1
 d40:	22 1f       	adc	r18, r18
 d42:	74 9f       	mul	r23, r20
 d44:	33 27       	eor	r19, r19
 d46:	a0 0d       	add	r26, r0
 d48:	61 1d       	adc	r22, r1
 d4a:	23 1f       	adc	r18, r19
 d4c:	84 9f       	mul	r24, r20
 d4e:	60 0d       	add	r22, r0
 d50:	21 1d       	adc	r18, r1
 d52:	82 2f       	mov	r24, r18
 d54:	76 2f       	mov	r23, r22
 d56:	6a 2f       	mov	r22, r26
 d58:	11 24       	eor	r1, r1
 d5a:	9f 57       	subi	r25, 0x7F	; 127
 d5c:	50 40       	sbci	r21, 0x00	; 0
 d5e:	9a f0       	brmi	.+38     	; 0xd86 <__mulsf3_pse+0x88>
 d60:	f1 f0       	breq	.+60     	; 0xd9e <__mulsf3_pse+0xa0>
 d62:	88 23       	and	r24, r24
 d64:	4a f0       	brmi	.+18     	; 0xd78 <__mulsf3_pse+0x7a>
 d66:	ee 0f       	add	r30, r30
 d68:	ff 1f       	adc	r31, r31
 d6a:	bb 1f       	adc	r27, r27
 d6c:	66 1f       	adc	r22, r22
 d6e:	77 1f       	adc	r23, r23
 d70:	88 1f       	adc	r24, r24
 d72:	91 50       	subi	r25, 0x01	; 1
 d74:	50 40       	sbci	r21, 0x00	; 0
 d76:	a9 f7       	brne	.-22     	; 0xd62 <__mulsf3_pse+0x64>
 d78:	9e 3f       	cpi	r25, 0xFE	; 254
 d7a:	51 05       	cpc	r21, r1
 d7c:	80 f0       	brcs	.+32     	; 0xd9e <__mulsf3_pse+0xa0>
 d7e:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_inf>
 d82:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_szero>
 d86:	5f 3f       	cpi	r21, 0xFF	; 255
 d88:	e4 f3       	brlt	.-8      	; 0xd82 <__mulsf3_pse+0x84>
 d8a:	98 3e       	cpi	r25, 0xE8	; 232
 d8c:	d4 f3       	brlt	.-12     	; 0xd82 <__mulsf3_pse+0x84>
 d8e:	86 95       	lsr	r24
 d90:	77 95       	ror	r23
 d92:	67 95       	ror	r22
 d94:	b7 95       	ror	r27
 d96:	f7 95       	ror	r31
 d98:	e7 95       	ror	r30
 d9a:	9f 5f       	subi	r25, 0xFF	; 255
 d9c:	c1 f7       	brne	.-16     	; 0xd8e <__mulsf3_pse+0x90>
 d9e:	fe 2b       	or	r31, r30
 da0:	88 0f       	add	r24, r24
 da2:	91 1d       	adc	r25, r1
 da4:	96 95       	lsr	r25
 da6:	87 95       	ror	r24
 da8:	97 f9       	bld	r25, 7
 daa:	08 95       	ret

00000dac <_exit>:
 dac:	f8 94       	cli

00000dae <__stop_program>:
 dae:	ff cf       	rjmp	.-2      	; 0xdae <__stop_program>
