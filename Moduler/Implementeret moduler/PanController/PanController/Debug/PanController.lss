
PanController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000104a  000010de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000104a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800102  00800102  000010e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00001150  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001054  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000946  00000000  00000000  0000228c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b2d  00000000  00000000  00002bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000030c  00000000  00000000  00003700  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000809  00000000  00000000  00003a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000076b  00000000  00000000  00004215  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004980  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 c7 02 	jmp	0x58e	; 0x58e <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 36 04 	jmp	0x86c	; 0x86c <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 ca 04 	jmp	0x994	; 0x994 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e4       	ldi	r30, 0x4A	; 74
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 30       	cpi	r26, 0x02	; 2
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a2 e0       	ldi	r26, 0x02	; 2
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 32       	cpi	r26, 0x2A	; 42
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 82 05 	call	0xb04	; 0xb04 <main>
      9e:	0c 94 23 08 	jmp	0x1046	; 0x1046 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_SLAVE_sendBit>:

static void I2C_SLAVE_sendBit(char bit)
{
	//Workaround implementer so ack-bit can be send without the toSend buffer is lost.
	//If data buffer is already updated the toSend buffer is temporarily stored.
	if(I2C_SLAVE_dataReady == 1)
      a6:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <I2C_SLAVE_dataReady>
      aa:	91 30       	cpi	r25, 0x01	; 1
      ac:	41 f4       	brne	.+16     	; 0xbe <I2C_SLAVE_sendBit+0x18>
	{
		//Saves  toSend in temporary buffer.
		I2C_SLAVE_tempSave = I2C_SLAVE_toSend;
      ae:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <I2C_SLAVE_toSend>
      b2:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <I2C_SLAVE_tempSave>
		//Sets data ready to 2 to indicate that the send buffer should be reverted back to the temporary buffer after sending.
		I2C_SLAVE_dataReady = 2;
      b6:	92 e0       	ldi	r25, 0x02	; 2
      b8:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <I2C_SLAVE_dataReady>
      bc:	03 c0       	rjmp	.+6      	; 0xc4 <I2C_SLAVE_sendBit+0x1e>
	}
	else
	{
		//If the data buffer isn't set, then there is no need to store anything in the temporary buffer.
		I2C_SLAVE_dataReady = 1;
      be:	91 e0       	ldi	r25, 0x01	; 1
      c0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <I2C_SLAVE_dataReady>
	}
	//Only one bit should be send, therefore bit number 7 is set high and have sended
	//is set to 7, so the byte sending functionality can be utilized for sending only one bit.
	I2C_SLAVE_toSend = bit << 7;
      c4:	87 95       	ror	r24
      c6:	88 27       	eor	r24, r24
      c8:	87 95       	ror	r24
      ca:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <I2C_SLAVE_toSend>
	I2C_SLAVE_haveSended = 7;
      ce:	87 e0       	ldi	r24, 0x07	; 7
      d0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <I2C_SLAVE_haveSended>
      d4:	08 95       	ret

000000d6 <I2C_SLAVE_beginSend>:
}

static void I2C_SLAVE_beginSend()
{
	//sending bits should be updated on a falling edge. SCL int trigger is changed accordingly.
	I2C_SLAVE_SCL_FALLING();
      d6:	e9 e6       	ldi	r30, 0x69	; 105
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	82 60       	ori	r24, 0x02	; 2
      de:	80 83       	st	Z, r24
      e0:	80 81       	ld	r24, Z
      e2:	8e 7f       	andi	r24, 0xFE	; 254
      e4:	80 83       	st	Z, r24
	//If the temporary buffer is used dataReady is set to 3, to indicate that sending has begun and
	//that the buffer should be updated.
	if(I2C_SLAVE_dataReady == 2)
      e6:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <I2C_SLAVE_dataReady>
      ea:	82 30       	cpi	r24, 0x02	; 2
      ec:	21 f4       	brne	.+8      	; 0xf6 <I2C_SLAVE_beginSend+0x20>
		I2C_SLAVE_dataReady = 3;
      ee:	83 e0       	ldi	r24, 0x03	; 3
      f0:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <I2C_SLAVE_dataReady>
      f4:	08 95       	ret
	else
	//If the temporary buffer isn't used, then it is reverted to show that there is no new data in the toSend buffer. 
		I2C_SLAVE_dataReady = 0;
      f6:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <I2C_SLAVE_dataReady>
      fa:	08 95       	ret

000000fc <setPWMLevel>:

static volatile bool curr_pan = PAN1;

static void setPWMLevel(uint16_t PWM_level){	//Sets the PWM level for the heating
	
	if (curr_pan)
      fc:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <curr_pan>
     100:	22 23       	and	r18, r18
     102:	f1 f0       	breq	.+60     	; 0x140 <setPWMLevel+0x44>
		OCR1B = ceil(TIMER_1HZ_TOP - ((TIMER_1HZ_TOP/100) * (PWM_level > 100 ? 100 : PWM_level)));
     104:	85 36       	cpi	r24, 0x65	; 101
     106:	91 05       	cpc	r25, r1
     108:	70 f4       	brcc	.+28     	; 0x126 <setPWMLevel+0x2a>
     10a:	dc 01       	movw	r26, r24
     10c:	20 e9       	ldi	r18, 0x90	; 144
     10e:	3d ef       	ldi	r19, 0xFD	; 253
     110:	4f ef       	ldi	r20, 0xFF	; 255
     112:	5f ef       	ldi	r21, 0xFF	; 255
     114:	0e 94 09 08 	call	0x1012	; 0x1012 <__muluhisi3>
     118:	6d 5d       	subi	r22, 0xDD	; 221
     11a:	7b 40       	sbci	r23, 0x0B	; 11
     11c:	8f 4f       	sbci	r24, 0xFF	; 255
     11e:	9f 4f       	sbci	r25, 0xFF	; 255
     120:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__floatsisf>
     124:	04 c0       	rjmp	.+8      	; 0x12e <setPWMLevel+0x32>
     126:	60 e0       	ldi	r22, 0x00	; 0
     128:	70 e0       	ldi	r23, 0x00	; 0
     12a:	86 ec       	ldi	r24, 0xC6	; 198
     12c:	92 e4       	ldi	r25, 0x42	; 66
     12e:	0e 94 80 06 	call	0xd00	; 0xd00 <ceil>
     132:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__fixunssfsi>
     136:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     13a:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     13e:	08 95       	ret
	else
		OCR1A = ceil(TIMER_1HZ_TOP - ((TIMER_1HZ_TOP/100) * (PWM_level > 100 ? 100 : PWM_level)));
     140:	85 36       	cpi	r24, 0x65	; 101
     142:	91 05       	cpc	r25, r1
     144:	70 f4       	brcc	.+28     	; 0x162 <setPWMLevel+0x66>
     146:	dc 01       	movw	r26, r24
     148:	20 e9       	ldi	r18, 0x90	; 144
     14a:	3d ef       	ldi	r19, 0xFD	; 253
     14c:	4f ef       	ldi	r20, 0xFF	; 255
     14e:	5f ef       	ldi	r21, 0xFF	; 255
     150:	0e 94 09 08 	call	0x1012	; 0x1012 <__muluhisi3>
     154:	6d 5d       	subi	r22, 0xDD	; 221
     156:	7b 40       	sbci	r23, 0x0B	; 11
     158:	8f 4f       	sbci	r24, 0xFF	; 255
     15a:	9f 4f       	sbci	r25, 0xFF	; 255
     15c:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__floatsisf>
     160:	04 c0       	rjmp	.+8      	; 0x16a <setPWMLevel+0x6e>
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	70 e0       	ldi	r23, 0x00	; 0
     166:	86 ec       	ldi	r24, 0xC6	; 198
     168:	92 e4       	ldi	r25, 0x42	; 66
     16a:	0e 94 80 06 	call	0xd00	; 0xd00 <ceil>
     16e:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__fixunssfsi>
     172:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     176:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     17a:	08 95       	ret

0000017c <setMotorPWM>:

static volatile uint16_t curr_time = 0;	
static volatile bool motor_flipping = MOTOR1;

static void setMotorPWM(uint8_t PWM, bool motor) {
	if (motor == MOTOR1) {
     17c:	61 11       	cpse	r22, r1
     17e:	1f c0       	rjmp	.+62     	; 0x1be <setMotorPWM+0x42>
		OCR0A = (TIMER0_TOP - ceil(((TIMER0_TOP/100) * (PWM > 100? 100 : PWM))));
     180:	85 36       	cpi	r24, 0x65	; 101
     182:	58 f4       	brcc	.+22     	; 0x19a <setMotorPWM+0x1e>
     184:	68 2f       	mov	r22, r24
     186:	70 e0       	ldi	r23, 0x00	; 0
     188:	66 0f       	add	r22, r22
     18a:	77 1f       	adc	r23, r23
     18c:	07 2e       	mov	r0, r23
     18e:	00 0c       	add	r0, r0
     190:	88 0b       	sbc	r24, r24
     192:	99 0b       	sbc	r25, r25
     194:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__floatsisf>
     198:	04 c0       	rjmp	.+8      	; 0x1a2 <setMotorPWM+0x26>
     19a:	60 e0       	ldi	r22, 0x00	; 0
     19c:	70 e0       	ldi	r23, 0x00	; 0
     19e:	88 e4       	ldi	r24, 0x48	; 72
     1a0:	93 e4       	ldi	r25, 0x43	; 67
     1a2:	0e 94 80 06 	call	0xd00	; 0xd00 <ceil>
     1a6:	9b 01       	movw	r18, r22
     1a8:	ac 01       	movw	r20, r24
     1aa:	60 e0       	ldi	r22, 0x00	; 0
     1ac:	70 e0       	ldi	r23, 0x00	; 0
     1ae:	8f e7       	ldi	r24, 0x7F	; 127
     1b0:	93 e4       	ldi	r25, 0x43	; 67
     1b2:	0e 94 13 06 	call	0xc26	; 0xc26 <__subsf3>
     1b6:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__fixunssfsi>
     1ba:	67 bd       	out	0x27, r22	; 39
     1bc:	08 95       	ret
	}
	else {
		OCR0B = (TIMER0_TOP - ceil(((TIMER0_TOP/100) * (PWM > 100? 100 : PWM))));
     1be:	85 36       	cpi	r24, 0x65	; 101
     1c0:	58 f4       	brcc	.+22     	; 0x1d8 <setMotorPWM+0x5c>
     1c2:	68 2f       	mov	r22, r24
     1c4:	70 e0       	ldi	r23, 0x00	; 0
     1c6:	66 0f       	add	r22, r22
     1c8:	77 1f       	adc	r23, r23
     1ca:	07 2e       	mov	r0, r23
     1cc:	00 0c       	add	r0, r0
     1ce:	88 0b       	sbc	r24, r24
     1d0:	99 0b       	sbc	r25, r25
     1d2:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__floatsisf>
     1d6:	04 c0       	rjmp	.+8      	; 0x1e0 <setMotorPWM+0x64>
     1d8:	60 e0       	ldi	r22, 0x00	; 0
     1da:	70 e0       	ldi	r23, 0x00	; 0
     1dc:	88 e4       	ldi	r24, 0x48	; 72
     1de:	93 e4       	ldi	r25, 0x43	; 67
     1e0:	0e 94 80 06 	call	0xd00	; 0xd00 <ceil>
     1e4:	9b 01       	movw	r18, r22
     1e6:	ac 01       	movw	r20, r24
     1e8:	60 e0       	ldi	r22, 0x00	; 0
     1ea:	70 e0       	ldi	r23, 0x00	; 0
     1ec:	8f e7       	ldi	r24, 0x7F	; 127
     1ee:	93 e4       	ldi	r25, 0x43	; 67
     1f0:	0e 94 13 06 	call	0xc26	; 0xc26 <__subsf3>
     1f4:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__fixunssfsi>
     1f8:	68 bd       	out	0x28, r22	; 40
     1fa:	08 95       	ret

000001fc <init_digital_comm>:
#define DIGITAL_PROTOCOL_vect	PCINT0_vect

void init_digital_comm() {
	//Pin setup
	//Set Heat on/off as input and PANCAKE_DONE as output
	DDRB &= ~(HEAT_ON_OFF_PIN);
     1fc:	20 98       	cbi	0x04, 0	; 4
	DDRB |= PANCAKE_DONE_PIN;	
     1fe:	24 9a       	sbi	0x04, 4	; 4
	
	PORTB &= ~(PANCAKE_DONE_PIN | HEAT_ON_OFF_PIN);		//Set PANCAKE_DONE line to low and no pullup for heat on/off
     200:	85 b1       	in	r24, 0x05	; 5
     202:	8e 7e       	andi	r24, 0xEE	; 238
     204:	85 b9       	out	0x05, r24	; 5
	
	//Interrupt setup
	PCICR |= (1<<PCIE0);						//Enable pin change interrupt 0
     206:	e8 e6       	ldi	r30, 0x68	; 104
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	80 81       	ld	r24, Z
     20c:	81 60       	ori	r24, 0x01	; 1
     20e:	80 83       	st	Z, r24
	PCMSK0 |=  (1 << PCINT0);			//Set pin B0 as an interrupt pin
     210:	eb e6       	ldi	r30, 0x6B	; 107
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	80 81       	ld	r24, Z
     216:	81 60       	ori	r24, 0x01	; 1
     218:	80 83       	st	Z, r24
     21a:	08 95       	ret

0000021c <pancakeDone>:
	
}

void pancakeDone(){
	
	if (pancake_done) {
     21c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pancake_done>
     220:	88 23       	and	r24, r24
     222:	21 f0       	breq	.+8      	; 0x22c <pancakeDone+0x10>
		PORTB |= PANCAKE_DONE_PIN;
     224:	2c 9a       	sbi	0x05, 4	; 5
		pancake_done = false;
     226:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pancake_done>
     22a:	08 95       	ret
	}
	else {
		PORTB &= ~(PANCAKE_DONE_PIN);
     22c:	2c 98       	cbi	0x05, 4	; 5
     22e:	08 95       	ret

00000230 <__vector_3>:
		heat_on_ctrl = !heat_on_ctrl;		//Toggle the heat control variable
	}
}

//PAN_ON/OFF interrupt
ISR(DIGITAL_PROTOCOL_vect){
     230:	1f 92       	push	r1
     232:	0f 92       	push	r0
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	0f 92       	push	r0
     238:	11 24       	eor	r1, r1
     23a:	8f 93       	push	r24
     23c:	9f 93       	push	r25
	}

}

static void turnOnPans() {
	if(PINB & HEAT_ON_OFF_PIN){
     23e:	18 9b       	sbis	0x03, 0	; 3
     240:	06 c0       	rjmp	.+12     	; 0x24e <__vector_3+0x1e>
		heat_on_ctrl = !heat_on_ctrl;		//Toggle the heat control variable
     242:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <heat_on_ctrl>
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	89 27       	eor	r24, r25
     24a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <heat_on_ctrl>
}

//PAN_ON/OFF interrupt
ISR(DIGITAL_PROTOCOL_vect){
	turnOnPans();
}
     24e:	9f 91       	pop	r25
     250:	8f 91       	pop	r24
     252:	0f 90       	pop	r0
     254:	0f be       	out	0x3f, r0	; 63
     256:	0f 90       	pop	r0
     258:	1f 90       	pop	r1
     25a:	18 95       	reti

0000025c <init_regulation>:


void init_regulation(){
	
	//Setup ADC
	PRR &= ~(1 << PRADC);	//Power management enabling of adc
     25c:	e4 e6       	ldi	r30, 0x64	; 100
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	80 81       	ld	r24, Z
     262:	8e 7f       	andi	r24, 0xFE	; 254
     264:	80 83       	st	Z, r24
	DDRC &= 0xFC;			//Port C 0 and 1 is input
     266:	87 b1       	in	r24, 0x07	; 7
     268:	8c 7f       	andi	r24, 0xFC	; 252
     26a:	87 b9       	out	0x07, r24	; 7
	ADMUX =	(1 << REFS0);	//REF = VCC, ADC0 selected
     26c:	80 e4       	ldi	r24, 0x40	; 64
     26e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	
	ADCSRA |= (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);	//Enable ADC, Enable ADC convertion interrupt , prescaler = 128
     272:	ea e7       	ldi	r30, 0x7A	; 122
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	8f 68       	ori	r24, 0x8F	; 143
     27a:	80 83       	st	Z, r24
	
	//Setup for power PWM using OCR1B and OCR1A
	DDRB |= (1 << PORTB2) | (1 << PORTB1);	//Output for power PWM at PB2 and PB1
     27c:	84 b1       	in	r24, 0x04	; 4
     27e:	86 60       	ori	r24, 0x06	; 6
     280:	84 b9       	out	0x04, r24	; 4
	
	OCR1A = TIMER_1HZ_TOP;			//Set PWM level to 0 for pan1
     282:	83 e2       	ldi	r24, 0x23	; 35
     284:	94 ef       	ldi	r25, 0xF4	; 244
     286:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     28a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	OCR1B = TIMER_1HZ_TOP;			//Set PWM level to 0 for pan2
     28e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     292:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
	
	//OCR1A and B is set on compare match and cleared at bottom (0)
	TCCR1A |= (1 << COM1A1) | (1 << COM1A0) | (1 << COM1B1) | (1 << COM1B0);;;;;;
     296:	a0 e8       	ldi	r26, 0x80	; 128
     298:	b0 e0       	ldi	r27, 0x00	; 0
     29a:	8c 91       	ld	r24, X
     29c:	80 6f       	ori	r24, 0xF0	; 240
     29e:	8c 93       	st	X, r24
	
	//Start the regulation loop
	ADCSRA |= (1 << ADSC);
     2a0:	80 81       	ld	r24, Z
     2a2:	80 64       	ori	r24, 0x40	; 64
     2a4:	80 83       	st	Z, r24
     2a6:	08 95       	ret

000002a8 <__vector_21>:
#define KI		((double) 0.001)
#define DT		((double)((128*13)/F_CPU)) //Time for single convertion ~ 1/16000000/(128*13)	(one convertion = 13 clock cyckles)

//Regulation loop - not time critical
ISR(ADC_vect, ISR_NOBLOCK)
{
     2a8:	78 94       	sei
     2aa:	1f 92       	push	r1
     2ac:	0f 92       	push	r0
     2ae:	0f b6       	in	r0, 0x3f	; 63
     2b0:	0f 92       	push	r0
     2b2:	11 24       	eor	r1, r1
     2b4:	8f 92       	push	r8
     2b6:	9f 92       	push	r9
     2b8:	af 92       	push	r10
     2ba:	bf 92       	push	r11
     2bc:	cf 92       	push	r12
     2be:	df 92       	push	r13
     2c0:	ef 92       	push	r14
     2c2:	ff 92       	push	r15
     2c4:	2f 93       	push	r18
     2c6:	3f 93       	push	r19
     2c8:	4f 93       	push	r20
     2ca:	5f 93       	push	r21
     2cc:	6f 93       	push	r22
     2ce:	7f 93       	push	r23
     2d0:	8f 93       	push	r24
     2d2:	9f 93       	push	r25
     2d4:	af 93       	push	r26
     2d6:	bf 93       	push	r27
     2d8:	ef 93       	push	r30
     2da:	ff 93       	push	r31
}

static uint16_t readHeatLevel(){
	
	//Read ADCL first - it is important
	uint8_t temp = ADCL;
     2dc:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	return ((ADCH & 0x03) << 8) + temp;
     2e0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     2e4:	83 70       	andi	r24, 0x03	; 3
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	98 2f       	mov	r25, r24
     2ea:	88 27       	eor	r24, r24
     2ec:	82 0f       	add	r24, r18
     2ee:	91 1d       	adc	r25, r1
	
	uint16_t temp = readHeatLevel();

	
	//Check heat level
	if (curr_pan) {
     2f0:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <curr_pan>
     2f4:	22 23       	and	r18, r18
     2f6:	69 f0       	breq	.+26     	; 0x312 <__vector_21+0x6a>
		if (temp >= TRIGGER_LOW && temp <= TRIGGER_HIGH){
     2f8:	9c 01       	movw	r18, r24
     2fa:	22 5a       	subi	r18, 0xA2	; 162
     2fc:	33 40       	sbci	r19, 0x03	; 3
     2fe:	2f 31       	cpi	r18, 0x1F	; 31
     300:	31 05       	cpc	r19, r1
     302:	20 f4       	brcc	.+8      	; 0x30c <__vector_21+0x64>
			heat_ok_pan1 = true;
     304:	21 e0       	ldi	r18, 0x01	; 1
     306:	20 93 09 01 	sts	0x0109, r18	; 0x800109 <heat_ok_pan1>
     30a:	0f c0       	rjmp	.+30     	; 0x32a <__vector_21+0x82>
		} else {
			heat_ok_pan1 = false;
     30c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <heat_ok_pan1>
     310:	0c c0       	rjmp	.+24     	; 0x32a <__vector_21+0x82>
		}
	} else {
		if (temp >= TRIGGER_LOW && temp <= TRIGGER_HIGH){
     312:	9c 01       	movw	r18, r24
     314:	22 5a       	subi	r18, 0xA2	; 162
     316:	33 40       	sbci	r19, 0x03	; 3
     318:	2f 31       	cpi	r18, 0x1F	; 31
     31a:	31 05       	cpc	r19, r1
     31c:	20 f4       	brcc	.+8      	; 0x326 <__vector_21+0x7e>
			heat_ok_pan2 = true;
     31e:	21 e0       	ldi	r18, 0x01	; 1
     320:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <heat_ok_pan2>
     324:	02 c0       	rjmp	.+4      	; 0x32a <__vector_21+0x82>
		} else {
			heat_ok_pan2 = false;
     326:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <heat_ok_pan2>
		}
	}
	heat_ok = heat_ok_pan1 && heat_ok_pan2;
     32a:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <heat_ok_pan1>
     32e:	22 23       	and	r18, r18
     330:	19 f0       	breq	.+6      	; 0x338 <__vector_21+0x90>
     332:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <heat_ok_pan2>
     336:	02 c0       	rjmp	.+4      	; 0x33c <__vector_21+0x94>
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	21 70       	andi	r18, 0x01	; 1
     33e:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <heat_ok>
	
	//If no heating control - turn off the pans
	if (!heat_on_ctrl)		
     342:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <heat_on_ctrl>
     346:	21 11       	cpse	r18, r1
     348:	0d c0       	rjmp	.+26     	; 0x364 <__vector_21+0xbc>
	{
		integral = 0;
     34a:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <integral>
     34e:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <integral+0x1>
     352:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <integral+0x2>
     356:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <integral+0x3>
		setPWMLevel(0);
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 7e 00 	call	0xfc	; 0xfc <setPWMLevel>
     362:	4e c0       	rjmp	.+156    	; 0x400 <__LOCK_REGION_LENGTH__>
	} else {
	
		//Calculate the values for the PI controller
		int16_t error = OPTIMUM_TEMP - temp;
		integral += error*DT;
     364:	61 eb       	ldi	r22, 0xB1	; 177
     366:	73 e0       	ldi	r23, 0x03	; 3
     368:	68 1b       	sub	r22, r24
     36a:	79 0b       	sbc	r23, r25
     36c:	07 2e       	mov	r0, r23
     36e:	00 0c       	add	r0, r0
     370:	88 0b       	sbc	r24, r24
     372:	99 0b       	sbc	r25, r25
     374:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__floatsisf>
     378:	6b 01       	movw	r12, r22
     37a:	7c 01       	movw	r14, r24
     37c:	80 90 25 01 	lds	r8, 0x0125	; 0x800125 <integral>
     380:	90 90 26 01 	lds	r9, 0x0126	; 0x800126 <integral+0x1>
     384:	a0 90 27 01 	lds	r10, 0x0127	; 0x800127 <integral+0x2>
     388:	b0 90 28 01 	lds	r11, 0x0128	; 0x800128 <integral+0x3>
     38c:	20 e0       	ldi	r18, 0x00	; 0
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	a9 01       	movw	r20, r18
     392:	0e 94 9c 07 	call	0xf38	; 0xf38 <__mulsf3>
     396:	a5 01       	movw	r20, r10
     398:	94 01       	movw	r18, r8
     39a:	0e 94 14 06 	call	0xc28	; 0xc28 <__addsf3>
     39e:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <integral>
     3a2:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <integral+0x1>
     3a6:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <integral+0x2>
     3aa:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <integral+0x3>
	
		//Calculate the output
		int16_t output = error*KP + integral*KI;
     3ae:	80 90 25 01 	lds	r8, 0x0125	; 0x800125 <integral>
     3b2:	90 90 26 01 	lds	r9, 0x0126	; 0x800126 <integral+0x1>
     3b6:	a0 90 27 01 	lds	r10, 0x0127	; 0x800127 <integral+0x2>
     3ba:	b0 90 28 01 	lds	r11, 0x0128	; 0x800128 <integral+0x3>
		
		//Set PWM
		setPWMLevel((output < 0? 0 : output));
     3be:	25 ec       	ldi	r18, 0xC5	; 197
     3c0:	30 e2       	ldi	r19, 0x20	; 32
     3c2:	40 e8       	ldi	r20, 0x80	; 128
     3c4:	5f e3       	ldi	r21, 0x3F	; 63
     3c6:	c7 01       	movw	r24, r14
     3c8:	b6 01       	movw	r22, r12
     3ca:	0e 94 9c 07 	call	0xf38	; 0xf38 <__mulsf3>
     3ce:	6b 01       	movw	r12, r22
     3d0:	7c 01       	movw	r14, r24
     3d2:	2f e6       	ldi	r18, 0x6F	; 111
     3d4:	32 e1       	ldi	r19, 0x12	; 18
     3d6:	43 e8       	ldi	r20, 0x83	; 131
     3d8:	5a e3       	ldi	r21, 0x3A	; 58
     3da:	c5 01       	movw	r24, r10
     3dc:	b4 01       	movw	r22, r8
     3de:	0e 94 9c 07 	call	0xf38	; 0xf38 <__mulsf3>
     3e2:	9b 01       	movw	r18, r22
     3e4:	ac 01       	movw	r20, r24
     3e6:	c7 01       	movw	r24, r14
     3e8:	b6 01       	movw	r22, r12
     3ea:	0e 94 14 06 	call	0xc28	; 0xc28 <__addsf3>
     3ee:	0e 94 97 06 	call	0xd2e	; 0xd2e <__fixsfsi>
     3f2:	cb 01       	movw	r24, r22
     3f4:	99 23       	and	r25, r25
     3f6:	14 f4       	brge	.+4      	; 0x3fc <__vector_21+0x154>
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 7e 00 	call	0xfc	; 0xfc <setPWMLevel>
	}
	//Change pan
	curr_pan = !curr_pan;
     400:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <curr_pan>
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	98 27       	eor	r25, r24
     408:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <curr_pan>
		
	ADMUX ^= 0x01;		//Change between ADC0 and ADC1
     40c:	ec e7       	ldi	r30, 0x7C	; 124
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	90 81       	ld	r25, Z
     412:	89 27       	eor	r24, r25
     414:	80 83       	st	Z, r24
	
	//Restart conversion
	ADCSRA |= (1 << ADSC);
     416:	ea e7       	ldi	r30, 0x7A	; 122
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	80 81       	ld	r24, Z
     41c:	80 64       	ori	r24, 0x40	; 64
     41e:	80 83       	st	Z, r24
}
     420:	ff 91       	pop	r31
     422:	ef 91       	pop	r30
     424:	bf 91       	pop	r27
     426:	af 91       	pop	r26
     428:	9f 91       	pop	r25
     42a:	8f 91       	pop	r24
     42c:	7f 91       	pop	r23
     42e:	6f 91       	pop	r22
     430:	5f 91       	pop	r21
     432:	4f 91       	pop	r20
     434:	3f 91       	pop	r19
     436:	2f 91       	pop	r18
     438:	ff 90       	pop	r15
     43a:	ef 90       	pop	r14
     43c:	df 90       	pop	r13
     43e:	cf 90       	pop	r12
     440:	bf 90       	pop	r11
     442:	af 90       	pop	r10
     444:	9f 90       	pop	r9
     446:	8f 90       	pop	r8
     448:	0f 90       	pop	r0
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	0f 90       	pop	r0
     44e:	1f 90       	pop	r1
     450:	18 95       	reti

00000452 <I2C_SLAVE_checkData>:
// ## Definitions bellow ##

volatile bool I2C_SLAVE_checkData()
{
	//Checks if all data has been read.
	if(I2C_SLAVE_first != I2C_SLAVE_last || I2C_SLAVE_full)
     452:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <I2C_SLAVE_first>
     456:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <I2C_SLAVE_last>
     45a:	98 13       	cpse	r25, r24
     45c:	03 c0       	rjmp	.+6      	; 0x464 <I2C_SLAVE_checkData+0x12>
     45e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <I2C_SLAVE_full>
     462:	08 95       	ret
	{
		return true;
     464:	81 e0       	ldi	r24, 0x01	; 1
	}
	return false;
}
     466:	08 95       	ret

00000468 <I2C_SLAVE_sendData>:

void I2C_SLAVE_sendData(char data)
{
	//Sets send data to send.
	I2C_SLAVE_toSend = data;
     468:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <I2C_SLAVE_toSend>
	//Sets number of bits sended to 0.
	I2C_SLAVE_haveSended = 0;
     46c:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <I2C_SLAVE_haveSended>
	//Indicates that data is needed to be send.
	I2C_SLAVE_dataReady = 1;
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <I2C_SLAVE_dataReady>
	
	//If begin hold is sat, then sending will begin imidiatly.
	if(I2C_SLAVE_beginHold)
     476:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <I2C_SLAVE_beginHold>
     47a:	88 23       	and	r24, r24
     47c:	09 f4       	brne	.+2      	; 0x480 <I2C_SLAVE_sendData+0x18>
     47e:	4a c0       	rjmp	.+148    	; 0x514 <I2C_SLAVE_sendData+0xac>
	{
		//Resets begin hold
		I2C_SLAVE_beginHold = false;
     480:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <I2C_SLAVE_beginHold>
		//Disables SDA interrupt to avoid stop bit triggering if toSind most significant is 1.
		I2C_SLAVE_SDA_INT_ENAB(0);
     484:	e8 e6       	ldi	r30, 0x68	; 104
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	80 81       	ld	r24, Z
     48a:	8b 7f       	andi	r24, 0xFB	; 251
     48c:	80 83       	st	Z, r24
		//Sets the line to most significant bit.
		I2C_SLAVE_DDR = I2C_SLAVE_SET_BIT(I2C_SLAVE_PORT, I2C_SLAVE_SDA, ~I2C_SLAVE_toSend, 7);
     48e:	2b b1       	in	r18, 0x0b	; 11
     490:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <I2C_SLAVE_toSend>
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	80 95       	com	r24
     498:	90 95       	com	r25
     49a:	88 0f       	add	r24, r24
     49c:	89 2f       	mov	r24, r25
     49e:	88 1f       	adc	r24, r24
     4a0:	99 0b       	sbc	r25, r25
     4a2:	82 95       	swap	r24
     4a4:	92 95       	swap	r25
     4a6:	90 7f       	andi	r25, 0xF0	; 240
     4a8:	98 27       	eor	r25, r24
     4aa:	80 7f       	andi	r24, 0xF0	; 240
     4ac:	98 27       	eor	r25, r24
     4ae:	80 71       	andi	r24, 0x10	; 16
     4b0:	92 2f       	mov	r25, r18
     4b2:	9f 7e       	andi	r25, 0xEF	; 239
     4b4:	89 0f       	add	r24, r25
     4b6:	8a b9       	out	0x0a, r24	; 10
		I2C_SLAVE_PORT = I2C_SLAVE_SET_BIT(I2C_SLAVE_PORT, I2C_SLAVE_SDA, I2C_SLAVE_toSend, 7);
     4b8:	2b b1       	in	r18, 0x0b	; 11
     4ba:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <I2C_SLAVE_toSend>
     4be:	88 1f       	adc	r24, r24
     4c0:	88 27       	eor	r24, r24
     4c2:	88 1f       	adc	r24, r24
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	82 95       	swap	r24
     4c8:	92 95       	swap	r25
     4ca:	90 7f       	andi	r25, 0xF0	; 240
     4cc:	98 27       	eor	r25, r24
     4ce:	80 7f       	andi	r24, 0xF0	; 240
     4d0:	98 27       	eor	r25, r24
     4d2:	80 71       	andi	r24, 0x10	; 16
     4d4:	92 2f       	mov	r25, r18
     4d6:	9f 7e       	andi	r25, 0xEF	; 239
     4d8:	89 0f       	add	r24, r25
     4da:	8b b9       	out	0x0b, r24	; 11
		//Sets that first bit is sended.
		I2C_SLAVE_haveSended++;
     4dc:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <I2C_SLAVE_haveSended>
     4e0:	8f 5f       	subi	r24, 0xFF	; 255
     4e2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <I2C_SLAVE_haveSended>
		//Waits until SDA reads the correct bit before enabling interrupt agian.
		while(((I2C_SLAVE_toSend>>7)<<I2C_SLAVE_SDA) != (I2C_SLAVE_PIN & 1 << I2C_SLAVE_SDA)){}
     4e6:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <I2C_SLAVE_toSend>
     4ea:	29 b1       	in	r18, 0x09	; 9
     4ec:	88 1f       	adc	r24, r24
     4ee:	88 27       	eor	r24, r24
     4f0:	88 1f       	adc	r24, r24
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	82 95       	swap	r24
     4f6:	92 95       	swap	r25
     4f8:	90 7f       	andi	r25, 0xF0	; 240
     4fa:	98 27       	eor	r25, r24
     4fc:	80 7f       	andi	r24, 0xF0	; 240
     4fe:	98 27       	eor	r25, r24
     500:	20 71       	andi	r18, 0x10	; 16
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	82 17       	cp	r24, r18
     506:	93 07       	cpc	r25, r19
     508:	71 f7       	brne	.-36     	; 0x4e6 <I2C_SLAVE_sendData+0x7e>
		//enables interrupt.
		I2C_SLAVE_SDA_INT_ENAB(1);
     50a:	e8 e6       	ldi	r30, 0x68	; 104
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	80 81       	ld	r24, Z
     510:	84 60       	ori	r24, 0x04	; 4
     512:	80 83       	st	Z, r24
	}
	I2C_SLAVE_DDR &= ~(1 << I2C_SLAVE_SCL);
     514:	52 98       	cbi	0x0a, 2	; 10
	I2C_SLAVE_PORT |= 1 << I2C_SLAVE_SCL;
     516:	5a 9a       	sbi	0x0b, 2	; 11
     518:	08 95       	ret

0000051a <I2C_SLAVE_getData>:
}

I2C_commands_t I2C_SLAVE_getData()
{
	//Waits for data to have arrived.
	while(!I2C_SLAVE_checkData());
     51a:	0e 94 29 02 	call	0x452	; 0x452 <I2C_SLAVE_checkData>
     51e:	88 23       	and	r24, r24
     520:	e1 f3       	breq	.-8      	; 0x51a <I2C_SLAVE_getData>
}

static char I2C_SLAVE_readFirst()
{
	//If buffer is not empty then it will read the buffer.
	if(I2C_SLAVE_checkData())
     522:	0e 94 29 02 	call	0x452	; 0x452 <I2C_SLAVE_checkData>
     526:	88 23       	and	r24, r24
     528:	b9 f0       	breq	.+46     	; 0x558 <I2C_SLAVE_getData+0x3e>
	{
		//After the first is read, then the buffer isn't full anymore.
		if(I2C_SLAVE_full)
     52a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <I2C_SLAVE_full>
     52e:	81 11       	cpse	r24, r1
		{
			I2C_SLAVE_full = false;
     530:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <I2C_SLAVE_full>
}

static unsigned char I2C_SLAVE_inc(volatile unsigned char * num)
{
	//Save return value.
	unsigned char temp = *num;
     534:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <I2C_SLAVE_first>

	//Incrementing number 
	(*num)++;
     538:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <I2C_SLAVE_first>
     53c:	8f 5f       	subi	r24, 0xFF	; 255
     53e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <I2C_SLAVE_first>
	
	//If number is higher than receive buffer length then its reset to 0.
	if(*num >= I2C_SLAVE_BUFFER_LENGTH)
     542:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <I2C_SLAVE_first>
     546:	8a 30       	cpi	r24, 0x0A	; 10
     548:	10 f0       	brcs	.+4      	; 0x54e <I2C_SLAVE_getData+0x34>
	{
		*num = 0;
     54a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <I2C_SLAVE_first>
		if(I2C_SLAVE_full)
		{
			I2C_SLAVE_full = false;
		}
		//Returns the buffer en increments first by 1.
		return I2C_SLAVE_Buffer[I2C_SLAVE_inc(&I2C_SLAVE_first)];
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	e2 5f       	subi	r30, 0xF2	; 242
     552:	fe 4f       	sbci	r31, 0xFE	; 254
     554:	80 81       	ld	r24, Z
     556:	08 95       	ret
	}
	return 0;
     558:	80 e0       	ldi	r24, 0x00	; 0
{
	//Waits for data to have arrived.
	while(!I2C_SLAVE_checkData());
	//Returns first data.
	return (I2C_commands_t)I2C_SLAVE_readFirst();
}
     55a:	08 95       	ret

0000055c <I2C_SLAVE_init>:

void I2C_SLAVE_init()
{
	//Sets SCL interrupt to rising edge trigger.
	I2C_SLAVE_SCL_RISING();
     55c:	e9 e6       	ldi	r30, 0x69	; 105
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	80 81       	ld	r24, Z
     562:	82 60       	ori	r24, 0x02	; 2
     564:	80 83       	st	Z, r24
     566:	80 81       	ld	r24, Z
     568:	81 60       	ori	r24, 0x01	; 1
     56a:	80 83       	st	Z, r24

	//Sets SDA interrupt up.
	I2C_SLAVE_SDA_INT_INIT();
     56c:	e8 e6       	ldi	r30, 0x68	; 104
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	80 81       	ld	r24, Z
     572:	80 61       	ori	r24, 0x10	; 16
     574:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>
	
	//Enables both interrupts.
	I2C_SLAVE_SDA_INT_ENAB(1);
     578:	80 81       	ld	r24, Z
     57a:	84 60       	ori	r24, 0x04	; 4
     57c:	80 83       	st	Z, r24
	I2C_SLAVE_SCL_INT_ENAB(1);
     57e:	e8 9a       	sbi	0x1d, 0	; 29
	
	//Sets up ports to inputs with pull up.
	I2C_SLAVE_DDR &= ~(1 << I2C_SLAVE_SDA | 1 << I2C_SLAVE_SCL);
     580:	8a b1       	in	r24, 0x0a	; 10
     582:	8b 7e       	andi	r24, 0xEB	; 235
     584:	8a b9       	out	0x0a, r24	; 10
	I2C_SLAVE_PORT |= (1 << I2C_SLAVE_SDA | 1 << I2C_SLAVE_SCL);
     586:	8b b1       	in	r24, 0x0b	; 11
     588:	84 61       	ori	r24, 0x14	; 20
     58a:	8b b9       	out	0x0b, r24	; 11
     58c:	08 95       	ret

0000058e <__vector_1>:
	return 0;
}

//SCL interrupt for handling data transfer.
ISR(I2C_SLAVE_SCL_vect)
{
     58e:	1f 92       	push	r1
     590:	0f 92       	push	r0
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	0f 92       	push	r0
     596:	11 24       	eor	r1, r1
     598:	2f 93       	push	r18
     59a:	3f 93       	push	r19
     59c:	4f 93       	push	r20
     59e:	5f 93       	push	r21
     5a0:	6f 93       	push	r22
     5a2:	7f 93       	push	r23
     5a4:	8f 93       	push	r24
     5a6:	9f 93       	push	r25
     5a8:	af 93       	push	r26
     5aa:	bf 93       	push	r27
     5ac:	ef 93       	push	r30
     5ae:	ff 93       	push	r31
	//If start-bit received:
	if(I2C_SLAVE_startRecived)
     5b0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <I2C_SLAVE_startRecived>
     5b4:	88 23       	and	r24, r24
     5b6:	09 f4       	brne	.+2      	; 0x5ba <__vector_1+0x2c>
     5b8:	48 c1       	rjmp	.+656    	; 0x84a <__vector_1+0x2bc>
	{
		//If SCL is triggering on rising edge i.e. it's currently reading from SDA.
		if(I2C_SLAVE_SCL_IS_RISING())
     5ba:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
     5be:	83 70       	andi	r24, 0x03	; 3
     5c0:	83 30       	cpi	r24, 0x03	; 3
     5c2:	09 f0       	breq	.+2      	; 0x5c6 <__vector_1+0x38>
     5c4:	af c0       	rjmp	.+350    	; 0x724 <__vector_1+0x196>
		{
			//If it just have been writing to SDA reset pull up to high.
			if(I2C_SLAVE_haveSended > 7)
     5c6:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <I2C_SLAVE_haveSended>
     5ca:	88 30       	cpi	r24, 0x08	; 8
     5cc:	40 f0       	brcs	.+16     	; 0x5de <__vector_1+0x50>
			{
				I2C_SLAVE_haveSended = 0;
     5ce:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <I2C_SLAVE_haveSended>
				I2C_SLAVE_DDR &= ~(1 << I2C_SLAVE_SDA | 1 << I2C_SLAVE_SCL);
     5d2:	8a b1       	in	r24, 0x0a	; 10
     5d4:	8b 7e       	andi	r24, 0xEB	; 235
     5d6:	8a b9       	out	0x0a, r24	; 10
				I2C_SLAVE_PORT |= (1 << I2C_SLAVE_SDA | 1 << I2C_SLAVE_SCL);
     5d8:	8b b1       	in	r24, 0x0b	; 11
     5da:	84 61       	ori	r24, 0x14	; 20
     5dc:	8b b9       	out	0x0b, r24	; 11
			}
			//First 7 bits read Address.
			if(I2C_SLAVE_recevedBits < 7)
     5de:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <I2C_SLAVE_recevedBits>
     5e2:	87 30       	cpi	r24, 0x07	; 7
     5e4:	20 f5       	brcc	.+72     	; 0x62e <__vector_1+0xa0>
			{
				I2C_SLAVE_recevedAddr = I2C_SLAVE_SET_BIT(I2C_SLAVE_recevedAddr,6-I2C_SLAVE_recevedBits,I2C_SLAVE_PIN,I2C_SLAVE_SDA);
     5e6:	66 e0       	ldi	r22, 0x06	; 6
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	68 1b       	sub	r22, r24
     5ec:	71 09       	sbc	r23, r1
     5ee:	21 e0       	ldi	r18, 0x01	; 1
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	a9 01       	movw	r20, r18
     5f4:	06 2e       	mov	r0, r22
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <__vector_1+0x6e>
     5f8:	44 0f       	add	r20, r20
     5fa:	55 1f       	adc	r21, r21
     5fc:	0a 94       	dec	r0
     5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <__vector_1+0x6a>
     600:	99 b1       	in	r25, 0x09	; 9
     602:	54 2f       	mov	r21, r20
     604:	50 95       	com	r21
     606:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <I2C_SLAVE_recevedAddr>
     60a:	52 23       	and	r21, r18
     60c:	92 95       	swap	r25
     60e:	9f 70       	andi	r25, 0x0F	; 15
     610:	29 2f       	mov	r18, r25
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	02 c0       	rjmp	.+4      	; 0x61a <__vector_1+0x8c>
     616:	22 0f       	add	r18, r18
     618:	33 1f       	adc	r19, r19
     61a:	6a 95       	dec	r22
     61c:	e2 f7       	brpl	.-8      	; 0x616 <__vector_1+0x88>
     61e:	24 23       	and	r18, r20
     620:	25 0f       	add	r18, r21
     622:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <I2C_SLAVE_recevedAddr>
				I2C_SLAVE_recevedBits++;
     626:	8f 5f       	subi	r24, 0xFF	; 255
     628:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <I2C_SLAVE_recevedBits>
     62c:	0e c1       	rjmp	.+540    	; 0x84a <__vector_1+0x2bc>
			}
			//If address matching:
			else if(I2C_SLAVE_recevedAddr == I2C_SLAVE_ADDR && I2C_SLAVE_recevedBits < 8)
     62e:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <I2C_SLAVE_recevedAddr>
     632:	90 37       	cpi	r25, 0x70	; 112
     634:	09 f0       	breq	.+2      	; 0x638 <__vector_1+0xaa>
     636:	09 c1       	rjmp	.+530    	; 0x84a <__vector_1+0x2bc>
     638:	88 30       	cpi	r24, 0x08	; 8
     63a:	b8 f4       	brcc	.+46     	; 0x66a <__vector_1+0xdc>
			{
				
				I2C_SLAVE_recevedBits++;
     63c:	8f 5f       	subi	r24, 0xFF	; 255
     63e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <I2C_SLAVE_recevedBits>
				//Read the readWrite bit.
				I2C_SLAVE_shouldWrite = I2C_SLAVE_SET_BIT(I2C_SLAVE_shouldWrite,0,I2C_SLAVE_PIN,I2C_SLAVE_SDA);
     642:	89 b1       	in	r24, 0x09	; 9
     644:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <I2C_SLAVE_shouldWrite>
     648:	9e 7f       	andi	r25, 0xFE	; 254
     64a:	82 95       	swap	r24
     64c:	81 70       	andi	r24, 0x01	; 1
     64e:	89 0f       	add	r24, r25
     650:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <I2C_SLAVE_shouldWrite>
				//If it should write, begin hold is set to true.
				if(I2C_SLAVE_shouldWrite)
     654:	88 23       	and	r24, r24
     656:	19 f0       	breq	.+6      	; 0x65e <__vector_1+0xd0>
				{
					//This indicates that the line should be hold right after ack i send.
					I2C_SLAVE_beginHold = true;
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <I2C_SLAVE_beginHold>
				}
				//Set buffer to ack-bit and begin sending.
				I2C_SLAVE_sendBit(0);
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_SLAVE_sendBit>
				I2C_SLAVE_beginSend();
     664:	0e 94 6b 00 	call	0xd6	; 0xd6 <I2C_SLAVE_beginSend>
     668:	f0 c0       	rjmp	.+480    	; 0x84a <__vector_1+0x2bc>
			}
			else if(I2C_SLAVE_recevedAddr == I2C_SLAVE_ADDR && I2C_SLAVE_recevedBits < (17))
     66a:	81 31       	cpi	r24, 0x11	; 17
     66c:	08 f0       	brcs	.+2      	; 0x670 <__vector_1+0xe2>
     66e:	ed c0       	rjmp	.+474    	; 0x84a <__vector_1+0x2bc>
			{
				//If read from master after ack-send if I2C_SLAVE_shouldWrite is false.
				I2C_SLAVE_recevedData = I2C_SLAVE_SET_BIT(I2C_SLAVE_recevedData,7-(I2C_SLAVE_recevedBits-8),I2C_SLAVE_PIN,I2C_SLAVE_SDA);
     670:	6f e0       	ldi	r22, 0x0F	; 15
     672:	70 e0       	ldi	r23, 0x00	; 0
     674:	68 1b       	sub	r22, r24
     676:	71 09       	sbc	r23, r1
     678:	21 e0       	ldi	r18, 0x01	; 1
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	a9 01       	movw	r20, r18
     67e:	06 2e       	mov	r0, r22
     680:	02 c0       	rjmp	.+4      	; 0x686 <__vector_1+0xf8>
     682:	44 0f       	add	r20, r20
     684:	55 1f       	adc	r21, r21
     686:	0a 94       	dec	r0
     688:	e2 f7       	brpl	.-8      	; 0x682 <__vector_1+0xf4>
     68a:	99 b1       	in	r25, 0x09	; 9
     68c:	54 2f       	mov	r21, r20
     68e:	50 95       	com	r21
     690:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <I2C_SLAVE_recevedData>
     694:	52 23       	and	r21, r18
     696:	92 95       	swap	r25
     698:	9f 70       	andi	r25, 0x0F	; 15
     69a:	29 2f       	mov	r18, r25
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	02 c0       	rjmp	.+4      	; 0x6a4 <__vector_1+0x116>
     6a0:	22 0f       	add	r18, r18
     6a2:	33 1f       	adc	r19, r19
     6a4:	6a 95       	dec	r22
     6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <__vector_1+0x112>
     6a8:	24 23       	and	r18, r20
     6aa:	25 0f       	add	r18, r21
     6ac:	20 93 1d 01 	sts	0x011D, r18	; 0x80011d <I2C_SLAVE_recevedData>
				I2C_SLAVE_recevedBits++;
     6b0:	8f 5f       	subi	r24, 0xFF	; 255
     6b2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <I2C_SLAVE_recevedBits>
				if(I2C_SLAVE_recevedBits == 16)
     6b6:	80 31       	cpi	r24, 0x10	; 16
     6b8:	09 f0       	breq	.+2      	; 0x6bc <__vector_1+0x12e>
     6ba:	c7 c0       	rjmp	.+398    	; 0x84a <__vector_1+0x2bc>
}

static void I2C_SLAVE_addData(char data)
{
	//If the buffer is full, then the oldest data will be overwritten moving first data one.
	if(I2C_SLAVE_full)
     6bc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <I2C_SLAVE_full>
     6c0:	88 23       	and	r24, r24
     6c2:	69 f0       	breq	.+26     	; 0x6de <__vector_1+0x150>
}

static unsigned char I2C_SLAVE_inc(volatile unsigned char * num)
{
	//Save return value.
	unsigned char temp = *num;
     6c4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <I2C_SLAVE_first>

	//Incrementing number 
	(*num)++;
     6c8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <I2C_SLAVE_first>
     6cc:	8f 5f       	subi	r24, 0xFF	; 255
     6ce:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <I2C_SLAVE_first>
	
	//If number is higher than receive buffer length then its reset to 0.
	if(*num >= I2C_SLAVE_BUFFER_LENGTH)
     6d2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <I2C_SLAVE_first>
     6d6:	8a 30       	cpi	r24, 0x0A	; 10
     6d8:	10 f0       	brcs	.+4      	; 0x6de <__vector_1+0x150>
	{
		*num = 0;
     6da:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <I2C_SLAVE_first>
}

static unsigned char I2C_SLAVE_inc(volatile unsigned char * num)
{
	//Save return value.
	unsigned char temp = *num;
     6de:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <I2C_SLAVE_last>

	//Incrementing number 
	(*num)++;
     6e2:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <I2C_SLAVE_last>
     6e6:	8f 5f       	subi	r24, 0xFF	; 255
     6e8:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <I2C_SLAVE_last>
	
	//If number is higher than receive buffer length then its reset to 0.
	if(*num >= I2C_SLAVE_BUFFER_LENGTH)
     6ec:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <I2C_SLAVE_last>
     6f0:	8a 30       	cpi	r24, 0x0A	; 10
     6f2:	10 f0       	brcs	.+4      	; 0x6f8 <__vector_1+0x16a>
	{
		*num = 0;
     6f4:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <I2C_SLAVE_last>
	if(I2C_SLAVE_full)
	{
		I2C_SLAVE_inc(&I2C_SLAVE_first);
	}
	//Sets last data and increments last. (Hence last will always be the length of the data in the buffer)
	I2C_SLAVE_Buffer[I2C_SLAVE_inc(&I2C_SLAVE_last)] = data;
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	e2 5f       	subi	r30, 0xF2	; 242
     6fc:	fe 4f       	sbci	r31, 0xFE	; 254
     6fe:	20 83       	st	Z, r18
	//If last position is the same as first the buffer is either full or empty. Therefor at boolean is sat if its full.
	if(I2C_SLAVE_last == I2C_SLAVE_first)
     700:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <I2C_SLAVE_last>
     704:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <I2C_SLAVE_first>
     708:	98 13       	cpse	r25, r24
     70a:	03 c0       	rjmp	.+6      	; 0x712 <__vector_1+0x184>
	{
		I2C_SLAVE_full = true;
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <I2C_SLAVE_full>
				I2C_SLAVE_recevedBits++;
				if(I2C_SLAVE_recevedBits == 16)
				{
					//When all bits send add data and ack.
					I2C_SLAVE_addData(I2C_SLAVE_recevedData);
					I2C_SLAVE_sendBit(0);
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_SLAVE_sendBit>
					I2C_SLAVE_beginSend();
     718:	0e 94 6b 00 	call	0xd6	; 0xd6 <I2C_SLAVE_beginSend>
					//Return to bit 8 to continue reading. (Only reading more bytes in one header is not implemented yet.)
					I2C_SLAVE_recevedBits = 8;
     71c:	88 e0       	ldi	r24, 0x08	; 8
     71e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <I2C_SLAVE_recevedBits>
     722:	93 c0       	rjmp	.+294    	; 0x84a <__vector_1+0x2bc>
				}
			}
		}
		//If SCL is triggering on falling edge i.e. it's currently writing on SDA.
		else if(I2C_SLAVE_SCL_IS_FALLING())
     724:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
     728:	83 70       	andi	r24, 0x03	; 3
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	09 f0       	breq	.+2      	; 0x730 <__vector_1+0x1a2>
     72e:	8d c0       	rjmp	.+282    	; 0x84a <__vector_1+0x2bc>
		{
			//Checks if all data is send.
			if(I2C_SLAVE_haveSended > 7)
     730:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <I2C_SLAVE_haveSended>
     734:	38 30       	cpi	r19, 0x08	; 8
     736:	08 f4       	brcc	.+2      	; 0x73a <__vector_1+0x1ac>
     738:	50 c0       	rjmp	.+160    	; 0x7da <__vector_1+0x24c>
			{
				//Updates buffer with temporary buffer if I2C_SLAVE_dataReady is 2 or 3.
				if(I2C_SLAVE_dataReady == 2 || I2C_SLAVE_dataReady == 3)
     73a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <I2C_SLAVE_dataReady>
     73e:	82 50       	subi	r24, 0x02	; 2
     740:	82 30       	cpi	r24, 0x02	; 2
     742:	88 f5       	brcc	.+98     	; 0x7a6 <__vector_1+0x218>
				{
					I2C_SLAVE_dataReady = 1;
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <I2C_SLAVE_dataReady>
					I2C_SLAVE_haveSended = 1;
     74a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <I2C_SLAVE_haveSended>
					I2C_SLAVE_toSend = I2C_SLAVE_tempSave;
     74e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <I2C_SLAVE_tempSave>
     752:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <I2C_SLAVE_toSend>
					I2C_SLAVE_DDR = I2C_SLAVE_SET_BIT(I2C_SLAVE_DDR,I2C_SLAVE_SDA,(~I2C_SLAVE_toSend),7);
     756:	2a b1       	in	r18, 0x0a	; 10
     758:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <I2C_SLAVE_toSend>
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	80 95       	com	r24
     760:	90 95       	com	r25
     762:	88 0f       	add	r24, r24
     764:	89 2f       	mov	r24, r25
     766:	88 1f       	adc	r24, r24
     768:	99 0b       	sbc	r25, r25
     76a:	82 95       	swap	r24
     76c:	92 95       	swap	r25
     76e:	90 7f       	andi	r25, 0xF0	; 240
     770:	98 27       	eor	r25, r24
     772:	80 7f       	andi	r24, 0xF0	; 240
     774:	98 27       	eor	r25, r24
     776:	80 71       	andi	r24, 0x10	; 16
     778:	92 2f       	mov	r25, r18
     77a:	9f 7e       	andi	r25, 0xEF	; 239
     77c:	89 0f       	add	r24, r25
     77e:	8a b9       	out	0x0a, r24	; 10
					I2C_SLAVE_PORT = I2C_SLAVE_SET_BIT(I2C_SLAVE_PORT,I2C_SLAVE_SDA,I2C_SLAVE_toSend,7);
     780:	2b b1       	in	r18, 0x0b	; 11
     782:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <I2C_SLAVE_toSend>
     786:	88 1f       	adc	r24, r24
     788:	88 27       	eor	r24, r24
     78a:	88 1f       	adc	r24, r24
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	82 95       	swap	r24
     790:	92 95       	swap	r25
     792:	90 7f       	andi	r25, 0xF0	; 240
     794:	98 27       	eor	r25, r24
     796:	80 7f       	andi	r24, 0xF0	; 240
     798:	98 27       	eor	r25, r24
     79a:	80 71       	andi	r24, 0x10	; 16
     79c:	92 2f       	mov	r25, r18
     79e:	9f 7e       	andi	r25, 0xEF	; 239
     7a0:	89 0f       	add	r24, r25
     7a2:	8b b9       	out	0x0b, r24	; 11
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <__vector_1+0x21c>
				}
				else
				{
					//Frees SDA if done sending.
					I2C_SLAVE_DDR &= ~(1 << I2C_SLAVE_SDA);
     7a6:	54 98       	cbi	0x0a, 4	; 10
					I2C_SLAVE_PORT |= (1 << I2C_SLAVE_SDA);
     7a8:	5c 9a       	sbi	0x0b, 4	; 11
				}
				if(I2C_SLAVE_beginHold)
     7aa:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <I2C_SLAVE_beginHold>
     7ae:	88 23       	and	r24, r24
     7b0:	59 f0       	breq	.+22     	; 0x7c8 <__vector_1+0x23a>
}

static int I2C_SLAVE_hold()
{
	//If data is ready then it sets beginHold false and returns true.
	if(I2C_SLAVE_dataReady == 1 || I2C_SLAVE_dataReady == 2)
     7b2:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <I2C_SLAVE_dataReady>
     7b6:	81 50       	subi	r24, 0x01	; 1
     7b8:	82 30       	cpi	r24, 0x02	; 2
     7ba:	18 f4       	brcc	.+6      	; 0x7c2 <__vector_1+0x234>
	{
		I2C_SLAVE_beginHold = false;
     7bc:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <I2C_SLAVE_beginHold>
     7c0:	44 c0       	rjmp	.+136    	; 0x84a <__vector_1+0x2bc>
		return 1;
	}
	else
	{
		//If no data is ready, then SCL is pulled low.
		I2C_SLAVE_DDR  |=  1 << I2C_SLAVE_SCL;
     7c2:	52 9a       	sbi	0x0a, 2	; 10
		I2C_SLAVE_PORT &=  ~(1 << I2C_SLAVE_SCL);
     7c4:	5a 98       	cbi	0x0b, 2	; 11
     7c6:	41 c0       	rjmp	.+130    	; 0x84a <__vector_1+0x2bc>
				}
				else
				{
					//More work here needs to be done in order to be able to write multiple bytes.
					//Returns the line to reading
					I2C_SLAVE_SCL_RISING();
     7c8:	e9 e6       	ldi	r30, 0x69	; 105
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	80 81       	ld	r24, Z
     7ce:	82 60       	ori	r24, 0x02	; 2
     7d0:	80 83       	st	Z, r24
     7d2:	80 81       	ld	r24, Z
     7d4:	81 60       	ori	r24, 0x01	; 1
     7d6:	80 83       	st	Z, r24
     7d8:	38 c0       	rjmp	.+112    	; 0x84a <__vector_1+0x2bc>
				}
			}
			else
			{
				I2C_SLAVE_DDR = I2C_SLAVE_SET_BIT(I2C_SLAVE_DDR,I2C_SLAVE_SDA,~I2C_SLAVE_toSend,(7-I2C_SLAVE_haveSended));
     7da:	2a b1       	in	r18, 0x0a	; 10
     7dc:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <I2C_SLAVE_toSend>
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	80 95       	com	r24
     7e4:	90 95       	com	r25
     7e6:	47 e0       	ldi	r20, 0x07	; 7
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	ba 01       	movw	r22, r20
     7ec:	63 1b       	sub	r22, r19
     7ee:	71 09       	sbc	r23, r1
     7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <__vector_1+0x268>
     7f2:	95 95       	asr	r25
     7f4:	87 95       	ror	r24
     7f6:	6a 95       	dec	r22
     7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <__vector_1+0x264>
     7fa:	82 95       	swap	r24
     7fc:	92 95       	swap	r25
     7fe:	90 7f       	andi	r25, 0xF0	; 240
     800:	98 27       	eor	r25, r24
     802:	80 7f       	andi	r24, 0xF0	; 240
     804:	98 27       	eor	r25, r24
     806:	80 71       	andi	r24, 0x10	; 16
     808:	92 2f       	mov	r25, r18
     80a:	9f 7e       	andi	r25, 0xEF	; 239
     80c:	89 0f       	add	r24, r25
     80e:	8a b9       	out	0x0a, r24	; 10
				I2C_SLAVE_PORT = I2C_SLAVE_SET_BIT(I2C_SLAVE_PORT,I2C_SLAVE_SDA,I2C_SLAVE_toSend,(7-I2C_SLAVE_haveSended));
     810:	2b b1       	in	r18, 0x0b	; 11
     812:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <I2C_SLAVE_toSend>
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <I2C_SLAVE_haveSended>
     81c:	43 1b       	sub	r20, r19
     81e:	51 09       	sbc	r21, r1
     820:	02 c0       	rjmp	.+4      	; 0x826 <__vector_1+0x298>
     822:	95 95       	asr	r25
     824:	87 95       	ror	r24
     826:	4a 95       	dec	r20
     828:	e2 f7       	brpl	.-8      	; 0x822 <__vector_1+0x294>
     82a:	82 95       	swap	r24
     82c:	92 95       	swap	r25
     82e:	90 7f       	andi	r25, 0xF0	; 240
     830:	98 27       	eor	r25, r24
     832:	80 7f       	andi	r24, 0xF0	; 240
     834:	98 27       	eor	r25, r24
     836:	80 71       	andi	r24, 0x10	; 16
     838:	92 2f       	mov	r25, r18
     83a:	9f 7e       	andi	r25, 0xEF	; 239
     83c:	89 0f       	add	r24, r25
     83e:	8b b9       	out	0x0b, r24	; 11
				
				I2C_SLAVE_haveSended++;
     840:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <I2C_SLAVE_haveSended>
     844:	8f 5f       	subi	r24, 0xFF	; 255
     846:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <I2C_SLAVE_haveSended>
			}
		}
	}
	
}
     84a:	ff 91       	pop	r31
     84c:	ef 91       	pop	r30
     84e:	bf 91       	pop	r27
     850:	af 91       	pop	r26
     852:	9f 91       	pop	r25
     854:	8f 91       	pop	r24
     856:	7f 91       	pop	r23
     858:	6f 91       	pop	r22
     85a:	5f 91       	pop	r21
     85c:	4f 91       	pop	r20
     85e:	3f 91       	pop	r19
     860:	2f 91       	pop	r18
     862:	0f 90       	pop	r0
     864:	0f be       	out	0x3f, r0	; 63
     866:	0f 90       	pop	r0
     868:	1f 90       	pop	r1
     86a:	18 95       	reti

0000086c <__vector_5>:

//SDA interrupt for handling stop and start bit.
ISR(I2C_SLAVE_SDA_vect)
{
     86c:	1f 92       	push	r1
     86e:	0f 92       	push	r0
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	0f 92       	push	r0
     874:	11 24       	eor	r1, r1
     876:	8f 93       	push	r24
     878:	ef 93       	push	r30
     87a:	ff 93       	push	r31
	//Both stop and start bit is triggered while SCL is high.
	if((I2C_SLAVE_PIN & (1 << I2C_SLAVE_SCL)) ==(1 << I2C_SLAVE_SCL))
     87c:	4a 9b       	sbis	0x09, 2	; 9
     87e:	14 c0       	rjmp	.+40     	; 0x8a8 <__vector_5+0x3c>
	{
		//If SDA is high then the interrupt was triggered on a rising edge and therefore it's a stop-bit.
		if(I2C_SLAVE_PIN & (1 << I2C_SLAVE_SDA))
     880:	4c 9b       	sbis	0x09, 4	; 9
     882:	0f c0       	rjmp	.+30     	; 0x8a2 <__vector_5+0x36>
		{
			I2C_SLAVE_startRecived = false;
     884:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <I2C_SLAVE_startRecived>
			I2C_SLAVE_startRecived = true;
		}
		//If it was a stop-bit reset received data, and set SCL trigger to rising.
		if(I2C_SLAVE_startRecived == false)
		{
			I2C_SLAVE_recevedAddr = 0;
     888:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <I2C_SLAVE_recevedAddr>
			I2C_SLAVE_recevedBits = 0;
     88c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <I2C_SLAVE_recevedBits>
			I2C_SLAVE_SCL_RISING();
     890:	e9 e6       	ldi	r30, 0x69	; 105
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	80 81       	ld	r24, Z
     896:	82 60       	ori	r24, 0x02	; 2
     898:	80 83       	st	Z, r24
     89a:	80 81       	ld	r24, Z
     89c:	81 60       	ori	r24, 0x01	; 1
     89e:	80 83       	st	Z, r24
     8a0:	03 c0       	rjmp	.+6      	; 0x8a8 <__vector_5+0x3c>
			I2C_SLAVE_startRecived = false;
		}
		//Else it is a start-bit.
		else
		{
			I2C_SLAVE_startRecived = true;
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <I2C_SLAVE_startRecived>
			I2C_SLAVE_recevedAddr = 0;
			I2C_SLAVE_recevedBits = 0;
			I2C_SLAVE_SCL_RISING();
		}
	}
}
     8a8:	ff 91       	pop	r31
     8aa:	ef 91       	pop	r30
     8ac:	8f 91       	pop	r24
     8ae:	0f 90       	pop	r0
     8b0:	0f be       	out	0x3f, r0	; 63
     8b2:	0f 90       	pop	r0
     8b4:	1f 90       	pop	r1
     8b6:	18 95       	reti

000008b8 <init_motors>:

static void startTimer2();
static void stopTimer2();
static void startTimePan2();

void init_motors(){
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
	
	//Set pins as output
	MOTOR1_DIR_PORT_DDR |= (1 << MOTOR1_DIR_PIN_LOCATION1) | (1 << MOTOR1_DIR_PIN_LOCATION2);
     8be:	8a b1       	in	r24, 0x0a	; 10
     8c0:	88 68       	ori	r24, 0x88	; 136
     8c2:	8a b9       	out	0x0a, r24	; 10
	MOTOR2_DIR_PORT_DDR |= (1 << MOTOR2_DIR_PIN_LOCATION1) | (1 << MOTOR2_DIR_PIN_LOCATION2);
     8c4:	87 b1       	in	r24, 0x07	; 7
     8c6:	80 63       	ori	r24, 0x30	; 48
     8c8:	87 b9       	out	0x07, r24	; 7
	
	//Set enable pins to output low as default
	MOTOR1_ENABLE_PORT_DDR |= (1 << MOTOR1_EN_PIN_LOCATION);
     8ca:	55 9a       	sbi	0x0a, 5	; 10
	MOTOR2_ENABLE_PORT_DDR |= (1 << MOTOR2_EN_PIN_LOCATION);
     8cc:	56 9a       	sbi	0x0a, 6	; 10
	MOTOR1_ENABLE_PORT &= ~(1 << MOTOR1_EN_PIN_LOCATION);
     8ce:	5d 98       	cbi	0x0b, 5	; 11
	MOTOR2_ENABLE_PORT &= ~(1 << MOTOR2_EN_PIN_LOCATION);
     8d0:	5e 98       	cbi	0x0b, 6	; 11
	
	//Set motor to off
	MOTOR1_SETING(MOTOR_OFF);
     8d2:	5b 9a       	sbi	0x0b, 3	; 11
     8d4:	5f 9a       	sbi	0x0b, 7	; 11
	MOTOR2_SETING(MOTOR_OFF);
     8d6:	44 9a       	sbi	0x08, 4	; 8
     8d8:	45 9a       	sbi	0x08, 5	; 8
	
	//Disable motors
	MOTOR1_DISABLE();
     8da:	84 b5       	in	r24, 0x24	; 36
     8dc:	8f 7c       	andi	r24, 0xCF	; 207
     8de:	84 bd       	out	0x24, r24	; 36
	MOTOR2_DISABLE();
     8e0:	84 b5       	in	r24, 0x24	; 36
     8e2:	8f 73       	andi	r24, 0x3F	; 63
     8e4:	84 bd       	out	0x24, r24	; 36
	
		
	//Setup timer 0 PWMs for the motors
	PRR &= ~(1 << PRTIM0);
     8e6:	c4 e6       	ldi	r28, 0x64	; 100
     8e8:	d0 e0       	ldi	r29, 0x00	; 0
     8ea:	88 81       	ld	r24, Y
     8ec:	8f 7d       	andi	r24, 0xDF	; 223
     8ee:	88 83       	st	Y, r24
	
	// phase correct PWM mode, prescaler = 256, freq ~ 61,27451 Hz (8000000/(256*510)
	TCCR0A = (1 << WGM00);
     8f0:	11 e0       	ldi	r17, 0x01	; 1
     8f2:	14 bd       	out	0x24, r17	; 36
	TCCR0B = (1 << CS02);
     8f4:	84 e0       	ldi	r24, 0x04	; 4
     8f6:	85 bd       	out	0x25, r24	; 37
	
	//Set PWM for the motors
	setMotorPWM(0, MOTOR1);
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorPWM>
	setMotorPWM(0, MOTOR2);
     900:	61 e0       	ldi	r22, 0x01	; 1
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorPWM>
	
	//Setup timer 2 to 125 Hz and TOF interrupt, prescaler = 256, OCRA = 249 (16000000 Hz/(256*250) = 250 Hz (error = 125 +- 1Hz)
	PRR &= ~(1 << PRTIM2);
     908:	88 81       	ld	r24, Y
     90a:	8f 7b       	andi	r24, 0xBF	; 191
     90c:	88 83       	st	Y, r24
	TCCR2A = (1 << WGM21) | (1 << WGM20);
     90e:	83 e0       	ldi	r24, 0x03	; 3
     910:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
	TCCR2B = (1 << WGM22);
     914:	88 e0       	ldi	r24, 0x08	; 8
     916:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	OCR2A = TIMER2_TOP;
     91a:	89 ef       	ldi	r24, 0xF9	; 249
     91c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
	TIMSK2 = (1 << TOIE2);
     920:	10 93 70 00 	sts	0x0070, r17	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
	
}
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	1f 91       	pop	r17
     92a:	08 95       	ret

0000092c <startTimePan1>:

void startTimePan1(){
	
	//Set internal flag
	pan1_cooking_time = 0;
     92c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <pan1_cooking_time+0x1>
     930:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <pan1_cooking_time>
	pan1Free = false;
     934:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <pan1Free>
     938:	08 95       	ret

0000093a <flipPan1>:
	}
}

void flipPan1(){
	
	motor_flipping = MOTOR1;
     93a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <motor_flipping>
	setMotorPWM(MOTOR_OPTIMUM_PWM_FORWARD, motor_flipping);
     93e:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <motor_flipping>
     942:	81 e2       	ldi	r24, 0x21	; 33
     944:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorPWM>
	
	//Flip forward
	MOTOR1_SETING(MOTOR_FORWARD);
     948:	5b 9a       	sbi	0x0b, 3	; 11
     94a:	5f 98       	cbi	0x0b, 7	; 11
	MOTOR1_ENABLE();
     94c:	84 b5       	in	r24, 0x24	; 36
     94e:	80 63       	ori	r24, 0x30	; 48
     950:	84 bd       	out	0x24, r24	; 36
	startTimer2();
	
}

static void startTimer2(){
	curr_time = 0;
     952:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <curr_time+0x1>
     956:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <curr_time>
	TCCR2B |= (1 << CS22) | (1 << CS20);
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	80 81       	ld	r24, Z
     960:	85 60       	ori	r24, 0x05	; 5
     962:	80 83       	st	Z, r24
     964:	08 95       	ret

00000966 <flipPan2>:
	startTimer2();
}

void flipPan2(){
	
	motor_flipping = MOTOR2;
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <motor_flipping>
	setMotorPWM(MOTOR_OPTIMUM_PWM_FORWARD, motor_flipping);
     96c:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <motor_flipping>
     970:	81 e2       	ldi	r24, 0x21	; 33
     972:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorPWM>
	
	//Flip forward
	MOTOR2_SETING(MOTOR_FORWARD);
     976:	44 9a       	sbi	0x08, 4	; 8
     978:	45 98       	cbi	0x08, 5	; 8
	MOTOR2_ENABLE();
     97a:	84 b5       	in	r24, 0x24	; 36
     97c:	80 6c       	ori	r24, 0xC0	; 192
     97e:	84 bd       	out	0x24, r24	; 36
	startTimer2();
	
}

static void startTimer2(){
	curr_time = 0;
     980:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <curr_time+0x1>
     984:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <curr_time>
	TCCR2B |= (1 << CS22) | (1 << CS20);
     988:	e1 eb       	ldi	r30, 0xB1	; 177
     98a:	f0 e0       	ldi	r31, 0x00	; 0
     98c:	80 81       	ld	r24, Z
     98e:	85 60       	ori	r24, 0x05	; 5
     990:	80 83       	st	Z, r24
     992:	08 95       	ret

00000994 <__vector_9>:
	
	//Reset count
	TCNT2 = 0x00;
}

ISR(TIMER2_OVF_vect) {
     994:	1f 92       	push	r1
     996:	0f 92       	push	r0
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	0f 92       	push	r0
     99c:	11 24       	eor	r1, r1
     99e:	2f 93       	push	r18
     9a0:	3f 93       	push	r19
     9a2:	4f 93       	push	r20
     9a4:	5f 93       	push	r21
     9a6:	6f 93       	push	r22
     9a8:	7f 93       	push	r23
     9aa:	8f 93       	push	r24
     9ac:	9f 93       	push	r25
     9ae:	af 93       	push	r26
     9b0:	bf 93       	push	r27
     9b2:	ef 93       	push	r30
     9b4:	ff 93       	push	r31
	
	switch (curr_time++) {
     9b6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <curr_time>
     9ba:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <curr_time+0x1>
     9be:	9c 01       	movw	r18, r24
     9c0:	2f 5f       	subi	r18, 0xFF	; 255
     9c2:	3f 4f       	sbci	r19, 0xFF	; 255
     9c4:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <curr_time+0x1>
     9c8:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <curr_time>
     9cc:	86 3d       	cpi	r24, 0xD6	; 214
     9ce:	26 e0       	ldi	r18, 0x06	; 6
     9d0:	92 07       	cpc	r25, r18
     9d2:	71 f1       	breq	.+92     	; 0xa30 <__vector_9+0x9c>
     9d4:	20 f4       	brcc	.+8      	; 0x9de <__vector_9+0x4a>
     9d6:	88 3e       	cpi	r24, 0xE8	; 232
     9d8:	93 40       	sbci	r25, 0x03	; 3
     9da:	51 f0       	breq	.+20     	; 0x9f0 <__vector_9+0x5c>
     9dc:	6d c0       	rjmp	.+218    	; 0xab8 <__vector_9+0x124>
     9de:	8e 3b       	cpi	r24, 0xBE	; 190
     9e0:	2a e0       	ldi	r18, 0x0A	; 10
     9e2:	92 07       	cpc	r25, r18
     9e4:	29 f0       	breq	.+10     	; 0x9f0 <__vector_9+0x5c>
     9e6:	8c 3a       	cpi	r24, 0xAC	; 172
     9e8:	9d 40       	sbci	r25, 0x0D	; 13
     9ea:	09 f4       	brne	.+2      	; 0x9ee <__vector_9+0x5a>
     9ec:	47 c0       	rjmp	.+142    	; 0xa7c <__vector_9+0xe8>
     9ee:	64 c0       	rjmp	.+200    	; 0xab8 <__vector_9+0x124>
		
		//Mid way time to break
		case MOTOR_FORWARD_TIME_S:
		case MOTOR_BACKWARD_TIME_S:
			if (motor_flipping == MOTOR1) {
     9f0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <motor_flipping>
     9f4:	81 11       	cpse	r24, r1
     9f6:	0e c0       	rjmp	.+28     	; 0xa14 <__vector_9+0x80>
				MOTOR1_DISABLE();
     9f8:	84 b5       	in	r24, 0x24	; 36
     9fa:	8f 7c       	andi	r24, 0xCF	; 207
     9fc:	84 bd       	out	0x24, r24	; 36
				setMotorPWM(MOTOR_OPTIMUM_PWM_BREAK, motor_flipping);
     9fe:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <motor_flipping>
     a02:	84 e6       	ldi	r24, 0x64	; 100
     a04:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorPWM>
				MOTOR1_SETING(MOTOR_BREAK);
     a08:	5b 98       	cbi	0x0b, 3	; 11
     a0a:	5f 98       	cbi	0x0b, 7	; 11
				MOTOR1_ENABLE();
     a0c:	84 b5       	in	r24, 0x24	; 36
     a0e:	80 63       	ori	r24, 0x30	; 48
     a10:	84 bd       	out	0x24, r24	; 36
     a12:	52 c0       	rjmp	.+164    	; 0xab8 <__vector_9+0x124>
			}
			else {
				MOTOR2_DISABLE();
     a14:	84 b5       	in	r24, 0x24	; 36
     a16:	8f 73       	andi	r24, 0x3F	; 63
     a18:	84 bd       	out	0x24, r24	; 36
				setMotorPWM(MOTOR_OPTIMUM_PWM_BREAK, motor_flipping);
     a1a:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <motor_flipping>
     a1e:	84 e6       	ldi	r24, 0x64	; 100
     a20:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorPWM>
				MOTOR2_SETING(MOTOR_BREAK);
     a24:	44 98       	cbi	0x08, 4	; 8
     a26:	45 98       	cbi	0x08, 5	; 8
				MOTOR2_ENABLE();
     a28:	84 b5       	in	r24, 0x24	; 36
     a2a:	80 6c       	ori	r24, 0xC0	; 192
     a2c:	84 bd       	out	0x24, r24	; 36
     a2e:	44 c0       	rjmp	.+136    	; 0xab8 <__vector_9+0x124>
			}
			break;
		
		//We have stopped the pan at pancake destination time to go back
		case MOTOR_BREAK_FORWARD_TIME_S:
			if (motor_flipping == MOTOR1) {
     a30:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <motor_flipping>
     a34:	81 11       	cpse	r24, r1
     a36:	14 c0       	rjmp	.+40     	; 0xa60 <__vector_9+0xcc>
				MOTOR1_DISABLE();
     a38:	84 b5       	in	r24, 0x24	; 36
     a3a:	8f 7c       	andi	r24, 0xCF	; 207
     a3c:	84 bd       	out	0x24, r24	; 36
				setMotorPWM(MOTOR_OPTIMUM_PWM_BACKWARD, motor_flipping);
     a3e:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <motor_flipping>
     a42:	82 e4       	ldi	r24, 0x42	; 66
     a44:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorPWM>
				MOTOR1_SETING(MOTOR_BACKWARD);
     a48:	5b 98       	cbi	0x0b, 3	; 11
     a4a:	5f 9a       	sbi	0x0b, 7	; 11
				MOTOR1_ENABLE();
     a4c:	84 b5       	in	r24, 0x24	; 36
     a4e:	80 63       	ori	r24, 0x30	; 48
     a50:	84 bd       	out	0x24, r24	; 36
}

static void startTimePan2(){
	
	//Set internal flag
	pan2_cooking_time = 0;
     a52:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
     a56:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	pan2Free = false;
     a5a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
     a5e:	2c c0       	rjmp	.+88     	; 0xab8 <__vector_9+0x124>
				MOTOR1_SETING(MOTOR_BACKWARD);
				MOTOR1_ENABLE();
				startTimePan2();
			}
			else {
				MOTOR2_DISABLE();
     a60:	84 b5       	in	r24, 0x24	; 36
     a62:	8f 73       	andi	r24, 0x3F	; 63
     a64:	84 bd       	out	0x24, r24	; 36
				setMotorPWM(MOTOR_OPTIMUM_PWM_BACKWARD, motor_flipping);
     a66:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <motor_flipping>
     a6a:	82 e4       	ldi	r24, 0x42	; 66
     a6c:	0e 94 be 00 	call	0x17c	; 0x17c <setMotorPWM>
				MOTOR2_SETING(MOTOR_BACKWARD);
     a70:	44 98       	cbi	0x08, 4	; 8
     a72:	45 9a       	sbi	0x08, 5	; 8
				MOTOR2_ENABLE();
     a74:	84 b5       	in	r24, 0x24	; 36
     a76:	80 6c       	ori	r24, 0xC0	; 192
     a78:	84 bd       	out	0x24, r24	; 36
     a7a:	1e c0       	rjmp	.+60     	; 0xab8 <__vector_9+0x124>
			}
			break;
		
		//We have reached the starting position set flags
		case MOTOR_BREAK_BACKWARD_TIME_S:
			if (motor_flipping == MOTOR1) {
     a7c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <motor_flipping>
     a80:	81 11       	cpse	r24, r1
     a82:	09 c0       	rjmp	.+18     	; 0xa96 <__vector_9+0x102>
				MOTOR1_DISABLE();
     a84:	84 b5       	in	r24, 0x24	; 36
     a86:	8f 7c       	andi	r24, 0xCF	; 207
     a88:	84 bd       	out	0x24, r24	; 36
				MOTOR1_SETING(MOTOR_OFF);
     a8a:	5b 9a       	sbi	0x0b, 3	; 11
     a8c:	5f 9a       	sbi	0x0b, 7	; 11
				pan1Free = true;
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pan1Free>
     a94:	0a c0       	rjmp	.+20     	; 0xaaa <__vector_9+0x116>
			}
			else {
				MOTOR2_DISABLE();
     a96:	84 b5       	in	r24, 0x24	; 36
     a98:	8f 73       	andi	r24, 0x3F	; 63
     a9a:	84 bd       	out	0x24, r24	; 36
				MOTOR2_SETING(MOTOR_OFF);
     a9c:	44 9a       	sbi	0x08, 4	; 8
     a9e:	45 9a       	sbi	0x08, 5	; 8
				pancake_done = true;
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pancake_done>
				pan2Free = true;
     aa6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	TCCR2B |= (1 << CS22) | (1 << CS20);
}

static void stopTimer2(){
	//Stop clock
	TCCR2B &= ~((1 << CS22) | (1 << CS20));
     aaa:	e1 eb       	ldi	r30, 0xB1	; 177
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	80 81       	ld	r24, Z
     ab0:	8a 7f       	andi	r24, 0xFA	; 250
     ab2:	80 83       	st	Z, r24
	
	//Reset count
	TCNT2 = 0x00;
     ab4:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
			}
			//Stop the timer
			stopTimer2();
			break;
	}
}
     ab8:	ff 91       	pop	r31
     aba:	ef 91       	pop	r30
     abc:	bf 91       	pop	r27
     abe:	af 91       	pop	r26
     ac0:	9f 91       	pop	r25
     ac2:	8f 91       	pop	r24
     ac4:	7f 91       	pop	r23
     ac6:	6f 91       	pop	r22
     ac8:	5f 91       	pop	r21
     aca:	4f 91       	pop	r20
     acc:	3f 91       	pop	r19
     ace:	2f 91       	pop	r18
     ad0:	0f 90       	pop	r0
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	0f 90       	pop	r0
     ad6:	1f 90       	pop	r1
     ad8:	18 95       	reti

00000ada <init_1Hz_timer>:
	
}

void init_1Hz_timer(){
	//Setup timer
	PRR &= ~(1 << PRTIM1);	//Enable timer 1
     ada:	e4 e6       	ldi	r30, 0x64	; 100
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	80 81       	ld	r24, Z
     ae0:	87 7f       	andi	r24, 0xF7	; 247
     ae2:	80 83       	st	Z, r24
	
	 
	//Timer is in fast PWM mode, TOP is ICR1 and prescaler is 256
	TCCR1A = (1 << WGM11);
     ae4:	82 e0       	ldi	r24, 0x02	; 2
     ae6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS12);
     aea:	8c e1       	ldi	r24, 0x1C	; 28
     aec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	
	//Set TOP value
	ICR1 = TIMER_1HZ_TOP;
     af0:	83 e2       	ldi	r24, 0x23	; 35
     af2:	94 ef       	ldi	r25, 0xF4	; 244
     af4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
     af8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	
	//Overflow interrupt enabled
	TIMSK1 = (1 << TOIE1);
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     b02:	08 95       	ret

00000b04 <main>:
void init_1Hz_timer();

int main(void)
{
	//Enable interrupts
	sei();
     b04:	78 94       	sei
	init_1Hz_timer();
     b06:	0e 94 6d 05 	call	0xada	; 0xada <init_1Hz_timer>
	
	init_digital_comm();		//Initialize the digital communication
     b0a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <init_digital_comm>
	I2C_SLAVE_init();			//Initialize the I2C communication
     b0e:	0e 94 ae 02 	call	0x55c	; 0x55c <I2C_SLAVE_init>
	init_regulation();			//Initialize the regulation
     b12:	0e 94 2e 01 	call	0x25c	; 0x25c <init_regulation>
	init_motors();				//Initialize the motor pins and PWMs
     b16:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <init_motors>

	I2C_commands_t temp = 0xFF;
	
	bool check_for_free_pan = false;
	bool check_begin_cooking = false;
     b1a:	d0 e0       	ldi	r29, 0x00	; 0
	init_regulation();			//Initialize the regulation
	init_motors();				//Initialize the motor pins and PWMs

	I2C_commands_t temp = 0xFF;
	
	bool check_for_free_pan = false;
     b1c:	10 e0       	ldi	r17, 0x00	; 0
	init_digital_comm();		//Initialize the digital communication
	I2C_SLAVE_init();			//Initialize the I2C communication
	init_regulation();			//Initialize the regulation
	init_motors();				//Initialize the motor pins and PWMs

	I2C_commands_t temp = 0xFF;
     b1e:	cf ef       	ldi	r28, 0xFF	; 255
			temp = I2C_SLAVE_getData();
		}
		
		if (check_for_free_pan && pan1Free && heat_ok){
			I2C_SLAVE_sendData(pan1Free);
			check_for_free_pan = false;
     b20:	00 e0       	ldi	r16, 0x00	; 0
				I2C_SLAVE_sendData(temp);
				temp = 0xFF;
				break;

			case GET_FIRST_PAN_STATUS:
				check_for_free_pan = true;
     b22:	ee 24       	eor	r14, r14
     b24:	e3 94       	inc	r14
				temp = 0xFF;
     b26:	ff 24       	eor	r15, r15
     b28:	fa 94       	dec	r15
     b2a:	01 c0       	rjmp	.+2      	; 0xb2e <main+0x2a>
		if (check_begin_cooking) {
			startTimePan1();
			check_begin_cooking = false;
		}
		
		switch (temp) {
     b2c:	d0 2f       	mov	r29, r16
	bool check_for_free_pan = false;
	bool check_begin_cooking = false;
    /* Replace with your application code */
    while (1) 
    {	
		if (pan1_cooking_time == PANCAKE_COOKING_TIME1_S){
     b2e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pan1_cooking_time>
     b32:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pan1_cooking_time+0x1>
     b36:	49 97       	sbiw	r24, 0x19	; 25
     b38:	11 f4       	brne	.+4      	; 0xb3e <main+0x3a>
			flipPan1();
     b3a:	0e 94 9d 04 	call	0x93a	; 0x93a <flipPan1>
		}
		
		if (pan2_cooking_time == PANCAKE_COOKING_TIME2_S){
     b3e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
     b42:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
     b46:	0a 97       	sbiw	r24, 0x0a	; 10
     b48:	11 f4       	brne	.+4      	; 0xb4e <main+0x4a>
			flipPan2();
     b4a:	0e 94 b3 04 	call	0x966	; 0x966 <flipPan2>
		}
		
		if (I2C_SLAVE_checkData()){
     b4e:	0e 94 29 02 	call	0x452	; 0x452 <I2C_SLAVE_checkData>
     b52:	88 23       	and	r24, r24
     b54:	19 f0       	breq	.+6      	; 0xb5c <main+0x58>
			temp = I2C_SLAVE_getData();
     b56:	0e 94 8d 02 	call	0x51a	; 0x51a <I2C_SLAVE_getData>
     b5a:	c8 2f       	mov	r28, r24
		}
		
		if (check_for_free_pan && pan1Free && heat_ok){
     b5c:	11 23       	and	r17, r17
     b5e:	69 f0       	breq	.+26     	; 0xb7a <main+0x76>
     b60:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pan1Free>
     b64:	88 23       	and	r24, r24
     b66:	49 f0       	breq	.+18     	; 0xb7a <main+0x76>
     b68:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <heat_ok>
     b6c:	88 23       	and	r24, r24
     b6e:	29 f0       	breq	.+10     	; 0xb7a <main+0x76>
			I2C_SLAVE_sendData(pan1Free);
     b70:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pan1Free>
     b74:	0e 94 34 02 	call	0x468	; 0x468 <I2C_SLAVE_sendData>
			check_for_free_pan = false;
     b78:	10 2f       	mov	r17, r16
		}
		
		if (check_begin_cooking) {
     b7a:	d1 11       	cpse	r29, r1
			startTimePan1();
     b7c:	0e 94 96 04 	call	0x92c	; 0x92c <startTimePan1>
			check_begin_cooking = false;
		}
		
		switch (temp) {
     b80:	c1 30       	cpi	r28, 0x01	; 1
     b82:	21 f0       	breq	.+8      	; 0xb8c <main+0x88>
     b84:	38 f0       	brcs	.+14     	; 0xb94 <main+0x90>
     b86:	c2 30       	cpi	r28, 0x02	; 2
     b88:	59 f0       	breq	.+22     	; 0xba0 <main+0x9c>
     b8a:	d0 cf       	rjmp	.-96     	; 0xb2c <main+0x28>
     b8c:	d0 2f       	mov	r29, r16
				I2C_SLAVE_sendData(temp);
				temp = 0xFF;
				break;

			case GET_FIRST_PAN_STATUS:
				check_for_free_pan = true;
     b8e:	1e 2d       	mov	r17, r14
				temp = 0xFF;
     b90:	cf 2d       	mov	r28, r15
     b92:	cd cf       	rjmp	.-102    	; 0xb2e <main+0x2a>
		}
		
		switch (temp) {
				
			case PING:
				I2C_SLAVE_sendData(temp);
     b94:	80 2f       	mov	r24, r16
     b96:	0e 94 34 02 	call	0x468	; 0x468 <I2C_SLAVE_sendData>
				temp = 0xFF;
				break;
     b9a:	d0 2f       	mov	r29, r16
		
		switch (temp) {
				
			case PING:
				I2C_SLAVE_sendData(temp);
				temp = 0xFF;
     b9c:	cf 2d       	mov	r28, r15
				break;
     b9e:	c7 cf       	rjmp	.-114    	; 0xb2e <main+0x2a>
				check_for_free_pan = true;
				temp = 0xFF;
				break;

			case BEGIN_COOKING:
				check_begin_cooking = true;
     ba0:	de 2d       	mov	r29, r14
				temp = 0xFF;
     ba2:	cf 2d       	mov	r28, r15
				break;
     ba4:	c4 cf       	rjmp	.-120    	; 0xb2e <main+0x2a>

00000ba6 <__vector_13>:
	
	//Overflow interrupt enabled
	TIMSK1 = (1 << TOIE1);
}

ISR(TIMER1_OVF_vect){
     ba6:	1f 92       	push	r1
     ba8:	0f 92       	push	r0
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	0f 92       	push	r0
     bae:	11 24       	eor	r1, r1
     bb0:	2f 93       	push	r18
     bb2:	3f 93       	push	r19
     bb4:	4f 93       	push	r20
     bb6:	5f 93       	push	r21
     bb8:	6f 93       	push	r22
     bba:	7f 93       	push	r23
     bbc:	8f 93       	push	r24
     bbe:	9f 93       	push	r25
     bc0:	af 93       	push	r26
     bc2:	bf 93       	push	r27
     bc4:	ef 93       	push	r30
     bc6:	ff 93       	push	r31
	
	//Control cooking time
	pan1_cooking_time += (pan1Free ? 0 : 1);
     bc8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <pan1Free>
     bcc:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <pan1_cooking_time>
     bd0:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <pan1_cooking_time+0x1>
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	98 27       	eor	r25, r24
     bd8:	29 0f       	add	r18, r25
     bda:	31 1d       	adc	r19, r1
     bdc:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <pan1_cooking_time+0x1>
     be0:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <pan1_cooking_time>
	pan2_cooking_time += (pan2Free ? 0 : 1);
     be4:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     be8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
     bec:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
     bf0:	89 27       	eor	r24, r25
     bf2:	a9 01       	movw	r20, r18
     bf4:	48 0f       	add	r20, r24
     bf6:	51 1d       	adc	r21, r1
     bf8:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <__data_end+0x1>
     bfc:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <__data_end>
	
	//Pancake Done
	pancakeDone();
     c00:	0e 94 0e 01 	call	0x21c	; 0x21c <pancakeDone>
	
}
     c04:	ff 91       	pop	r31
     c06:	ef 91       	pop	r30
     c08:	bf 91       	pop	r27
     c0a:	af 91       	pop	r26
     c0c:	9f 91       	pop	r25
     c0e:	8f 91       	pop	r24
     c10:	7f 91       	pop	r23
     c12:	6f 91       	pop	r22
     c14:	5f 91       	pop	r21
     c16:	4f 91       	pop	r20
     c18:	3f 91       	pop	r19
     c1a:	2f 91       	pop	r18
     c1c:	0f 90       	pop	r0
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	0f 90       	pop	r0
     c22:	1f 90       	pop	r1
     c24:	18 95       	reti

00000c26 <__subsf3>:
     c26:	50 58       	subi	r21, 0x80	; 128

00000c28 <__addsf3>:
     c28:	bb 27       	eor	r27, r27
     c2a:	aa 27       	eor	r26, r26
     c2c:	0e 94 2b 06 	call	0xc56	; 0xc56 <__addsf3x>
     c30:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <__fp_round>
     c34:	0e 94 3c 07 	call	0xe78	; 0xe78 <__fp_pscA>
     c38:	38 f0       	brcs	.+14     	; 0xc48 <__addsf3+0x20>
     c3a:	0e 94 43 07 	call	0xe86	; 0xe86 <__fp_pscB>
     c3e:	20 f0       	brcs	.+8      	; 0xc48 <__addsf3+0x20>
     c40:	39 f4       	brne	.+14     	; 0xc50 <__addsf3+0x28>
     c42:	9f 3f       	cpi	r25, 0xFF	; 255
     c44:	19 f4       	brne	.+6      	; 0xc4c <__addsf3+0x24>
     c46:	26 f4       	brtc	.+8      	; 0xc50 <__addsf3+0x28>
     c48:	0c 94 39 07 	jmp	0xe72	; 0xe72 <__fp_nan>
     c4c:	0e f4       	brtc	.+2      	; 0xc50 <__addsf3+0x28>
     c4e:	e0 95       	com	r30
     c50:	e7 fb       	bst	r30, 7
     c52:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__fp_inf>

00000c56 <__addsf3x>:
     c56:	e9 2f       	mov	r30, r25
     c58:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__fp_split3>
     c5c:	58 f3       	brcs	.-42     	; 0xc34 <__addsf3+0xc>
     c5e:	ba 17       	cp	r27, r26
     c60:	62 07       	cpc	r22, r18
     c62:	73 07       	cpc	r23, r19
     c64:	84 07       	cpc	r24, r20
     c66:	95 07       	cpc	r25, r21
     c68:	20 f0       	brcs	.+8      	; 0xc72 <__addsf3x+0x1c>
     c6a:	79 f4       	brne	.+30     	; 0xc8a <__addsf3x+0x34>
     c6c:	a6 f5       	brtc	.+104    	; 0xcd6 <__addsf3x+0x80>
     c6e:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__fp_zero>
     c72:	0e f4       	brtc	.+2      	; 0xc76 <__addsf3x+0x20>
     c74:	e0 95       	com	r30
     c76:	0b 2e       	mov	r0, r27
     c78:	ba 2f       	mov	r27, r26
     c7a:	a0 2d       	mov	r26, r0
     c7c:	0b 01       	movw	r0, r22
     c7e:	b9 01       	movw	r22, r18
     c80:	90 01       	movw	r18, r0
     c82:	0c 01       	movw	r0, r24
     c84:	ca 01       	movw	r24, r20
     c86:	a0 01       	movw	r20, r0
     c88:	11 24       	eor	r1, r1
     c8a:	ff 27       	eor	r31, r31
     c8c:	59 1b       	sub	r21, r25
     c8e:	99 f0       	breq	.+38     	; 0xcb6 <__addsf3x+0x60>
     c90:	59 3f       	cpi	r21, 0xF9	; 249
     c92:	50 f4       	brcc	.+20     	; 0xca8 <__addsf3x+0x52>
     c94:	50 3e       	cpi	r21, 0xE0	; 224
     c96:	68 f1       	brcs	.+90     	; 0xcf2 <__addsf3x+0x9c>
     c98:	1a 16       	cp	r1, r26
     c9a:	f0 40       	sbci	r31, 0x00	; 0
     c9c:	a2 2f       	mov	r26, r18
     c9e:	23 2f       	mov	r18, r19
     ca0:	34 2f       	mov	r19, r20
     ca2:	44 27       	eor	r20, r20
     ca4:	58 5f       	subi	r21, 0xF8	; 248
     ca6:	f3 cf       	rjmp	.-26     	; 0xc8e <__addsf3x+0x38>
     ca8:	46 95       	lsr	r20
     caa:	37 95       	ror	r19
     cac:	27 95       	ror	r18
     cae:	a7 95       	ror	r26
     cb0:	f0 40       	sbci	r31, 0x00	; 0
     cb2:	53 95       	inc	r21
     cb4:	c9 f7       	brne	.-14     	; 0xca8 <__addsf3x+0x52>
     cb6:	7e f4       	brtc	.+30     	; 0xcd6 <__addsf3x+0x80>
     cb8:	1f 16       	cp	r1, r31
     cba:	ba 0b       	sbc	r27, r26
     cbc:	62 0b       	sbc	r22, r18
     cbe:	73 0b       	sbc	r23, r19
     cc0:	84 0b       	sbc	r24, r20
     cc2:	ba f0       	brmi	.+46     	; 0xcf2 <__addsf3x+0x9c>
     cc4:	91 50       	subi	r25, 0x01	; 1
     cc6:	a1 f0       	breq	.+40     	; 0xcf0 <__addsf3x+0x9a>
     cc8:	ff 0f       	add	r31, r31
     cca:	bb 1f       	adc	r27, r27
     ccc:	66 1f       	adc	r22, r22
     cce:	77 1f       	adc	r23, r23
     cd0:	88 1f       	adc	r24, r24
     cd2:	c2 f7       	brpl	.-16     	; 0xcc4 <__addsf3x+0x6e>
     cd4:	0e c0       	rjmp	.+28     	; 0xcf2 <__addsf3x+0x9c>
     cd6:	ba 0f       	add	r27, r26
     cd8:	62 1f       	adc	r22, r18
     cda:	73 1f       	adc	r23, r19
     cdc:	84 1f       	adc	r24, r20
     cde:	48 f4       	brcc	.+18     	; 0xcf2 <__addsf3x+0x9c>
     ce0:	87 95       	ror	r24
     ce2:	77 95       	ror	r23
     ce4:	67 95       	ror	r22
     ce6:	b7 95       	ror	r27
     ce8:	f7 95       	ror	r31
     cea:	9e 3f       	cpi	r25, 0xFE	; 254
     cec:	08 f0       	brcs	.+2      	; 0xcf0 <__addsf3x+0x9a>
     cee:	b0 cf       	rjmp	.-160    	; 0xc50 <__addsf3+0x28>
     cf0:	93 95       	inc	r25
     cf2:	88 0f       	add	r24, r24
     cf4:	08 f0       	brcs	.+2      	; 0xcf8 <__addsf3x+0xa2>
     cf6:	99 27       	eor	r25, r25
     cf8:	ee 0f       	add	r30, r30
     cfa:	97 95       	ror	r25
     cfc:	87 95       	ror	r24
     cfe:	08 95       	ret

00000d00 <ceil>:
     d00:	0e 94 7d 07 	call	0xefa	; 0xefa <__fp_trunc>
     d04:	90 f0       	brcs	.+36     	; 0xd2a <ceil+0x2a>
     d06:	9f 37       	cpi	r25, 0x7F	; 127
     d08:	48 f4       	brcc	.+18     	; 0xd1c <ceil+0x1c>
     d0a:	91 11       	cpse	r25, r1
     d0c:	16 f4       	brtc	.+4      	; 0xd12 <ceil+0x12>
     d0e:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__fp_szero>
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	70 e0       	ldi	r23, 0x00	; 0
     d16:	80 e8       	ldi	r24, 0x80	; 128
     d18:	9f e3       	ldi	r25, 0x3F	; 63
     d1a:	08 95       	ret
     d1c:	26 f0       	brts	.+8      	; 0xd26 <ceil+0x26>
     d1e:	1b 16       	cp	r1, r27
     d20:	61 1d       	adc	r22, r1
     d22:	71 1d       	adc	r23, r1
     d24:	81 1d       	adc	r24, r1
     d26:	0c 94 10 07 	jmp	0xe20	; 0xe20 <__fp_mintl>
     d2a:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__fp_mpack>

00000d2e <__fixsfsi>:
     d2e:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__fixunssfsi>
     d32:	68 94       	set
     d34:	b1 11       	cpse	r27, r1
     d36:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__fp_szero>
     d3a:	08 95       	ret

00000d3c <__fixunssfsi>:
     d3c:	0e 94 63 07 	call	0xec6	; 0xec6 <__fp_splitA>
     d40:	88 f0       	brcs	.+34     	; 0xd64 <__fixunssfsi+0x28>
     d42:	9f 57       	subi	r25, 0x7F	; 127
     d44:	98 f0       	brcs	.+38     	; 0xd6c <__fixunssfsi+0x30>
     d46:	b9 2f       	mov	r27, r25
     d48:	99 27       	eor	r25, r25
     d4a:	b7 51       	subi	r27, 0x17	; 23
     d4c:	b0 f0       	brcs	.+44     	; 0xd7a <__fixunssfsi+0x3e>
     d4e:	e1 f0       	breq	.+56     	; 0xd88 <__fixunssfsi+0x4c>
     d50:	66 0f       	add	r22, r22
     d52:	77 1f       	adc	r23, r23
     d54:	88 1f       	adc	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	1a f0       	brmi	.+6      	; 0xd60 <__fixunssfsi+0x24>
     d5a:	ba 95       	dec	r27
     d5c:	c9 f7       	brne	.-14     	; 0xd50 <__fixunssfsi+0x14>
     d5e:	14 c0       	rjmp	.+40     	; 0xd88 <__fixunssfsi+0x4c>
     d60:	b1 30       	cpi	r27, 0x01	; 1
     d62:	91 f0       	breq	.+36     	; 0xd88 <__fixunssfsi+0x4c>
     d64:	0e 94 95 07 	call	0xf2a	; 0xf2a <__fp_zero>
     d68:	b1 e0       	ldi	r27, 0x01	; 1
     d6a:	08 95       	ret
     d6c:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__fp_zero>
     d70:	67 2f       	mov	r22, r23
     d72:	78 2f       	mov	r23, r24
     d74:	88 27       	eor	r24, r24
     d76:	b8 5f       	subi	r27, 0xF8	; 248
     d78:	39 f0       	breq	.+14     	; 0xd88 <__fixunssfsi+0x4c>
     d7a:	b9 3f       	cpi	r27, 0xF9	; 249
     d7c:	cc f3       	brlt	.-14     	; 0xd70 <__fixunssfsi+0x34>
     d7e:	86 95       	lsr	r24
     d80:	77 95       	ror	r23
     d82:	67 95       	ror	r22
     d84:	b3 95       	inc	r27
     d86:	d9 f7       	brne	.-10     	; 0xd7e <__fixunssfsi+0x42>
     d88:	3e f4       	brtc	.+14     	; 0xd98 <__fixunssfsi+0x5c>
     d8a:	90 95       	com	r25
     d8c:	80 95       	com	r24
     d8e:	70 95       	com	r23
     d90:	61 95       	neg	r22
     d92:	7f 4f       	sbci	r23, 0xFF	; 255
     d94:	8f 4f       	sbci	r24, 0xFF	; 255
     d96:	9f 4f       	sbci	r25, 0xFF	; 255
     d98:	08 95       	ret

00000d9a <__floatunsisf>:
     d9a:	e8 94       	clt
     d9c:	09 c0       	rjmp	.+18     	; 0xdb0 <__floatsisf+0x12>

00000d9e <__floatsisf>:
     d9e:	97 fb       	bst	r25, 7
     da0:	3e f4       	brtc	.+14     	; 0xdb0 <__floatsisf+0x12>
     da2:	90 95       	com	r25
     da4:	80 95       	com	r24
     da6:	70 95       	com	r23
     da8:	61 95       	neg	r22
     daa:	7f 4f       	sbci	r23, 0xFF	; 255
     dac:	8f 4f       	sbci	r24, 0xFF	; 255
     dae:	9f 4f       	sbci	r25, 0xFF	; 255
     db0:	99 23       	and	r25, r25
     db2:	a9 f0       	breq	.+42     	; 0xdde <__floatsisf+0x40>
     db4:	f9 2f       	mov	r31, r25
     db6:	96 e9       	ldi	r25, 0x96	; 150
     db8:	bb 27       	eor	r27, r27
     dba:	93 95       	inc	r25
     dbc:	f6 95       	lsr	r31
     dbe:	87 95       	ror	r24
     dc0:	77 95       	ror	r23
     dc2:	67 95       	ror	r22
     dc4:	b7 95       	ror	r27
     dc6:	f1 11       	cpse	r31, r1
     dc8:	f8 cf       	rjmp	.-16     	; 0xdba <__floatsisf+0x1c>
     dca:	fa f4       	brpl	.+62     	; 0xe0a <__floatsisf+0x6c>
     dcc:	bb 0f       	add	r27, r27
     dce:	11 f4       	brne	.+4      	; 0xdd4 <__floatsisf+0x36>
     dd0:	60 ff       	sbrs	r22, 0
     dd2:	1b c0       	rjmp	.+54     	; 0xe0a <__floatsisf+0x6c>
     dd4:	6f 5f       	subi	r22, 0xFF	; 255
     dd6:	7f 4f       	sbci	r23, 0xFF	; 255
     dd8:	8f 4f       	sbci	r24, 0xFF	; 255
     dda:	9f 4f       	sbci	r25, 0xFF	; 255
     ddc:	16 c0       	rjmp	.+44     	; 0xe0a <__floatsisf+0x6c>
     dde:	88 23       	and	r24, r24
     de0:	11 f0       	breq	.+4      	; 0xde6 <__floatsisf+0x48>
     de2:	96 e9       	ldi	r25, 0x96	; 150
     de4:	11 c0       	rjmp	.+34     	; 0xe08 <__floatsisf+0x6a>
     de6:	77 23       	and	r23, r23
     de8:	21 f0       	breq	.+8      	; 0xdf2 <__floatsisf+0x54>
     dea:	9e e8       	ldi	r25, 0x8E	; 142
     dec:	87 2f       	mov	r24, r23
     dee:	76 2f       	mov	r23, r22
     df0:	05 c0       	rjmp	.+10     	; 0xdfc <__floatsisf+0x5e>
     df2:	66 23       	and	r22, r22
     df4:	71 f0       	breq	.+28     	; 0xe12 <__floatsisf+0x74>
     df6:	96 e8       	ldi	r25, 0x86	; 134
     df8:	86 2f       	mov	r24, r22
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	2a f0       	brmi	.+10     	; 0xe0a <__floatsisf+0x6c>
     e00:	9a 95       	dec	r25
     e02:	66 0f       	add	r22, r22
     e04:	77 1f       	adc	r23, r23
     e06:	88 1f       	adc	r24, r24
     e08:	da f7       	brpl	.-10     	; 0xe00 <__floatsisf+0x62>
     e0a:	88 0f       	add	r24, r24
     e0c:	96 95       	lsr	r25
     e0e:	87 95       	ror	r24
     e10:	97 f9       	bld	r25, 7
     e12:	08 95       	ret

00000e14 <__fp_inf>:
     e14:	97 f9       	bld	r25, 7
     e16:	9f 67       	ori	r25, 0x7F	; 127
     e18:	80 e8       	ldi	r24, 0x80	; 128
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	08 95       	ret

00000e20 <__fp_mintl>:
     e20:	88 23       	and	r24, r24
     e22:	71 f4       	brne	.+28     	; 0xe40 <__fp_mintl+0x20>
     e24:	77 23       	and	r23, r23
     e26:	21 f0       	breq	.+8      	; 0xe30 <__fp_mintl+0x10>
     e28:	98 50       	subi	r25, 0x08	; 8
     e2a:	87 2b       	or	r24, r23
     e2c:	76 2f       	mov	r23, r22
     e2e:	07 c0       	rjmp	.+14     	; 0xe3e <__fp_mintl+0x1e>
     e30:	66 23       	and	r22, r22
     e32:	11 f4       	brne	.+4      	; 0xe38 <__fp_mintl+0x18>
     e34:	99 27       	eor	r25, r25
     e36:	0d c0       	rjmp	.+26     	; 0xe52 <__fp_mintl+0x32>
     e38:	90 51       	subi	r25, 0x10	; 16
     e3a:	86 2b       	or	r24, r22
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	2a f0       	brmi	.+10     	; 0xe4c <__fp_mintl+0x2c>
     e42:	9a 95       	dec	r25
     e44:	66 0f       	add	r22, r22
     e46:	77 1f       	adc	r23, r23
     e48:	88 1f       	adc	r24, r24
     e4a:	da f7       	brpl	.-10     	; 0xe42 <__fp_mintl+0x22>
     e4c:	88 0f       	add	r24, r24
     e4e:	96 95       	lsr	r25
     e50:	87 95       	ror	r24
     e52:	97 f9       	bld	r25, 7
     e54:	08 95       	ret

00000e56 <__fp_mpack>:
     e56:	9f 3f       	cpi	r25, 0xFF	; 255
     e58:	31 f0       	breq	.+12     	; 0xe66 <__fp_mpack_finite+0xc>

00000e5a <__fp_mpack_finite>:
     e5a:	91 50       	subi	r25, 0x01	; 1
     e5c:	20 f4       	brcc	.+8      	; 0xe66 <__fp_mpack_finite+0xc>
     e5e:	87 95       	ror	r24
     e60:	77 95       	ror	r23
     e62:	67 95       	ror	r22
     e64:	b7 95       	ror	r27
     e66:	88 0f       	add	r24, r24
     e68:	91 1d       	adc	r25, r1
     e6a:	96 95       	lsr	r25
     e6c:	87 95       	ror	r24
     e6e:	97 f9       	bld	r25, 7
     e70:	08 95       	ret

00000e72 <__fp_nan>:
     e72:	9f ef       	ldi	r25, 0xFF	; 255
     e74:	80 ec       	ldi	r24, 0xC0	; 192
     e76:	08 95       	ret

00000e78 <__fp_pscA>:
     e78:	00 24       	eor	r0, r0
     e7a:	0a 94       	dec	r0
     e7c:	16 16       	cp	r1, r22
     e7e:	17 06       	cpc	r1, r23
     e80:	18 06       	cpc	r1, r24
     e82:	09 06       	cpc	r0, r25
     e84:	08 95       	ret

00000e86 <__fp_pscB>:
     e86:	00 24       	eor	r0, r0
     e88:	0a 94       	dec	r0
     e8a:	12 16       	cp	r1, r18
     e8c:	13 06       	cpc	r1, r19
     e8e:	14 06       	cpc	r1, r20
     e90:	05 06       	cpc	r0, r21
     e92:	08 95       	ret

00000e94 <__fp_round>:
     e94:	09 2e       	mov	r0, r25
     e96:	03 94       	inc	r0
     e98:	00 0c       	add	r0, r0
     e9a:	11 f4       	brne	.+4      	; 0xea0 <__fp_round+0xc>
     e9c:	88 23       	and	r24, r24
     e9e:	52 f0       	brmi	.+20     	; 0xeb4 <__fp_round+0x20>
     ea0:	bb 0f       	add	r27, r27
     ea2:	40 f4       	brcc	.+16     	; 0xeb4 <__fp_round+0x20>
     ea4:	bf 2b       	or	r27, r31
     ea6:	11 f4       	brne	.+4      	; 0xeac <__fp_round+0x18>
     ea8:	60 ff       	sbrs	r22, 0
     eaa:	04 c0       	rjmp	.+8      	; 0xeb4 <__fp_round+0x20>
     eac:	6f 5f       	subi	r22, 0xFF	; 255
     eae:	7f 4f       	sbci	r23, 0xFF	; 255
     eb0:	8f 4f       	sbci	r24, 0xFF	; 255
     eb2:	9f 4f       	sbci	r25, 0xFF	; 255
     eb4:	08 95       	ret

00000eb6 <__fp_split3>:
     eb6:	57 fd       	sbrc	r21, 7
     eb8:	90 58       	subi	r25, 0x80	; 128
     eba:	44 0f       	add	r20, r20
     ebc:	55 1f       	adc	r21, r21
     ebe:	59 f0       	breq	.+22     	; 0xed6 <__fp_splitA+0x10>
     ec0:	5f 3f       	cpi	r21, 0xFF	; 255
     ec2:	71 f0       	breq	.+28     	; 0xee0 <__fp_splitA+0x1a>
     ec4:	47 95       	ror	r20

00000ec6 <__fp_splitA>:
     ec6:	88 0f       	add	r24, r24
     ec8:	97 fb       	bst	r25, 7
     eca:	99 1f       	adc	r25, r25
     ecc:	61 f0       	breq	.+24     	; 0xee6 <__fp_splitA+0x20>
     ece:	9f 3f       	cpi	r25, 0xFF	; 255
     ed0:	79 f0       	breq	.+30     	; 0xef0 <__fp_splitA+0x2a>
     ed2:	87 95       	ror	r24
     ed4:	08 95       	ret
     ed6:	12 16       	cp	r1, r18
     ed8:	13 06       	cpc	r1, r19
     eda:	14 06       	cpc	r1, r20
     edc:	55 1f       	adc	r21, r21
     ede:	f2 cf       	rjmp	.-28     	; 0xec4 <__fp_split3+0xe>
     ee0:	46 95       	lsr	r20
     ee2:	f1 df       	rcall	.-30     	; 0xec6 <__fp_splitA>
     ee4:	08 c0       	rjmp	.+16     	; 0xef6 <__fp_splitA+0x30>
     ee6:	16 16       	cp	r1, r22
     ee8:	17 06       	cpc	r1, r23
     eea:	18 06       	cpc	r1, r24
     eec:	99 1f       	adc	r25, r25
     eee:	f1 cf       	rjmp	.-30     	; 0xed2 <__fp_splitA+0xc>
     ef0:	86 95       	lsr	r24
     ef2:	71 05       	cpc	r23, r1
     ef4:	61 05       	cpc	r22, r1
     ef6:	08 94       	sec
     ef8:	08 95       	ret

00000efa <__fp_trunc>:
     efa:	0e 94 63 07 	call	0xec6	; 0xec6 <__fp_splitA>
     efe:	a0 f0       	brcs	.+40     	; 0xf28 <__fp_trunc+0x2e>
     f00:	be e7       	ldi	r27, 0x7E	; 126
     f02:	b9 17       	cp	r27, r25
     f04:	88 f4       	brcc	.+34     	; 0xf28 <__fp_trunc+0x2e>
     f06:	bb 27       	eor	r27, r27
     f08:	9f 38       	cpi	r25, 0x8F	; 143
     f0a:	60 f4       	brcc	.+24     	; 0xf24 <__fp_trunc+0x2a>
     f0c:	16 16       	cp	r1, r22
     f0e:	b1 1d       	adc	r27, r1
     f10:	67 2f       	mov	r22, r23
     f12:	78 2f       	mov	r23, r24
     f14:	88 27       	eor	r24, r24
     f16:	98 5f       	subi	r25, 0xF8	; 248
     f18:	f7 cf       	rjmp	.-18     	; 0xf08 <__fp_trunc+0xe>
     f1a:	86 95       	lsr	r24
     f1c:	77 95       	ror	r23
     f1e:	67 95       	ror	r22
     f20:	b1 1d       	adc	r27, r1
     f22:	93 95       	inc	r25
     f24:	96 39       	cpi	r25, 0x96	; 150
     f26:	c8 f3       	brcs	.-14     	; 0xf1a <__fp_trunc+0x20>
     f28:	08 95       	ret

00000f2a <__fp_zero>:
     f2a:	e8 94       	clt

00000f2c <__fp_szero>:
     f2c:	bb 27       	eor	r27, r27
     f2e:	66 27       	eor	r22, r22
     f30:	77 27       	eor	r23, r23
     f32:	cb 01       	movw	r24, r22
     f34:	97 f9       	bld	r25, 7
     f36:	08 95       	ret

00000f38 <__mulsf3>:
     f38:	0e 94 af 07 	call	0xf5e	; 0xf5e <__mulsf3x>
     f3c:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <__fp_round>
     f40:	0e 94 3c 07 	call	0xe78	; 0xe78 <__fp_pscA>
     f44:	38 f0       	brcs	.+14     	; 0xf54 <__mulsf3+0x1c>
     f46:	0e 94 43 07 	call	0xe86	; 0xe86 <__fp_pscB>
     f4a:	20 f0       	brcs	.+8      	; 0xf54 <__mulsf3+0x1c>
     f4c:	95 23       	and	r25, r21
     f4e:	11 f0       	breq	.+4      	; 0xf54 <__mulsf3+0x1c>
     f50:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__fp_inf>
     f54:	0c 94 39 07 	jmp	0xe72	; 0xe72 <__fp_nan>
     f58:	11 24       	eor	r1, r1
     f5a:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__fp_szero>

00000f5e <__mulsf3x>:
     f5e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__fp_split3>
     f62:	70 f3       	brcs	.-36     	; 0xf40 <__mulsf3+0x8>

00000f64 <__mulsf3_pse>:
     f64:	95 9f       	mul	r25, r21
     f66:	c1 f3       	breq	.-16     	; 0xf58 <__mulsf3+0x20>
     f68:	95 0f       	add	r25, r21
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	55 1f       	adc	r21, r21
     f6e:	62 9f       	mul	r22, r18
     f70:	f0 01       	movw	r30, r0
     f72:	72 9f       	mul	r23, r18
     f74:	bb 27       	eor	r27, r27
     f76:	f0 0d       	add	r31, r0
     f78:	b1 1d       	adc	r27, r1
     f7a:	63 9f       	mul	r22, r19
     f7c:	aa 27       	eor	r26, r26
     f7e:	f0 0d       	add	r31, r0
     f80:	b1 1d       	adc	r27, r1
     f82:	aa 1f       	adc	r26, r26
     f84:	64 9f       	mul	r22, r20
     f86:	66 27       	eor	r22, r22
     f88:	b0 0d       	add	r27, r0
     f8a:	a1 1d       	adc	r26, r1
     f8c:	66 1f       	adc	r22, r22
     f8e:	82 9f       	mul	r24, r18
     f90:	22 27       	eor	r18, r18
     f92:	b0 0d       	add	r27, r0
     f94:	a1 1d       	adc	r26, r1
     f96:	62 1f       	adc	r22, r18
     f98:	73 9f       	mul	r23, r19
     f9a:	b0 0d       	add	r27, r0
     f9c:	a1 1d       	adc	r26, r1
     f9e:	62 1f       	adc	r22, r18
     fa0:	83 9f       	mul	r24, r19
     fa2:	a0 0d       	add	r26, r0
     fa4:	61 1d       	adc	r22, r1
     fa6:	22 1f       	adc	r18, r18
     fa8:	74 9f       	mul	r23, r20
     faa:	33 27       	eor	r19, r19
     fac:	a0 0d       	add	r26, r0
     fae:	61 1d       	adc	r22, r1
     fb0:	23 1f       	adc	r18, r19
     fb2:	84 9f       	mul	r24, r20
     fb4:	60 0d       	add	r22, r0
     fb6:	21 1d       	adc	r18, r1
     fb8:	82 2f       	mov	r24, r18
     fba:	76 2f       	mov	r23, r22
     fbc:	6a 2f       	mov	r22, r26
     fbe:	11 24       	eor	r1, r1
     fc0:	9f 57       	subi	r25, 0x7F	; 127
     fc2:	50 40       	sbci	r21, 0x00	; 0
     fc4:	9a f0       	brmi	.+38     	; 0xfec <__mulsf3_pse+0x88>
     fc6:	f1 f0       	breq	.+60     	; 0x1004 <__mulsf3_pse+0xa0>
     fc8:	88 23       	and	r24, r24
     fca:	4a f0       	brmi	.+18     	; 0xfde <__mulsf3_pse+0x7a>
     fcc:	ee 0f       	add	r30, r30
     fce:	ff 1f       	adc	r31, r31
     fd0:	bb 1f       	adc	r27, r27
     fd2:	66 1f       	adc	r22, r22
     fd4:	77 1f       	adc	r23, r23
     fd6:	88 1f       	adc	r24, r24
     fd8:	91 50       	subi	r25, 0x01	; 1
     fda:	50 40       	sbci	r21, 0x00	; 0
     fdc:	a9 f7       	brne	.-22     	; 0xfc8 <__mulsf3_pse+0x64>
     fde:	9e 3f       	cpi	r25, 0xFE	; 254
     fe0:	51 05       	cpc	r21, r1
     fe2:	80 f0       	brcs	.+32     	; 0x1004 <__mulsf3_pse+0xa0>
     fe4:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__fp_inf>
     fe8:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__fp_szero>
     fec:	5f 3f       	cpi	r21, 0xFF	; 255
     fee:	e4 f3       	brlt	.-8      	; 0xfe8 <__mulsf3_pse+0x84>
     ff0:	98 3e       	cpi	r25, 0xE8	; 232
     ff2:	d4 f3       	brlt	.-12     	; 0xfe8 <__mulsf3_pse+0x84>
     ff4:	86 95       	lsr	r24
     ff6:	77 95       	ror	r23
     ff8:	67 95       	ror	r22
     ffa:	b7 95       	ror	r27
     ffc:	f7 95       	ror	r31
     ffe:	e7 95       	ror	r30
    1000:	9f 5f       	subi	r25, 0xFF	; 255
    1002:	c1 f7       	brne	.-16     	; 0xff4 <__mulsf3_pse+0x90>
    1004:	fe 2b       	or	r31, r30
    1006:	88 0f       	add	r24, r24
    1008:	91 1d       	adc	r25, r1
    100a:	96 95       	lsr	r25
    100c:	87 95       	ror	r24
    100e:	97 f9       	bld	r25, 7
    1010:	08 95       	ret

00001012 <__muluhisi3>:
    1012:	0e 94 14 08 	call	0x1028	; 0x1028 <__umulhisi3>
    1016:	a5 9f       	mul	r26, r21
    1018:	90 0d       	add	r25, r0
    101a:	b4 9f       	mul	r27, r20
    101c:	90 0d       	add	r25, r0
    101e:	a4 9f       	mul	r26, r20
    1020:	80 0d       	add	r24, r0
    1022:	91 1d       	adc	r25, r1
    1024:	11 24       	eor	r1, r1
    1026:	08 95       	ret

00001028 <__umulhisi3>:
    1028:	a2 9f       	mul	r26, r18
    102a:	b0 01       	movw	r22, r0
    102c:	b3 9f       	mul	r27, r19
    102e:	c0 01       	movw	r24, r0
    1030:	a3 9f       	mul	r26, r19
    1032:	70 0d       	add	r23, r0
    1034:	81 1d       	adc	r24, r1
    1036:	11 24       	eor	r1, r1
    1038:	91 1d       	adc	r25, r1
    103a:	b2 9f       	mul	r27, r18
    103c:	70 0d       	add	r23, r0
    103e:	81 1d       	adc	r24, r1
    1040:	11 24       	eor	r1, r1
    1042:	91 1d       	adc	r25, r1
    1044:	08 95       	ret

00001046 <_exit>:
    1046:	f8 94       	cli

00001048 <__stop_program>:
    1048:	ff cf       	rjmp	.-2      	; 0x1048 <__stop_program>
