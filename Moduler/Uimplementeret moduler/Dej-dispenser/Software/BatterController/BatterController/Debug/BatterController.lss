
BatterController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000071c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  0000071c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000074c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c10  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000956  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006cf  00000000  00000000  00001d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  0000246c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a9  00000000  00000000  000025c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002dc  00000000  00000000  00002b71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002e4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 0c 01 	jmp	0x218	; 0x218 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ad 30       	cpi	r26, 0x0D	; 13
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 54 01 	call	0x2a8	; 0x2a8 <main>
  88:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z22beginCoolingRegulationv>:

static int temp = 0;

void beginCoolingRegulation()
{
	DDRB |= (1 << PORTB1);
  90:	21 9a       	sbi	0x04, 1	; 4
	DDRC &= ~(1 << PORTC3);
  92:	3b 98       	cbi	0x07, 3	; 7
	// timer 1 fast PWM mode 50 Hz
	TCCR1A |= (1 << COM1A1) | (1 << WGM11); //A1 clear on compare match, top = ICR1
  94:	e0 e8       	ldi	r30, 0x80	; 128
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	82 68       	ori	r24, 0x82	; 130
  9c:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13) | (1 << CS11); //Prescaler 8
  9e:	e1 e8       	ldi	r30, 0x81	; 129
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	8a 61       	ori	r24, 0x1A	; 26
  a6:	80 83       	st	Z, r24
	ICR1 = 39999; // freq 50 hz
  a8:	8f e3       	ldi	r24, 0x3F	; 63
  aa:	9c e9       	ldi	r25, 0x9C	; 156
  ac:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
  b0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	OCR1A = 20000;
  b4:	80 e2       	ldi	r24, 0x20	; 32
  b6:	9e e4       	ldi	r25, 0x4E	; 78
  b8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  bc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	// timer 0 CTC mode, 100 hz
	TCNT0 = 0;
  c0:	16 bc       	out	0x26, r1	; 38
	TCCR0A |= (1 << WGM01); // Set CTC mode
  c2:	84 b5       	in	r24, 0x24	; 36
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00) | (1 << CS02); // Prescaler 1024
  c8:	85 b5       	in	r24, 0x25	; 37
  ca:	85 60       	ori	r24, 0x05	; 5
  cc:	85 bd       	out	0x25, r24	; 37
	OCR0A = 67; // Compare register
  ce:	83 e4       	ldi	r24, 0x43	; 67
  d0:	87 bd       	out	0x27, r24	; 39
	//TIMSK0 |= (1 << OCIE0A); // Enable interrupt on compare match
	// ADC init
	ADCSRA |= (1 << ADPS1); // Set ADC prescaler to 4
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR) | (1 << MUX0) | (1 << MUX1); // Left shift ADC reg, ADC port 3
  dc:	ac e7       	ldi	r26, 0x7C	; 124
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	8c 91       	ld	r24, X
  e2:	83 62       	ori	r24, 0x23	; 35
  e4:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADEN) | (1 << ADATE) | (1 << ADIE); // ADC enable, autotrigger and interrupt enable
  e6:	80 81       	ld	r24, Z
  e8:	88 6a       	ori	r24, 0xA8	; 168
  ea:	80 83       	st	Z, r24
	ADCSRB |= (1 << ADTS1) | (1 << ADTS0); // set autotrigger to timer0 compare A
  ec:	eb e7       	ldi	r30, 0x7B	; 123
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	83 60       	ori	r24, 0x03	; 3
  f4:	80 83       	st	Z, r24
  f6:	08 95       	ret

000000f8 <__vector_21>:
}

ISR(ADC_vect) {
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
 106:	ef 93       	push	r30
 108:	ff 93       	push	r31
	temp = ADC >> 6; // Read ADC
 10a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 10e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	// Set OCR1A for PWM.
	ADCSRA |= (1 << ADIF); //Clear interrupt
 112:	ea e7       	ldi	r30, 0x7A	; 122
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	80 61       	ori	r24, 0x10	; 16
 11a:	80 83       	st	Z, r24
 11c:	ff 91       	pop	r31
 11e:	ef 91       	pop	r30
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <_Z19initBatterDispenserv>:
volatile unsigned int retracted;
volatile unsigned int servoTop;
volatile unsigned int servoBottom;

void initBatterDispenser() {
	cycle = 0;
 12e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <cycle+0x1>
 132:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <cycle>
	DDRB |= (1 << PORTB2) | (1 << PORTB3);
 136:	84 b1       	in	r24, 0x04	; 4
 138:	8c 60       	ori	r24, 0x0C	; 12
 13a:	84 b9       	out	0x04, r24	; 4
	// timer 1 fast PWM mode 50 Hz
	TCCR1A |= (1 << COM1B1) | (1 << WGM11); //B1 clear on compare match, top = ICR1
 13c:	e0 e8       	ldi	r30, 0x80	; 128
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	82 62       	ori	r24, 0x22	; 34
 144:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13) | (1 << CS11); //Prescaler 8
 146:	e1 e8       	ldi	r30, 0x81	; 129
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	8a 61       	ori	r24, 0x1A	; 26
 14e:	80 83       	st	Z, r24
	ICR1 = top; // freq 50 hz
 150:	8f e3       	ldi	r24, 0x3F	; 63
 152:	9c e9       	ldi	r25, 0x9C	; 156
 154:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 158:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	extended = round(top / 10);
 15c:	8f e9       	ldi	r24, 0x9F	; 159
 15e:	9f e0       	ldi	r25, 0x0F	; 15
 160:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <extended+0x1>
 164:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <extended>
	retracted = round(top / 20);
 168:	8f ec       	ldi	r24, 0xCF	; 207
 16a:	97 e0       	ldi	r25, 0x07	; 7
 16c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <retracted+0x1>
 170:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <retracted>
	servoBottom = extended;
 174:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <extended>
 178:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <extended+0x1>
 17c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 180:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	servoTop = retracted;
 184:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <retracted>
 188:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <retracted+0x1>
 18c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <servoTop+0x1>
 190:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <servoTop>
	TIMSK1 |= (1 << TOIE1); // Enable overflow interrupt for timer 1
 194:	ef e6       	ldi	r30, 0x6F	; 111
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	80 83       	st	Z, r24
 19e:	08 95       	ret

000001a0 <_Z8addDoughv>:
}


void addDough()
{
	servoTop = extended;
 1a0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <extended>
 1a4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <extended+0x1>
 1a8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <servoTop+0x1>
 1ac:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <servoTop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b0:	2f ef       	ldi	r18, 0xFF	; 255
 1b2:	83 ec       	ldi	r24, 0xC3	; 195
 1b4:	99 e0       	ldi	r25, 0x09	; 9
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <_Z8addDoughv+0x16>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <_Z8addDoughv+0x20>
 1c0:	00 00       	nop
	_delay_ms(moveSpeed);
	servoBottom = retracted;
 1c2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <retracted>
 1c6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <retracted+0x1>
 1ca:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1d2:	2f ef       	ldi	r18, 0xFF	; 255
 1d4:	83 ec       	ldi	r24, 0xC3	; 195
 1d6:	99 e0       	ldi	r25, 0x09	; 9
 1d8:	21 50       	subi	r18, 0x01	; 1
 1da:	80 40       	sbci	r24, 0x00	; 0
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <_Z8addDoughv+0x38>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <_Z8addDoughv+0x42>
 1e2:	00 00       	nop
	_delay_ms(moveSpeed);
	servoBottom = extended;
 1e4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <extended>
 1e8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <extended+0x1>
 1ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1f4:	2f ef       	ldi	r18, 0xFF	; 255
 1f6:	83 ec       	ldi	r24, 0xC3	; 195
 1f8:	99 e0       	ldi	r25, 0x09	; 9
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	80 40       	sbci	r24, 0x00	; 0
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <_Z8addDoughv+0x5a>
 202:	00 c0       	rjmp	.+0      	; 0x204 <_Z8addDoughv+0x64>
 204:	00 00       	nop
	_delay_ms(moveSpeed);
	servoTop = retracted;
 206:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <retracted>
 20a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <retracted+0x1>
 20e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <servoTop+0x1>
 212:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <servoTop>
 216:	08 95       	ret

00000218 <__vector_13>:
	return;
}

ISR(TIMER1_OVF_vect) {
 218:	1f 92       	push	r1
 21a:	0f 92       	push	r0
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	0f 92       	push	r0
 220:	11 24       	eor	r1, r1
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
	cycle++;
 226:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <cycle>
 22a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <cycle+0x1>
 22e:	01 96       	adiw	r24, 0x01	; 1
 230:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <cycle+0x1>
 234:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <cycle>
	if (cycle == cycleCount - 1) {
 238:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <cycle>
 23c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <cycle+0x1>
 240:	04 97       	sbiw	r24, 0x04	; 4
 242:	49 f4       	brne	.+18     	; 0x256 <__vector_13+0x3e>
		OCR1B = servoBottom;
 244:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 248:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 24c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 250:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 254:	22 c0       	rjmp	.+68     	; 0x29a <__vector_13+0x82>
	} else if (cycle == cycleCount) {
 256:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <cycle>
 25a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <cycle+0x1>
 25e:	05 97       	sbiw	r24, 0x05	; 5
 260:	11 f4       	brne	.+4      	; 0x266 <__vector_13+0x4e>
		PORTB |= (1 << PORTB3);		
 262:	2b 9a       	sbi	0x05, 3	; 5
 264:	1a c0       	rjmp	.+52     	; 0x29a <__vector_13+0x82>
	} else if (cycle == cycleCount * 2 - 1) {
 266:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <cycle>
 26a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <cycle+0x1>
 26e:	09 97       	sbiw	r24, 0x09	; 9
 270:	49 f4       	brne	.+18     	; 0x284 <__vector_13+0x6c>
		OCR1B = servoTop;	
 272:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <servoTop>
 276:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <servoTop+0x1>
 27a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 27e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 282:	0b c0       	rjmp	.+22     	; 0x29a <__vector_13+0x82>
	} else if (cycle == cycleCount * 2) {
 284:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <cycle>
 288:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <cycle+0x1>
 28c:	0a 97       	sbiw	r24, 0x0a	; 10
 28e:	29 f4       	brne	.+10     	; 0x29a <__vector_13+0x82>
		cycle = 0;	
 290:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <cycle+0x1>
 294:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <cycle>
		PORTB &= ~(1 << PORTB3);
 298:	2b 98       	cbi	0x05, 3	; 5
	}
 29a:	9f 91       	pop	r25
 29c:	8f 91       	pop	r24
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <main>:
#include "PanController/PanController.h"


int main(void)
{
	beginCoolingRegulation();
 2a8:	0e 94 48 00 	call	0x90	; 0x90 <_Z22beginCoolingRegulationv>
	initBatterDispenser();
 2ac:	0e 94 97 00 	call	0x12e	; 0x12e <_Z19initBatterDispenserv>
	sei();
 2b0:	78 94       	sei
    /* Replace with your application code */
    while (1) 
    {
		addDough();
 2b2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z8addDoughv>
 2b6:	2f ef       	ldi	r18, 0xFF	; 255
 2b8:	83 ed       	ldi	r24, 0xD3	; 211
 2ba:	90 e3       	ldi	r25, 0x30	; 48
 2bc:	21 50       	subi	r18, 0x01	; 1
 2be:	80 40       	sbci	r24, 0x00	; 0
 2c0:	90 40       	sbci	r25, 0x00	; 0
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <main+0x14>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <main+0x1e>
 2c6:	00 00       	nop
 2c8:	f4 cf       	rjmp	.-24     	; 0x2b2 <main+0xa>

000002ca <__vector_1>:
#include "UltraSonic.h"

uint16_t batterLevel_ = 0;
bool isEcho_ = false;

ISR(INT0_vect) {
 2ca:	1f 92       	push	r1
 2cc:	0f 92       	push	r0
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	0f 92       	push	r0
 2d2:	11 24       	eor	r1, r1
 2d4:	2f 93       	push	r18
 2d6:	3f 93       	push	r19
 2d8:	4f 93       	push	r20
 2da:	5f 93       	push	r21
 2dc:	6f 93       	push	r22
 2de:	7f 93       	push	r23
 2e0:	8f 93       	push	r24
 2e2:	9f 93       	push	r25
 2e4:	af 93       	push	r26
 2e6:	bf 93       	push	r27
 2e8:	ef 93       	push	r30
 2ea:	ff 93       	push	r31
	/* If currently timing PW */
	if (isEcho_)
 2ec:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <isEcho_>
 2f0:	88 23       	and	r24, r24
 2f2:	19 f1       	breq	.+70     	; 0x33a <__vector_1+0x70>
	{
		/* Turn off timer2 */
		TCCR2B = 0;
 2f4:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
		
		/* Calculate and save distance */
		batterLevel_ = static_cast<uint16_t>(10*REGRESSION(TCNT2)); // Distance in mm
 2f8:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 59 02 	call	0x4b2	; 0x4b2 <__floatsisf>
 306:	29 ee       	ldi	r18, 0xE9	; 233
 308:	38 e4       	ldi	r19, 0x48	; 72
 30a:	4e e8       	ldi	r20, 0x8E	; 142
 30c:	5e e3       	ldi	r21, 0x3E	; 62
 30e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__mulsf3>
 312:	2a ee       	ldi	r18, 0xEA	; 234
 314:	34 e0       	ldi	r19, 0x04	; 4
 316:	44 e7       	ldi	r20, 0x74	; 116
 318:	5e e3       	ldi	r21, 0x3E	; 62
 31a:	0e 94 bb 01 	call	0x376	; 0x376 <__subsf3>
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	40 e2       	ldi	r20, 0x20	; 32
 324:	51 e4       	ldi	r21, 0x41	; 65
 326:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__mulsf3>
 32a:	0e 94 28 02 	call	0x450	; 0x450 <__fixunssfsi>
 32e:	70 93 0c 01 	sts	0x010C, r23	; 0x80010c <batterLevel_+0x1>
 332:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <batterLevel_>
		
		/* Turn off external interrupt */
		EIMSK &= ~(1<<INT0);
 336:	e8 98       	cbi	0x1d, 0	; 29
 338:	0d c0       	rjmp	.+26     	; 0x354 <__vector_1+0x8a>
	}
	else
	{
		/* Reset and start timer2 */
		TCNT2 = 0;
 33a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
		TCCR2B = 0b00000110;
 33e:	86 e0       	ldi	r24, 0x06	; 6
 340:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
		
		isEcho_ = true;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <isEcho_>
		/* Switch to falling edge */
		EICRA &= ~(1<<ISC00);
 34a:	e9 e6       	ldi	r30, 0x69	; 105
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	8e 7f       	andi	r24, 0xFE	; 254
 352:	80 83       	st	Z, r24
	}
}
 354:	ff 91       	pop	r31
 356:	ef 91       	pop	r30
 358:	bf 91       	pop	r27
 35a:	af 91       	pop	r26
 35c:	9f 91       	pop	r25
 35e:	8f 91       	pop	r24
 360:	7f 91       	pop	r23
 362:	6f 91       	pop	r22
 364:	5f 91       	pop	r21
 366:	4f 91       	pop	r20
 368:	3f 91       	pop	r19
 36a:	2f 91       	pop	r18
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <__subsf3>:
 376:	50 58       	subi	r21, 0x80	; 128

00000378 <__addsf3>:
 378:	bb 27       	eor	r27, r27
 37a:	aa 27       	eor	r26, r26
 37c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__addsf3x>
 380:	0c 94 ab 02 	jmp	0x556	; 0x556 <__fp_round>
 384:	0e 94 9d 02 	call	0x53a	; 0x53a <__fp_pscA>
 388:	38 f0       	brcs	.+14     	; 0x398 <__addsf3+0x20>
 38a:	0e 94 a4 02 	call	0x548	; 0x548 <__fp_pscB>
 38e:	20 f0       	brcs	.+8      	; 0x398 <__addsf3+0x20>
 390:	39 f4       	brne	.+14     	; 0x3a0 <__addsf3+0x28>
 392:	9f 3f       	cpi	r25, 0xFF	; 255
 394:	19 f4       	brne	.+6      	; 0x39c <__addsf3+0x24>
 396:	26 f4       	brtc	.+8      	; 0x3a0 <__addsf3+0x28>
 398:	0c 94 9a 02 	jmp	0x534	; 0x534 <__fp_nan>
 39c:	0e f4       	brtc	.+2      	; 0x3a0 <__addsf3+0x28>
 39e:	e0 95       	com	r30
 3a0:	e7 fb       	bst	r30, 7
 3a2:	0c 94 94 02 	jmp	0x528	; 0x528 <__fp_inf>

000003a6 <__addsf3x>:
 3a6:	e9 2f       	mov	r30, r25
 3a8:	0e 94 bc 02 	call	0x578	; 0x578 <__fp_split3>
 3ac:	58 f3       	brcs	.-42     	; 0x384 <__addsf3+0xc>
 3ae:	ba 17       	cp	r27, r26
 3b0:	62 07       	cpc	r22, r18
 3b2:	73 07       	cpc	r23, r19
 3b4:	84 07       	cpc	r24, r20
 3b6:	95 07       	cpc	r25, r21
 3b8:	20 f0       	brcs	.+8      	; 0x3c2 <__addsf3x+0x1c>
 3ba:	79 f4       	brne	.+30     	; 0x3da <__addsf3x+0x34>
 3bc:	a6 f5       	brtc	.+104    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3be:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__fp_zero>
 3c2:	0e f4       	brtc	.+2      	; 0x3c6 <__addsf3x+0x20>
 3c4:	e0 95       	com	r30
 3c6:	0b 2e       	mov	r0, r27
 3c8:	ba 2f       	mov	r27, r26
 3ca:	a0 2d       	mov	r26, r0
 3cc:	0b 01       	movw	r0, r22
 3ce:	b9 01       	movw	r22, r18
 3d0:	90 01       	movw	r18, r0
 3d2:	0c 01       	movw	r0, r24
 3d4:	ca 01       	movw	r24, r20
 3d6:	a0 01       	movw	r20, r0
 3d8:	11 24       	eor	r1, r1
 3da:	ff 27       	eor	r31, r31
 3dc:	59 1b       	sub	r21, r25
 3de:	99 f0       	breq	.+38     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3e0:	59 3f       	cpi	r21, 0xF9	; 249
 3e2:	50 f4       	brcc	.+20     	; 0x3f8 <__addsf3x+0x52>
 3e4:	50 3e       	cpi	r21, 0xE0	; 224
 3e6:	68 f1       	brcs	.+90     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 3e8:	1a 16       	cp	r1, r26
 3ea:	f0 40       	sbci	r31, 0x00	; 0
 3ec:	a2 2f       	mov	r26, r18
 3ee:	23 2f       	mov	r18, r19
 3f0:	34 2f       	mov	r19, r20
 3f2:	44 27       	eor	r20, r20
 3f4:	58 5f       	subi	r21, 0xF8	; 248
 3f6:	f3 cf       	rjmp	.-26     	; 0x3de <__addsf3x+0x38>
 3f8:	46 95       	lsr	r20
 3fa:	37 95       	ror	r19
 3fc:	27 95       	ror	r18
 3fe:	a7 95       	ror	r26
 400:	f0 40       	sbci	r31, 0x00	; 0
 402:	53 95       	inc	r21
 404:	c9 f7       	brne	.-14     	; 0x3f8 <__addsf3x+0x52>
 406:	7e f4       	brtc	.+30     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 408:	1f 16       	cp	r1, r31
 40a:	ba 0b       	sbc	r27, r26
 40c:	62 0b       	sbc	r22, r18
 40e:	73 0b       	sbc	r23, r19
 410:	84 0b       	sbc	r24, r20
 412:	ba f0       	brmi	.+46     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 414:	91 50       	subi	r25, 0x01	; 1
 416:	a1 f0       	breq	.+40     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 418:	ff 0f       	add	r31, r31
 41a:	bb 1f       	adc	r27, r27
 41c:	66 1f       	adc	r22, r22
 41e:	77 1f       	adc	r23, r23
 420:	88 1f       	adc	r24, r24
 422:	c2 f7       	brpl	.-16     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 424:	0e c0       	rjmp	.+28     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 426:	ba 0f       	add	r27, r26
 428:	62 1f       	adc	r22, r18
 42a:	73 1f       	adc	r23, r19
 42c:	84 1f       	adc	r24, r20
 42e:	48 f4       	brcc	.+18     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 430:	87 95       	ror	r24
 432:	77 95       	ror	r23
 434:	67 95       	ror	r22
 436:	b7 95       	ror	r27
 438:	f7 95       	ror	r31
 43a:	9e 3f       	cpi	r25, 0xFE	; 254
 43c:	08 f0       	brcs	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43e:	b0 cf       	rjmp	.-160    	; 0x3a0 <__addsf3+0x28>
 440:	93 95       	inc	r25
 442:	88 0f       	add	r24, r24
 444:	08 f0       	brcs	.+2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 446:	99 27       	eor	r25, r25
 448:	ee 0f       	add	r30, r30
 44a:	97 95       	ror	r25
 44c:	87 95       	ror	r24
 44e:	08 95       	ret

00000450 <__fixunssfsi>:
 450:	0e 94 c4 02 	call	0x588	; 0x588 <__fp_splitA>
 454:	88 f0       	brcs	.+34     	; 0x478 <__fixunssfsi+0x28>
 456:	9f 57       	subi	r25, 0x7F	; 127
 458:	98 f0       	brcs	.+38     	; 0x480 <__fixunssfsi+0x30>
 45a:	b9 2f       	mov	r27, r25
 45c:	99 27       	eor	r25, r25
 45e:	b7 51       	subi	r27, 0x17	; 23
 460:	b0 f0       	brcs	.+44     	; 0x48e <__fixunssfsi+0x3e>
 462:	e1 f0       	breq	.+56     	; 0x49c <__fixunssfsi+0x4c>
 464:	66 0f       	add	r22, r22
 466:	77 1f       	adc	r23, r23
 468:	88 1f       	adc	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	1a f0       	brmi	.+6      	; 0x474 <__fixunssfsi+0x24>
 46e:	ba 95       	dec	r27
 470:	c9 f7       	brne	.-14     	; 0x464 <__fixunssfsi+0x14>
 472:	14 c0       	rjmp	.+40     	; 0x49c <__fixunssfsi+0x4c>
 474:	b1 30       	cpi	r27, 0x01	; 1
 476:	91 f0       	breq	.+36     	; 0x49c <__fixunssfsi+0x4c>
 478:	0e 94 de 02 	call	0x5bc	; 0x5bc <__fp_zero>
 47c:	b1 e0       	ldi	r27, 0x01	; 1
 47e:	08 95       	ret
 480:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__fp_zero>
 484:	67 2f       	mov	r22, r23
 486:	78 2f       	mov	r23, r24
 488:	88 27       	eor	r24, r24
 48a:	b8 5f       	subi	r27, 0xF8	; 248
 48c:	39 f0       	breq	.+14     	; 0x49c <__fixunssfsi+0x4c>
 48e:	b9 3f       	cpi	r27, 0xF9	; 249
 490:	cc f3       	brlt	.-14     	; 0x484 <__fixunssfsi+0x34>
 492:	86 95       	lsr	r24
 494:	77 95       	ror	r23
 496:	67 95       	ror	r22
 498:	b3 95       	inc	r27
 49a:	d9 f7       	brne	.-10     	; 0x492 <__fixunssfsi+0x42>
 49c:	3e f4       	brtc	.+14     	; 0x4ac <__fixunssfsi+0x5c>
 49e:	90 95       	com	r25
 4a0:	80 95       	com	r24
 4a2:	70 95       	com	r23
 4a4:	61 95       	neg	r22
 4a6:	7f 4f       	sbci	r23, 0xFF	; 255
 4a8:	8f 4f       	sbci	r24, 0xFF	; 255
 4aa:	9f 4f       	sbci	r25, 0xFF	; 255
 4ac:	08 95       	ret

000004ae <__floatunsisf>:
 4ae:	e8 94       	clt
 4b0:	09 c0       	rjmp	.+18     	; 0x4c4 <__floatsisf+0x12>

000004b2 <__floatsisf>:
 4b2:	97 fb       	bst	r25, 7
 4b4:	3e f4       	brtc	.+14     	; 0x4c4 <__floatsisf+0x12>
 4b6:	90 95       	com	r25
 4b8:	80 95       	com	r24
 4ba:	70 95       	com	r23
 4bc:	61 95       	neg	r22
 4be:	7f 4f       	sbci	r23, 0xFF	; 255
 4c0:	8f 4f       	sbci	r24, 0xFF	; 255
 4c2:	9f 4f       	sbci	r25, 0xFF	; 255
 4c4:	99 23       	and	r25, r25
 4c6:	a9 f0       	breq	.+42     	; 0x4f2 <__floatsisf+0x40>
 4c8:	f9 2f       	mov	r31, r25
 4ca:	96 e9       	ldi	r25, 0x96	; 150
 4cc:	bb 27       	eor	r27, r27
 4ce:	93 95       	inc	r25
 4d0:	f6 95       	lsr	r31
 4d2:	87 95       	ror	r24
 4d4:	77 95       	ror	r23
 4d6:	67 95       	ror	r22
 4d8:	b7 95       	ror	r27
 4da:	f1 11       	cpse	r31, r1
 4dc:	f8 cf       	rjmp	.-16     	; 0x4ce <__floatsisf+0x1c>
 4de:	fa f4       	brpl	.+62     	; 0x51e <__floatsisf+0x6c>
 4e0:	bb 0f       	add	r27, r27
 4e2:	11 f4       	brne	.+4      	; 0x4e8 <__floatsisf+0x36>
 4e4:	60 ff       	sbrs	r22, 0
 4e6:	1b c0       	rjmp	.+54     	; 0x51e <__floatsisf+0x6c>
 4e8:	6f 5f       	subi	r22, 0xFF	; 255
 4ea:	7f 4f       	sbci	r23, 0xFF	; 255
 4ec:	8f 4f       	sbci	r24, 0xFF	; 255
 4ee:	9f 4f       	sbci	r25, 0xFF	; 255
 4f0:	16 c0       	rjmp	.+44     	; 0x51e <__floatsisf+0x6c>
 4f2:	88 23       	and	r24, r24
 4f4:	11 f0       	breq	.+4      	; 0x4fa <__floatsisf+0x48>
 4f6:	96 e9       	ldi	r25, 0x96	; 150
 4f8:	11 c0       	rjmp	.+34     	; 0x51c <__floatsisf+0x6a>
 4fa:	77 23       	and	r23, r23
 4fc:	21 f0       	breq	.+8      	; 0x506 <__floatsisf+0x54>
 4fe:	9e e8       	ldi	r25, 0x8E	; 142
 500:	87 2f       	mov	r24, r23
 502:	76 2f       	mov	r23, r22
 504:	05 c0       	rjmp	.+10     	; 0x510 <__floatsisf+0x5e>
 506:	66 23       	and	r22, r22
 508:	71 f0       	breq	.+28     	; 0x526 <__floatsisf+0x74>
 50a:	96 e8       	ldi	r25, 0x86	; 134
 50c:	86 2f       	mov	r24, r22
 50e:	70 e0       	ldi	r23, 0x00	; 0
 510:	60 e0       	ldi	r22, 0x00	; 0
 512:	2a f0       	brmi	.+10     	; 0x51e <__floatsisf+0x6c>
 514:	9a 95       	dec	r25
 516:	66 0f       	add	r22, r22
 518:	77 1f       	adc	r23, r23
 51a:	88 1f       	adc	r24, r24
 51c:	da f7       	brpl	.-10     	; 0x514 <__floatsisf+0x62>
 51e:	88 0f       	add	r24, r24
 520:	96 95       	lsr	r25
 522:	87 95       	ror	r24
 524:	97 f9       	bld	r25, 7
 526:	08 95       	ret

00000528 <__fp_inf>:
 528:	97 f9       	bld	r25, 7
 52a:	9f 67       	ori	r25, 0x7F	; 127
 52c:	80 e8       	ldi	r24, 0x80	; 128
 52e:	70 e0       	ldi	r23, 0x00	; 0
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	08 95       	ret

00000534 <__fp_nan>:
 534:	9f ef       	ldi	r25, 0xFF	; 255
 536:	80 ec       	ldi	r24, 0xC0	; 192
 538:	08 95       	ret

0000053a <__fp_pscA>:
 53a:	00 24       	eor	r0, r0
 53c:	0a 94       	dec	r0
 53e:	16 16       	cp	r1, r22
 540:	17 06       	cpc	r1, r23
 542:	18 06       	cpc	r1, r24
 544:	09 06       	cpc	r0, r25
 546:	08 95       	ret

00000548 <__fp_pscB>:
 548:	00 24       	eor	r0, r0
 54a:	0a 94       	dec	r0
 54c:	12 16       	cp	r1, r18
 54e:	13 06       	cpc	r1, r19
 550:	14 06       	cpc	r1, r20
 552:	05 06       	cpc	r0, r21
 554:	08 95       	ret

00000556 <__fp_round>:
 556:	09 2e       	mov	r0, r25
 558:	03 94       	inc	r0
 55a:	00 0c       	add	r0, r0
 55c:	11 f4       	brne	.+4      	; 0x562 <__fp_round+0xc>
 55e:	88 23       	and	r24, r24
 560:	52 f0       	brmi	.+20     	; 0x576 <__fp_round+0x20>
 562:	bb 0f       	add	r27, r27
 564:	40 f4       	brcc	.+16     	; 0x576 <__fp_round+0x20>
 566:	bf 2b       	or	r27, r31
 568:	11 f4       	brne	.+4      	; 0x56e <__fp_round+0x18>
 56a:	60 ff       	sbrs	r22, 0
 56c:	04 c0       	rjmp	.+8      	; 0x576 <__fp_round+0x20>
 56e:	6f 5f       	subi	r22, 0xFF	; 255
 570:	7f 4f       	sbci	r23, 0xFF	; 255
 572:	8f 4f       	sbci	r24, 0xFF	; 255
 574:	9f 4f       	sbci	r25, 0xFF	; 255
 576:	08 95       	ret

00000578 <__fp_split3>:
 578:	57 fd       	sbrc	r21, 7
 57a:	90 58       	subi	r25, 0x80	; 128
 57c:	44 0f       	add	r20, r20
 57e:	55 1f       	adc	r21, r21
 580:	59 f0       	breq	.+22     	; 0x598 <__fp_splitA+0x10>
 582:	5f 3f       	cpi	r21, 0xFF	; 255
 584:	71 f0       	breq	.+28     	; 0x5a2 <__fp_splitA+0x1a>
 586:	47 95       	ror	r20

00000588 <__fp_splitA>:
 588:	88 0f       	add	r24, r24
 58a:	97 fb       	bst	r25, 7
 58c:	99 1f       	adc	r25, r25
 58e:	61 f0       	breq	.+24     	; 0x5a8 <__fp_splitA+0x20>
 590:	9f 3f       	cpi	r25, 0xFF	; 255
 592:	79 f0       	breq	.+30     	; 0x5b2 <__fp_splitA+0x2a>
 594:	87 95       	ror	r24
 596:	08 95       	ret
 598:	12 16       	cp	r1, r18
 59a:	13 06       	cpc	r1, r19
 59c:	14 06       	cpc	r1, r20
 59e:	55 1f       	adc	r21, r21
 5a0:	f2 cf       	rjmp	.-28     	; 0x586 <__fp_split3+0xe>
 5a2:	46 95       	lsr	r20
 5a4:	f1 df       	rcall	.-30     	; 0x588 <__fp_splitA>
 5a6:	08 c0       	rjmp	.+16     	; 0x5b8 <__fp_splitA+0x30>
 5a8:	16 16       	cp	r1, r22
 5aa:	17 06       	cpc	r1, r23
 5ac:	18 06       	cpc	r1, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	f1 cf       	rjmp	.-30     	; 0x594 <__fp_splitA+0xc>
 5b2:	86 95       	lsr	r24
 5b4:	71 05       	cpc	r23, r1
 5b6:	61 05       	cpc	r22, r1
 5b8:	08 94       	sec
 5ba:	08 95       	ret

000005bc <__fp_zero>:
 5bc:	e8 94       	clt

000005be <__fp_szero>:
 5be:	bb 27       	eor	r27, r27
 5c0:	66 27       	eor	r22, r22
 5c2:	77 27       	eor	r23, r23
 5c4:	cb 01       	movw	r24, r22
 5c6:	97 f9       	bld	r25, 7
 5c8:	08 95       	ret

000005ca <__mulsf3>:
 5ca:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__mulsf3x>
 5ce:	0c 94 ab 02 	jmp	0x556	; 0x556 <__fp_round>
 5d2:	0e 94 9d 02 	call	0x53a	; 0x53a <__fp_pscA>
 5d6:	38 f0       	brcs	.+14     	; 0x5e6 <__mulsf3+0x1c>
 5d8:	0e 94 a4 02 	call	0x548	; 0x548 <__fp_pscB>
 5dc:	20 f0       	brcs	.+8      	; 0x5e6 <__mulsf3+0x1c>
 5de:	95 23       	and	r25, r21
 5e0:	11 f0       	breq	.+4      	; 0x5e6 <__mulsf3+0x1c>
 5e2:	0c 94 94 02 	jmp	0x528	; 0x528 <__fp_inf>
 5e6:	0c 94 9a 02 	jmp	0x534	; 0x534 <__fp_nan>
 5ea:	11 24       	eor	r1, r1
 5ec:	0c 94 df 02 	jmp	0x5be	; 0x5be <__fp_szero>

000005f0 <__mulsf3x>:
 5f0:	0e 94 bc 02 	call	0x578	; 0x578 <__fp_split3>
 5f4:	70 f3       	brcs	.-36     	; 0x5d2 <__mulsf3+0x8>

000005f6 <__mulsf3_pse>:
 5f6:	95 9f       	mul	r25, r21
 5f8:	c1 f3       	breq	.-16     	; 0x5ea <__mulsf3+0x20>
 5fa:	95 0f       	add	r25, r21
 5fc:	50 e0       	ldi	r21, 0x00	; 0
 5fe:	55 1f       	adc	r21, r21
 600:	62 9f       	mul	r22, r18
 602:	f0 01       	movw	r30, r0
 604:	72 9f       	mul	r23, r18
 606:	bb 27       	eor	r27, r27
 608:	f0 0d       	add	r31, r0
 60a:	b1 1d       	adc	r27, r1
 60c:	63 9f       	mul	r22, r19
 60e:	aa 27       	eor	r26, r26
 610:	f0 0d       	add	r31, r0
 612:	b1 1d       	adc	r27, r1
 614:	aa 1f       	adc	r26, r26
 616:	64 9f       	mul	r22, r20
 618:	66 27       	eor	r22, r22
 61a:	b0 0d       	add	r27, r0
 61c:	a1 1d       	adc	r26, r1
 61e:	66 1f       	adc	r22, r22
 620:	82 9f       	mul	r24, r18
 622:	22 27       	eor	r18, r18
 624:	b0 0d       	add	r27, r0
 626:	a1 1d       	adc	r26, r1
 628:	62 1f       	adc	r22, r18
 62a:	73 9f       	mul	r23, r19
 62c:	b0 0d       	add	r27, r0
 62e:	a1 1d       	adc	r26, r1
 630:	62 1f       	adc	r22, r18
 632:	83 9f       	mul	r24, r19
 634:	a0 0d       	add	r26, r0
 636:	61 1d       	adc	r22, r1
 638:	22 1f       	adc	r18, r18
 63a:	74 9f       	mul	r23, r20
 63c:	33 27       	eor	r19, r19
 63e:	a0 0d       	add	r26, r0
 640:	61 1d       	adc	r22, r1
 642:	23 1f       	adc	r18, r19
 644:	84 9f       	mul	r24, r20
 646:	60 0d       	add	r22, r0
 648:	21 1d       	adc	r18, r1
 64a:	82 2f       	mov	r24, r18
 64c:	76 2f       	mov	r23, r22
 64e:	6a 2f       	mov	r22, r26
 650:	11 24       	eor	r1, r1
 652:	9f 57       	subi	r25, 0x7F	; 127
 654:	50 40       	sbci	r21, 0x00	; 0
 656:	9a f0       	brmi	.+38     	; 0x67e <__mulsf3_pse+0x88>
 658:	f1 f0       	breq	.+60     	; 0x696 <__mulsf3_pse+0xa0>
 65a:	88 23       	and	r24, r24
 65c:	4a f0       	brmi	.+18     	; 0x670 <__mulsf3_pse+0x7a>
 65e:	ee 0f       	add	r30, r30
 660:	ff 1f       	adc	r31, r31
 662:	bb 1f       	adc	r27, r27
 664:	66 1f       	adc	r22, r22
 666:	77 1f       	adc	r23, r23
 668:	88 1f       	adc	r24, r24
 66a:	91 50       	subi	r25, 0x01	; 1
 66c:	50 40       	sbci	r21, 0x00	; 0
 66e:	a9 f7       	brne	.-22     	; 0x65a <__mulsf3_pse+0x64>
 670:	9e 3f       	cpi	r25, 0xFE	; 254
 672:	51 05       	cpc	r21, r1
 674:	80 f0       	brcs	.+32     	; 0x696 <__mulsf3_pse+0xa0>
 676:	0c 94 94 02 	jmp	0x528	; 0x528 <__fp_inf>
 67a:	0c 94 df 02 	jmp	0x5be	; 0x5be <__fp_szero>
 67e:	5f 3f       	cpi	r21, 0xFF	; 255
 680:	e4 f3       	brlt	.-8      	; 0x67a <__mulsf3_pse+0x84>
 682:	98 3e       	cpi	r25, 0xE8	; 232
 684:	d4 f3       	brlt	.-12     	; 0x67a <__mulsf3_pse+0x84>
 686:	86 95       	lsr	r24
 688:	77 95       	ror	r23
 68a:	67 95       	ror	r22
 68c:	b7 95       	ror	r27
 68e:	f7 95       	ror	r31
 690:	e7 95       	ror	r30
 692:	9f 5f       	subi	r25, 0xFF	; 255
 694:	c1 f7       	brne	.-16     	; 0x686 <__mulsf3_pse+0x90>
 696:	fe 2b       	or	r31, r30
 698:	88 0f       	add	r24, r24
 69a:	91 1d       	adc	r25, r1
 69c:	96 95       	lsr	r25
 69e:	87 95       	ror	r24
 6a0:	97 f9       	bld	r25, 7
 6a2:	08 95       	ret

000006a4 <_exit>:
 6a4:	f8 94       	cli

000006a6 <__stop_program>:
 6a6:	ff cf       	rjmp	.-2      	; 0x6a6 <__stop_program>
