
ProtocolTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000784  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000710  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800100  00800100  00000784  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010c4  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5c  00000000  00000000  000019d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a7e  00000000  00000000  0000242c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a0  00000000  00000000  00002eac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e0  00000000  00000000  0000314c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000055e  00000000  00000000  0000392c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003e8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 81 02 	jmp	0x502	; 0x502 <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 31       	cpi	r26, 0x12	; 18
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 aa 02 	call	0x554	; 0x554 <main>
  88:	0c 94 86 03 	jmp	0x70c	; 0x70c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_MASTER_init>:
	
	
I2C_write_fail:
	I2C_MASTER_hw_mutex = false;
	return 	I2C_SEND_FAIL;
}
  90:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
  94:	60 93 b9 00 	sts	0x00B9, r22	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  98:	84 e0       	ldi	r24, 0x04	; 4
  9a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  9e:	08 95       	ret

000000a0 <I2C_MASTER_readData>:

I2C_err_t I2C_MASTER_readData(char addr) {

	//Lock mutex
	if (I2C_MASTER_hw_mutex)
  a0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <I2C_MASTER_hw_mutex>
  a4:	91 11       	cpse	r25, r1
  a6:	2a c0       	rjmp	.+84     	; 0xfc <I2C_MASTER_readData+0x5c>
		return I2C_NOT_EXCLUSIVE;
		
	I2C_MASTER_hw_mutex = true;
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <I2C_MASTER_hw_mutex>

	//Start by sending a start condition
	TWCR = (1 << TWEN) | (0 << TWSTO) | (1 << TWSTA) | (1 << TWINT);
  ae:	94 ea       	ldi	r25, 0xA4	; 164
  b0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	//Wait for start to transmit
	while (!(TWCR & (1<<TWINT)));
  b4:	ec eb       	ldi	r30, 0xBC	; 188
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	90 81       	ld	r25, Z
  ba:	99 23       	and	r25, r25
  bc:	ec f7       	brge	.-6      	; 0xb8 <I2C_MASTER_readData+0x18>
	if ((TWSR & 0xF8) != 0x08)
  be:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  c2:	98 7f       	andi	r25, 0xF8	; 248
  c4:	98 30       	cpi	r25, 0x08	; 8
  c6:	b1 f4       	brne	.+44     	; 0xf4 <I2C_MASTER_readData+0x54>
		goto I2C_read_fail;
	
	
	//Insert slave ADDR and read bit to data register
	TWDR = (addr << 1) + I2C_read;
  c8:	88 0f       	add	r24, r24
  ca:	8f 5f       	subi	r24, 0xFF	; 255
  cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	
	//Send addr and R
	TWCR = (1 << TWEN) | (1 << TWINT);
  d0:	84 e8       	ldi	r24, 0x84	; 132
  d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	//Wait for status
	while (!(TWCR & (1 << TWINT)));
  d6:	ec eb       	ldi	r30, 0xBC	; 188
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	88 23       	and	r24, r24
  de:	ec f7       	brge	.-6      	; 0xda <I2C_MASTER_readData+0x3a>
	if ((TWSR & 0xF8) == 0x38)
  e0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  e4:	88 7f       	andi	r24, 0xF8	; 248
  e6:	88 33       	cpi	r24, 0x38	; 56
  e8:	29 f0       	breq	.+10     	; 0xf4 <I2C_MASTER_readData+0x54>
		goto I2C_read_fail;
		
	//Enable read interrupt, so CPU can do other stuff
	TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT);
  ea:	85 e8       	ldi	r24, 0x85	; 133
  ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	return I2C_OK;
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	08 95       	ret
	//Do NOT unlock mutex before data is read
	
I2C_read_fail:
	I2C_MASTER_hw_mutex = false;
  f4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <I2C_MASTER_hw_mutex>
	return I2C_READ_FAIL;
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	08 95       	ret

I2C_err_t I2C_MASTER_readData(char addr) {

	//Lock mutex
	if (I2C_MASTER_hw_mutex)
		return I2C_NOT_EXCLUSIVE;
  fc:	83 e0       	ldi	r24, 0x03	; 3
	//Do NOT unlock mutex before data is read
	
I2C_read_fail:
	I2C_MASTER_hw_mutex = false;
	return I2C_READ_FAIL;
}
  fe:	08 95       	ret

00000100 <I2C_MASTER_checkData>:

volatile bool I2C_MASTER_checkData() {
	return data_ready_flag;
 100:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
}
 104:	08 95       	ret

00000106 <I2C_MASTER_getData>:
	I2C_MASTER_hw_mutex = false;
	return I2C_READ_FAIL;
}

volatile bool I2C_MASTER_checkData() {
	return data_ready_flag;
 106:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
}

char I2C_MASTER_getData() {
	
	//Block if no data
	while(!I2C_MASTER_checkData());
 10a:	88 23       	and	r24, r24
 10c:	e1 f3       	breq	.-8      	; 0x106 <I2C_MASTER_getData>
	
	//Update status
	data_ready_flag = false;
 10e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	
	//Return data
	return local_read_data;
}
 112:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <local_read_data>
 116:	08 95       	ret

00000118 <__vector_24>:

//Read data from TWI
ISR(TWI_vect) {
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	8f 93       	push	r24
	
	//Save data
	local_read_data = TWDR;
 124:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 128:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <local_read_data>
	
	//Set flag
	data_ready_flag = true;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	//Send stop and stop interrupts
	TWCR = (1 << TWEN) | (0 << TWIE) | (1 << TWSTO) | (0 << TWSTA) | (1 << TWINT);
 132:	84 e9       	ldi	r24, 0x94	; 148
 134:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	//Unlock mutex from read
	I2C_MASTER_hw_mutex = false;
 138:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <I2C_MASTER_hw_mutex>
	
 13c:	8f 91       	pop	r24
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <I2C_SLAVE_sendData>:
			I2C_SLAVE_full = false;
		}
		return I2C_SLAVE_Buffer[I2C_SLAVE_inc(&I2C_SLAVE_first)];
	}
	return 0;
}
 148:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <I2C_SLAVE_toSend>
 14c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <I2C_SLAVE_haveSended>
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <I2C_SLAVE_dataReady>
 156:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <I2C_SLAVE_beginHold>
 15a:	88 23       	and	r24, r24
 15c:	a9 f1       	breq	.+106    	; 0x1c8 <I2C_SLAVE_sendData+0x80>
 15e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <I2C_SLAVE_beginHold>
 162:	e8 e6       	ldi	r30, 0x68	; 104
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	8b 7f       	andi	r24, 0xFB	; 251
 16a:	80 83       	st	Z, r24
 16c:	2b b1       	in	r18, 0x0b	; 11
 16e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <I2C_SLAVE_toSend>
 172:	88 1f       	adc	r24, r24
 174:	88 27       	eor	r24, r24
 176:	88 1f       	adc	r24, r24
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	82 95       	swap	r24
 17c:	92 95       	swap	r25
 17e:	90 7f       	andi	r25, 0xF0	; 240
 180:	98 27       	eor	r25, r24
 182:	80 7f       	andi	r24, 0xF0	; 240
 184:	98 27       	eor	r25, r24
 186:	80 71       	andi	r24, 0x10	; 16
 188:	92 2f       	mov	r25, r18
 18a:	9f 7e       	andi	r25, 0xEF	; 239
 18c:	89 0f       	add	r24, r25
 18e:	8b b9       	out	0x0b, r24	; 11
 190:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <I2C_SLAVE_haveSended>
 194:	8f 5f       	subi	r24, 0xFF	; 255
 196:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <I2C_SLAVE_haveSended>
 19a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <I2C_SLAVE_toSend>
 19e:	29 b1       	in	r18, 0x09	; 9
 1a0:	88 1f       	adc	r24, r24
 1a2:	88 27       	eor	r24, r24
 1a4:	88 1f       	adc	r24, r24
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	82 95       	swap	r24
 1aa:	92 95       	swap	r25
 1ac:	90 7f       	andi	r25, 0xF0	; 240
 1ae:	98 27       	eor	r25, r24
 1b0:	80 7f       	andi	r24, 0xF0	; 240
 1b2:	98 27       	eor	r25, r24
 1b4:	20 71       	andi	r18, 0x10	; 16
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	82 17       	cp	r24, r18
 1ba:	93 07       	cpc	r25, r19
 1bc:	71 f7       	brne	.-36     	; 0x19a <I2C_SLAVE_sendData+0x52>
 1be:	e8 e6       	ldi	r30, 0x68	; 104
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	84 60       	ori	r24, 0x04	; 4
 1c6:	80 83       	st	Z, r24
 1c8:	5a 9a       	sbi	0x0b, 2	; 11
 1ca:	08 95       	ret

000001cc <I2C_SLAVE_init>:
 1cc:	e9 e6       	ldi	r30, 0x69	; 105
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	82 60       	ori	r24, 0x02	; 2
 1d4:	80 83       	st	Z, r24
 1d6:	80 81       	ld	r24, Z
 1d8:	81 60       	ori	r24, 0x01	; 1
 1da:	80 83       	st	Z, r24
 1dc:	e8 e6       	ldi	r30, 0x68	; 104
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	80 61       	ori	r24, 0x10	; 16
 1e4:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>
 1e8:	80 81       	ld	r24, Z
 1ea:	84 60       	ori	r24, 0x04	; 4
 1ec:	80 83       	st	Z, r24
 1ee:	8a b1       	in	r24, 0x0a	; 10
 1f0:	8b 7e       	andi	r24, 0xEB	; 235
 1f2:	8a b9       	out	0x0a, r24	; 10
 1f4:	8a b1       	in	r24, 0x0a	; 10
 1f6:	80 6e       	ori	r24, 0xE0	; 224
 1f8:	8a b9       	out	0x0a, r24	; 10
 1fa:	8b b1       	in	r24, 0x0b	; 11
 1fc:	84 61       	ori	r24, 0x14	; 20
 1fe:	8b b9       	out	0x0b, r24	; 11
 200:	08 95       	ret

00000202 <I2C_SLAVE_sendBit>:
 202:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <I2C_SLAVE_dataReady>
 206:	91 30       	cpi	r25, 0x01	; 1
 208:	41 f4       	brne	.+16     	; 0x21a <I2C_SLAVE_sendBit+0x18>
 20a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <I2C_SLAVE_toSend>
 20e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <I2C_SLAVE_tempSave>
 212:	92 e0       	ldi	r25, 0x02	; 2
 214:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <I2C_SLAVE_dataReady>
 218:	03 c0       	rjmp	.+6      	; 0x220 <I2C_SLAVE_sendBit+0x1e>
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <I2C_SLAVE_dataReady>
 220:	87 95       	ror	r24
 222:	88 27       	eor	r24, r24
 224:	87 95       	ror	r24
 226:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <I2C_SLAVE_toSend>
 22a:	87 e0       	ldi	r24, 0x07	; 7
 22c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <I2C_SLAVE_haveSended>
 230:	08 95       	ret

00000232 <I2C_SLAVE_beginSend>:
 232:	e9 e6       	ldi	r30, 0x69	; 105
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	82 60       	ori	r24, 0x02	; 2
 23a:	80 83       	st	Z, r24
 23c:	80 81       	ld	r24, Z
 23e:	8e 7f       	andi	r24, 0xFE	; 254
 240:	80 83       	st	Z, r24
 242:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <I2C_SLAVE_dataReady>
 246:	82 30       	cpi	r24, 0x02	; 2
 248:	21 f4       	brne	.+8      	; 0x252 <I2C_SLAVE_beginSend+0x20>
 24a:	83 e0       	ldi	r24, 0x03	; 3
 24c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <I2C_SLAVE_dataReady>
 250:	08 95       	ret
 252:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <I2C_SLAVE_dataReady>
 256:	08 95       	ret

00000258 <I2C_SLAVE_hold>:
 258:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <I2C_SLAVE_dataReady>
 25c:	81 50       	subi	r24, 0x01	; 1
 25e:	82 30       	cpi	r24, 0x02	; 2
 260:	28 f4       	brcc	.+10     	; 0x26c <I2C_SLAVE_hold+0x14>
 262:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <I2C_SLAVE_beginHold>
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	08 95       	ret
 26c:	5a 98       	cbi	0x0b, 2	; 11
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	08 95       	ret

00000274 <I2C_SLAVE_inc>:
 274:	fc 01       	movw	r30, r24
 276:	80 81       	ld	r24, Z
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	98 0f       	add	r25, r24
 27c:	92 30       	cpi	r25, 0x02	; 2
 27e:	10 f4       	brcc	.+4      	; 0x284 <I2C_SLAVE_inc+0x10>
 280:	90 83       	st	Z, r25
 282:	08 95       	ret
 284:	10 82       	st	Z, r1
 286:	08 95       	ret

00000288 <I2C_SLAVE_addData>:
 288:	cf 93       	push	r28
 28a:	c8 2f       	mov	r28, r24
 28c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <I2C_SLAVE_full>
 290:	88 23       	and	r24, r24
 292:	29 f0       	breq	.+10     	; 0x29e <I2C_SLAVE_addData+0x16>
 294:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <I2C_SLAVE_first>
 298:	8f 5f       	subi	r24, 0xFF	; 255
 29a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <I2C_SLAVE_first>
 29e:	8e e0       	ldi	r24, 0x0E	; 14
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	0e 94 3a 01 	call	0x274	; 0x274 <I2C_SLAVE_inc>
 2a6:	e8 2f       	mov	r30, r24
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	e0 5f       	subi	r30, 0xF0	; 240
 2ac:	fe 4f       	sbci	r31, 0xFE	; 254
 2ae:	c0 83       	st	Z, r28
 2b0:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <I2C_SLAVE_last>
 2b4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <I2C_SLAVE_first>
 2b8:	98 13       	cpse	r25, r24
 2ba:	03 c0       	rjmp	.+6      	; 0x2c2 <I2C_SLAVE_addData+0x3a>
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <I2C_SLAVE_full>
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <__vector_1>:


ISR(I2C_SLAVE_SCL_vect)
{
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
 2d0:	2f 93       	push	r18
 2d2:	3f 93       	push	r19
 2d4:	4f 93       	push	r20
 2d6:	5f 93       	push	r21
 2d8:	6f 93       	push	r22
 2da:	7f 93       	push	r23
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
 2e0:	af 93       	push	r26
 2e2:	bf 93       	push	r27
 2e4:	ef 93       	push	r30
 2e6:	ff 93       	push	r31
	if(I2C_SLAVE_startRecived)
 2e8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <I2C_SLAVE_startRecived>
 2ec:	88 23       	and	r24, r24
 2ee:	09 f4       	brne	.+2      	; 0x2f2 <__vector_1+0x2c>
 2f0:	f7 c0       	rjmp	.+494    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
	{
		if(I2C_SLAVE_SCL_IS_RISING())
 2f2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 2f6:	83 70       	andi	r24, 0x03	; 3
 2f8:	83 30       	cpi	r24, 0x03	; 3
 2fa:	09 f0       	breq	.+2      	; 0x2fe <__vector_1+0x38>
 2fc:	98 c0       	rjmp	.+304    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		{
			if(I2C_SLAVE_haveSended > 7)
 2fe:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <I2C_SLAVE_haveSended>
 302:	88 30       	cpi	r24, 0x08	; 8
 304:	28 f0       	brcs	.+10     	; 0x310 <__vector_1+0x4a>
			{
				I2C_SLAVE_haveSended = 0;
 306:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <I2C_SLAVE_haveSended>
				I2C_SLAVE_PORT |= (1 << I2C_SLAVE_SDA | 1 << I2C_SLAVE_SCL);
 30a:	8b b1       	in	r24, 0x0b	; 11
 30c:	84 61       	ori	r24, 0x14	; 20
 30e:	8b b9       	out	0x0b, r24	; 11
				//I2C_SLAVE_DDR |= 1 << I2C_SLAVE_SDA;
			}
			if(I2C_SLAVE_recevedBits < 7)
 310:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <I2C_SLAVE_recevedBits>
 314:	97 30       	cpi	r25, 0x07	; 7
 316:	20 f5       	brcc	.+72     	; 0x360 <__vector_1+0x9a>
			{
				I2C_SLAVE_recevedAddr = I2C_SLAVE_SET_BIT(I2C_SLAVE_recevedAddr,6-I2C_SLAVE_recevedBits,I2C_SLAVE_PIN,I2C_SLAVE_SDA);
 318:	66 e0       	ldi	r22, 0x06	; 6
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	69 1b       	sub	r22, r25
 31e:	71 09       	sbc	r23, r1
 320:	21 e0       	ldi	r18, 0x01	; 1
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	a9 01       	movw	r20, r18
 326:	06 2e       	mov	r0, r22
 328:	02 c0       	rjmp	.+4      	; 0x32e <__vector_1+0x68>
 32a:	44 0f       	add	r20, r20
 32c:	55 1f       	adc	r21, r21
 32e:	0a 94       	dec	r0
 330:	e2 f7       	brpl	.-8      	; 0x32a <__vector_1+0x64>
 332:	89 b1       	in	r24, 0x09	; 9
 334:	54 2f       	mov	r21, r20
 336:	50 95       	com	r21
 338:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <I2C_SLAVE_recevedAddr>
 33c:	52 23       	and	r21, r18
 33e:	82 95       	swap	r24
 340:	8f 70       	andi	r24, 0x0F	; 15
 342:	28 2f       	mov	r18, r24
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	02 c0       	rjmp	.+4      	; 0x34c <__vector_1+0x86>
 348:	22 0f       	add	r18, r18
 34a:	33 1f       	adc	r19, r19
 34c:	6a 95       	dec	r22
 34e:	e2 f7       	brpl	.-8      	; 0x348 <__vector_1+0x82>
 350:	24 23       	and	r18, r20
 352:	25 0f       	add	r18, r21
 354:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <I2C_SLAVE_recevedAddr>
				I2C_SLAVE_recevedBits++;
 358:	9f 5f       	subi	r25, 0xFF	; 255
 35a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <I2C_SLAVE_recevedBits>
 35e:	c0 c0       	rjmp	.+384    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
			}
			else if(I2C_SLAVE_recevedAddr == I2C_SLAVE_ADDR && I2C_SLAVE_recevedBits < 8)
 360:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_SLAVE_recevedAddr>
 364:	80 37       	cpi	r24, 0x70	; 112
 366:	09 f0       	breq	.+2      	; 0x36a <__vector_1+0xa4>
 368:	bb c0       	rjmp	.+374    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 36a:	98 30       	cpi	r25, 0x08	; 8
 36c:	b8 f4       	brcc	.+46     	; 0x39c <__vector_1+0xd6>
			{
				I2C_SLAVE_recevedBits++;
 36e:	9f 5f       	subi	r25, 0xFF	; 255
 370:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <I2C_SLAVE_recevedBits>
				I2C_SLAVE_shouldWrite = I2C_SLAVE_SET_BIT(I2C_SLAVE_shouldWrite,0,I2C_SLAVE_PIN,I2C_SLAVE_SDA);//0;
 374:	89 b1       	in	r24, 0x09	; 9
 376:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <I2C_SLAVE_shouldWrite>
 37a:	9e 7f       	andi	r25, 0xFE	; 254
 37c:	82 95       	swap	r24
 37e:	81 70       	andi	r24, 0x01	; 1
 380:	89 0f       	add	r24, r25
 382:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <I2C_SLAVE_shouldWrite>
				if(I2C_SLAVE_shouldWrite)
 386:	88 23       	and	r24, r24
 388:	19 f0       	breq	.+6      	; 0x390 <__vector_1+0xca>
				{
					I2C_SLAVE_beginHold = true;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <I2C_SLAVE_beginHold>
				}
				I2C_SLAVE_sendBit(0);
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	0e 94 01 01 	call	0x202	; 0x202 <I2C_SLAVE_sendBit>
				I2C_SLAVE_beginSend();
 396:	0e 94 19 01 	call	0x232	; 0x232 <I2C_SLAVE_beginSend>
 39a:	a2 c0       	rjmp	.+324    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
			}
			else if(I2C_SLAVE_recevedAddr == I2C_SLAVE_ADDR && I2C_SLAVE_recevedBits < (9))
 39c:	99 30       	cpi	r25, 0x09	; 9
 39e:	20 f4       	brcc	.+8      	; 0x3a8 <__vector_1+0xe2>
			{
				I2C_SLAVE_recevedBits++;
 3a0:	9f 5f       	subi	r25, 0xFF	; 255
 3a2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <I2C_SLAVE_recevedBits>
 3a6:	9c c0       	rjmp	.+312    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
			}
			else if(I2C_SLAVE_recevedAddr == I2C_SLAVE_ADDR && I2C_SLAVE_recevedBits < (17))
 3a8:	91 31       	cpi	r25, 0x11	; 17
 3aa:	08 f0       	brcs	.+2      	; 0x3ae <__vector_1+0xe8>
 3ac:	99 c0       	rjmp	.+306    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
			{
				if(!I2C_SLAVE_shouldWrite)
 3ae:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <I2C_SLAVE_shouldWrite>
 3b2:	81 11       	cpse	r24, r1
 3b4:	31 c0       	rjmp	.+98     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
				{
					I2C_SLAVE_recevedData = I2C_SLAVE_SET_BIT(I2C_SLAVE_recevedData,7-(I2C_SLAVE_recevedBits-8),I2C_SLAVE_PIN,I2C_SLAVE_SDA);
 3b6:	6f e0       	ldi	r22, 0x0F	; 15
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	69 1b       	sub	r22, r25
 3bc:	71 09       	sbc	r23, r1
 3be:	21 e0       	ldi	r18, 0x01	; 1
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	a9 01       	movw	r20, r18
 3c4:	06 2e       	mov	r0, r22
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <__vector_1+0x106>
 3c8:	44 0f       	add	r20, r20
 3ca:	55 1f       	adc	r21, r21
 3cc:	0a 94       	dec	r0
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <__vector_1+0x102>
 3d0:	39 b1       	in	r19, 0x09	; 9
 3d2:	24 2f       	mov	r18, r20
 3d4:	20 95       	com	r18
 3d6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <I2C_SLAVE_recevedData>
 3da:	82 23       	and	r24, r18
 3dc:	32 95       	swap	r19
 3de:	3f 70       	andi	r19, 0x0F	; 15
 3e0:	23 2f       	mov	r18, r19
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <__vector_1+0x124>
 3e6:	22 0f       	add	r18, r18
 3e8:	33 1f       	adc	r19, r19
 3ea:	6a 95       	dec	r22
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <__vector_1+0x120>
 3ee:	24 23       	and	r18, r20
 3f0:	82 0f       	add	r24, r18
 3f2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <I2C_SLAVE_recevedData>
					I2C_SLAVE_recevedBits++;
 3f6:	9f 5f       	subi	r25, 0xFF	; 255
 3f8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <I2C_SLAVE_recevedBits>
					if(I2C_SLAVE_recevedBits == 16)
 3fc:	90 31       	cpi	r25, 0x10	; 16
 3fe:	09 f0       	breq	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	6f c0       	rjmp	.+222    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
					{
						I2C_SLAVE_addData(I2C_SLAVE_recevedData);
 402:	0e 94 44 01 	call	0x288	; 0x288 <I2C_SLAVE_addData>
						I2C_SLAVE_sendBit(0);
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	0e 94 01 01 	call	0x202	; 0x202 <I2C_SLAVE_sendBit>
						I2C_SLAVE_beginSend();
 40c:	0e 94 19 01 	call	0x232	; 0x232 <I2C_SLAVE_beginSend>
						I2C_SLAVE_recevedBits = 8;
 410:	88 e0       	ldi	r24, 0x08	; 8
 412:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <I2C_SLAVE_recevedBits>
 416:	64 c0       	rjmp	.+200    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
					}
				}
				else if(I2C_SLAVE_shouldWrite && I2C_SLAVE_hold())
 418:	0e 94 2c 01 	call	0x258	; 0x258 <I2C_SLAVE_hold>
 41c:	89 2b       	or	r24, r25
 41e:	09 f4       	brne	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 420:	5f c0       	rjmp	.+190    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
				{
					I2C_SLAVE_beginSend();
 422:	0e 94 19 01 	call	0x232	; 0x232 <I2C_SLAVE_beginSend>
					I2C_SLAVE_recevedBits = 7;
 426:	87 e0       	ldi	r24, 0x07	; 7
 428:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <I2C_SLAVE_recevedBits>
 42c:	59 c0       	rjmp	.+178    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
				}
			}
		}
		else if(I2C_SLAVE_SCL_IS_FALLING())
 42e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 432:	83 70       	andi	r24, 0x03	; 3
 434:	82 30       	cpi	r24, 0x02	; 2
 436:	09 f0       	breq	.+2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 438:	53 c0       	rjmp	.+166    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
		{
			//sendChar(I2C_SLAVE_haveSended);
			if(I2C_SLAVE_haveSended > 7)
 43a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <I2C_SLAVE_haveSended>
 43e:	38 30       	cpi	r19, 0x08	; 8
 440:	90 f1       	brcs	.+100    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
			{
				if(I2C_SLAVE_dataReady == 2 || I2C_SLAVE_dataReady == 3)
 442:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <I2C_SLAVE_dataReady>
 446:	82 50       	subi	r24, 0x02	; 2
 448:	82 30       	cpi	r24, 0x02	; 2
 44a:	e0 f4       	brcc	.+56     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
				{
					//sendChar(I2C_SLAVE_tempSave);
					I2C_SLAVE_dataReady = 1;
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <I2C_SLAVE_dataReady>
					I2C_SLAVE_haveSended = 1;
 452:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <I2C_SLAVE_haveSended>
					I2C_SLAVE_toSend = I2C_SLAVE_tempSave;
 456:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <I2C_SLAVE_tempSave>
 45a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <I2C_SLAVE_toSend>
					I2C_SLAVE_PORT = I2C_SLAVE_SET_BIT(I2C_SLAVE_PORT,I2C_SLAVE_SDA,I2C_SLAVE_toSend,7);
 45e:	2b b1       	in	r18, 0x0b	; 11
 460:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <I2C_SLAVE_toSend>
 464:	88 1f       	adc	r24, r24
 466:	88 27       	eor	r24, r24
 468:	88 1f       	adc	r24, r24
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	82 95       	swap	r24
 46e:	92 95       	swap	r25
 470:	90 7f       	andi	r25, 0xF0	; 240
 472:	98 27       	eor	r25, r24
 474:	80 7f       	andi	r24, 0xF0	; 240
 476:	98 27       	eor	r25, r24
 478:	80 71       	andi	r24, 0x10	; 16
 47a:	92 2f       	mov	r25, r18
 47c:	9f 7e       	andi	r25, 0xEF	; 239
 47e:	89 0f       	add	r24, r25
 480:	8b b9       	out	0x0b, r24	; 11
 482:	01 c0       	rjmp	.+2      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
				}
				else
				{
					//I2C_SLAVE_recevedBits += I2C_SLAVE_haveSended;
					I2C_SLAVE_PORT |= (1 << I2C_SLAVE_SDA);
 484:	5c 9a       	sbi	0x0b, 4	; 11
				}
				if(I2C_SLAVE_beginHold)
 486:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <I2C_SLAVE_beginHold>
 48a:	88 23       	and	r24, r24
 48c:	19 f0       	breq	.+6      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
				{
					I2C_SLAVE_hold();
 48e:	0e 94 2c 01 	call	0x258	; 0x258 <I2C_SLAVE_hold>
 492:	26 c0       	rjmp	.+76     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
				}
				else
				{
					I2C_SLAVE_SCL_RISING();
 494:	e9 e6       	ldi	r30, 0x69	; 105
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	80 81       	ld	r24, Z
 49a:	82 60       	ori	r24, 0x02	; 2
 49c:	80 83       	st	Z, r24
 49e:	80 81       	ld	r24, Z
 4a0:	81 60       	ori	r24, 0x01	; 1
 4a2:	80 83       	st	Z, r24
 4a4:	1d c0       	rjmp	.+58     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
				}
			}
			else
			{
				
				I2C_SLAVE_PORT = I2C_SLAVE_SET_BIT(I2C_SLAVE_PORT,I2C_SLAVE_SDA,I2C_SLAVE_toSend,(7-I2C_SLAVE_haveSended));//&= ~(1 << I2C_SLAVE_SDA);
 4a6:	2b b1       	in	r18, 0x0b	; 11
 4a8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <I2C_SLAVE_toSend>
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	47 e0       	ldi	r20, 0x07	; 7
 4b0:	50 e0       	ldi	r21, 0x00	; 0
 4b2:	43 1b       	sub	r20, r19
 4b4:	51 09       	sbc	r21, r1
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4b8:	95 95       	asr	r25
 4ba:	87 95       	ror	r24
 4bc:	4a 95       	dec	r20
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4c0:	82 95       	swap	r24
 4c2:	92 95       	swap	r25
 4c4:	90 7f       	andi	r25, 0xF0	; 240
 4c6:	98 27       	eor	r25, r24
 4c8:	80 7f       	andi	r24, 0xF0	; 240
 4ca:	98 27       	eor	r25, r24
 4cc:	80 71       	andi	r24, 0x10	; 16
 4ce:	92 2f       	mov	r25, r18
 4d0:	9f 7e       	andi	r25, 0xEF	; 239
 4d2:	89 0f       	add	r24, r25
 4d4:	8b b9       	out	0x0b, r24	; 11
				
				I2C_SLAVE_haveSended++;
 4d6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <I2C_SLAVE_haveSended>
 4da:	8f 5f       	subi	r24, 0xFF	; 255
 4dc:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <I2C_SLAVE_haveSended>
			}
		}
	}
	
}
 4e0:	ff 91       	pop	r31
 4e2:	ef 91       	pop	r30
 4e4:	bf 91       	pop	r27
 4e6:	af 91       	pop	r26
 4e8:	9f 91       	pop	r25
 4ea:	8f 91       	pop	r24
 4ec:	7f 91       	pop	r23
 4ee:	6f 91       	pop	r22
 4f0:	5f 91       	pop	r21
 4f2:	4f 91       	pop	r20
 4f4:	3f 91       	pop	r19
 4f6:	2f 91       	pop	r18
 4f8:	0f 90       	pop	r0
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	0f 90       	pop	r0
 4fe:	1f 90       	pop	r1
 500:	18 95       	reti

00000502 <__vector_5>:


ISR(I2C_SLAVE_SDA_vect)
{
 502:	1f 92       	push	r1
 504:	0f 92       	push	r0
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	0f 92       	push	r0
 50a:	11 24       	eor	r1, r1
 50c:	8f 93       	push	r24
 50e:	ef 93       	push	r30
 510:	ff 93       	push	r31
	if((I2C_SLAVE_PIN & 1 << I2C_SLAVE_SCL) ==(1 << I2C_SLAVE_SCL))
 512:	4a 9b       	sbis	0x09, 2	; 9
 514:	17 c0       	rjmp	.+46     	; 0x544 <__vector_5+0x42>
	{
		if(I2C_SLAVE_PIN & 1 << I2C_SLAVE_SDA)
 516:	4c 9b       	sbis	0x09, 4	; 9
 518:	12 c0       	rjmp	.+36     	; 0x53e <__vector_5+0x3c>
		{
			I2C_SLAVE_startRecived = false;
 51a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <I2C_SLAVE_startRecived>
			I2C_SLAVE_startRecived = true;
		}
		if(I2C_SLAVE_startRecived == false)
		{
			//sendChar(0xDA);
			I2C_SLAVE_recevedAddr = 0;
 51e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <I2C_SLAVE_recevedAddr>
			I2C_SLAVE_recevedBits = 0;
 522:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <I2C_SLAVE_recevedBits>
			I2C_SLAVE_SCL_RISING();
 526:	e9 e6       	ldi	r30, 0x69	; 105
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	80 81       	ld	r24, Z
 52c:	82 60       	ori	r24, 0x02	; 2
 52e:	80 83       	st	Z, r24
 530:	80 81       	ld	r24, Z
 532:	81 60       	ori	r24, 0x01	; 1
 534:	80 83       	st	Z, r24
			I2C_SLAVE_PORT |= (1 << I2C_SLAVE_SDA | 1 << I2C_SLAVE_SCL);
 536:	8b b1       	in	r24, 0x0b	; 11
 538:	84 61       	ori	r24, 0x14	; 20
 53a:	8b b9       	out	0x0b, r24	; 11
 53c:	03 c0       	rjmp	.+6      	; 0x544 <__vector_5+0x42>
		{
			I2C_SLAVE_startRecived = false;
		}
		else
		{
			I2C_SLAVE_startRecived = true;
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <I2C_SLAVE_startRecived>
			I2C_SLAVE_recevedBits = 0;
			I2C_SLAVE_SCL_RISING();
			I2C_SLAVE_PORT |= (1 << I2C_SLAVE_SDA | 1 << I2C_SLAVE_SCL);
		}
	}
}
 544:	ff 91       	pop	r31
 546:	ef 91       	pop	r30
 548:	8f 91       	pop	r24
 54a:	0f 90       	pop	r0
 54c:	0f be       	out	0x3f, r0	; 63
 54e:	0f 90       	pop	r0
 550:	1f 90       	pop	r1
 552:	18 95       	reti

00000554 <main>:

void wait();

int main(void)
{
	DDRB|= 1<<5 ;
 554:	25 9a       	sbi	0x04, 5	; 4
	PORTB = 0 << 5;
 556:	15 b8       	out	0x05, r1	; 5
	uint8_t c = 0x00;
	I2C_SLAVE_init();
 558:	0e 94 e6 00 	call	0x1cc	; 0x1cc <I2C_SLAVE_init>
	I2C_MASTER_init(255,I2C_MASTER_PRESCALE_64);
 55c:	63 e0       	ldi	r22, 0x03	; 3
 55e:	8f ef       	ldi	r24, 0xFF	; 255
 560:	0e 94 48 00 	call	0x90	; 0x90 <I2C_MASTER_init>
	I2C_SLAVE_SCL_INT_ENAB(1);
 564:	e8 9a       	sbi	0x1d, 0	; 29
	sei();
 566:	78 94       	sei
	initUART(9600, 8, 1, 0);
 568:	00 e0       	ldi	r16, 0x00	; 0
 56a:	21 e0       	ldi	r18, 0x01	; 1
 56c:	48 e0       	ldi	r20, 0x08	; 8
 56e:	60 e8       	ldi	r22, 0x80	; 128
 570:	75 e2       	ldi	r23, 0x25	; 37
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	0e 94 ed 02 	call	0x5da	; 0x5da <initUART>

int main(void)
{
	DDRB|= 1<<5 ;
	PORTB = 0 << 5;
	uint8_t c = 0x00;
 57a:	d0 e0       	ldi	r29, 0x00	; 0
			if(ret == I2C_READ_FAIL);
			{
				sendChar(0xEE);
			}
			ret = I2C_MASTER_readData(0x70);
			PORTB = 1 << 5;
 57c:	c0 e2       	ldi	r28, 0x20	; 32
		_delay_ms(500);
		I2C_MASTER_sendData(0x70,MAKE_PANCAKE);
		sendChar(I2C_SLAVE_readFirst());
		sendChar(I2C_SLAVE_readFirst());
		sendChar(I2C_SLAVE_readFirst());*/
		I2C_SLAVE_sendData(c);
 57e:	8d 2f       	mov	r24, r29
 580:	0e 94 a4 00 	call	0x148	; 0x148 <I2C_SLAVE_sendData>
		I2C_err_t ret = I2C_MASTER_readData(0x70);
 584:	80 e7       	ldi	r24, 0x70	; 112
 586:	0e 94 50 00 	call	0xa0	; 0xa0 <I2C_MASTER_readData>
		while(ret != I2C_NOT_EXCLUSIVE){
 58a:	83 30       	cpi	r24, 0x03	; 3
 58c:	49 f0       	breq	.+18     	; 0x5a0 <main+0x4c>
			if(ret == I2C_READ_FAIL);
			{
				sendChar(0xEE);
 58e:	8e ee       	ldi	r24, 0xEE	; 238
 590:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <sendChar>
			}
			ret = I2C_MASTER_readData(0x70);
 594:	80 e7       	ldi	r24, 0x70	; 112
 596:	0e 94 50 00 	call	0xa0	; 0xa0 <I2C_MASTER_readData>
			PORTB = 1 << 5;
 59a:	c5 b9       	out	0x05, r28	; 5
		sendChar(I2C_SLAVE_readFirst());
		sendChar(I2C_SLAVE_readFirst());
		sendChar(I2C_SLAVE_readFirst());*/
		I2C_SLAVE_sendData(c);
		I2C_err_t ret = I2C_MASTER_readData(0x70);
		while(ret != I2C_NOT_EXCLUSIVE){
 59c:	83 30       	cpi	r24, 0x03	; 3
 59e:	b9 f7       	brne	.-18     	; 0x58e <main+0x3a>
				sendChar(0xEE);
			}
			ret = I2C_MASTER_readData(0x70);
			PORTB = 1 << 5;
		}
		PORTB = 0 << 5;
 5a0:	15 b8       	out	0x05, r1	; 5
		if(c == 255)
 5a2:	df 3f       	cpi	r29, 0xFF	; 255
 5a4:	11 f0       	breq	.+4      	; 0x5aa <main+0x56>
		{
			c = 0;
		}
		else
		{
			c++;
 5a6:	df 5f       	subi	r29, 0xFF	; 255
 5a8:	01 c0       	rjmp	.+2      	; 0x5ac <main+0x58>
			PORTB = 1 << 5;
		}
		PORTB = 0 << 5;
		if(c == 255)
		{
			c = 0;
 5aa:	d0 e0       	ldi	r29, 0x00	; 0
		}
		else
		{
			c++;
		}
		wait();
 5ac:	0e 94 dd 02 	call	0x5ba	; 0x5ba <wait>
		sendChar(I2C_MASTER_getData());
 5b0:	0e 94 83 00 	call	0x106	; 0x106 <I2C_MASTER_getData>
 5b4:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <sendChar>
		
		
    }
 5b8:	e2 cf       	rjmp	.-60     	; 0x57e <main+0x2a>

000005ba <wait>:
}

#pragma GCC optimize 0
void wait()
{
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
 5be:	cd b7       	in	r28, 0x3d	; 61
 5c0:	de b7       	in	r29, 0x3e	; 62
	while(!I2C_MASTER_checkData())
 5c2:	00 00       	nop
 5c4:	0e 94 80 00 	call	0x100	; 0x100 <I2C_MASTER_checkData>
 5c8:	98 2f       	mov	r25, r24
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	89 27       	eor	r24, r25
 5ce:	88 23       	and	r24, r24
 5d0:	c9 f7       	brne	.-14     	; 0x5c4 <wait+0xa>
	{
	}
}
 5d2:	00 00       	nop
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	08 95       	ret

000005da <initUART>:
char readChar()
{
	while(!(UCSR0A & (1<<7)))
	{}
	return UDR0;
}
 5da:	cf 92       	push	r12
 5dc:	df 92       	push	r13
 5de:	ef 92       	push	r14
 5e0:	ff 92       	push	r15
 5e2:	0f 93       	push	r16
 5e4:	6b 01       	movw	r12, r22
 5e6:	7c 01       	movw	r14, r24
 5e8:	3c e2       	ldi	r19, 0x2C	; 44
 5ea:	c3 1a       	sub	r12, r19
 5ec:	31 e0       	ldi	r19, 0x01	; 1
 5ee:	d3 0a       	sbc	r13, r19
 5f0:	e1 08       	sbc	r14, r1
 5f2:	f1 08       	sbc	r15, r1
 5f4:	35 ed       	ldi	r19, 0xD5	; 213
 5f6:	c3 16       	cp	r12, r19
 5f8:	30 ec       	ldi	r19, 0xC0	; 192
 5fa:	d3 06       	cpc	r13, r19
 5fc:	31 e0       	ldi	r19, 0x01	; 1
 5fe:	e3 06       	cpc	r14, r19
 600:	f1 04       	cpc	r15, r1
 602:	08 f0       	brcs	.+2      	; 0x606 <initUART+0x2c>
 604:	53 c0       	rjmp	.+166    	; 0x6ac <initUART+0xd2>
 606:	45 50       	subi	r20, 0x05	; 5
 608:	44 30       	cpi	r20, 0x04	; 4
 60a:	08 f0       	brcs	.+2      	; 0x60e <initUART+0x34>
 60c:	4f c0       	rjmp	.+158    	; 0x6ac <initUART+0xd2>
 60e:	38 e1       	ldi	r19, 0x18	; 24
 610:	30 93 c1 00 	sts	0x00C1, r19	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 614:	44 0f       	add	r20, r20
 616:	40 93 c2 00 	sts	0x00C2, r20	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 61a:	22 23       	and	r18, r18
 61c:	29 f0       	breq	.+10     	; 0x628 <initUART+0x4e>
 61e:	e1 ec       	ldi	r30, 0xC1	; 193
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	20 81       	ld	r18, Z
 624:	20 68       	ori	r18, 0x80	; 128
 626:	20 83       	st	Z, r18
 628:	05 34       	cpi	r16, 0x45	; 69
 62a:	31 f4       	brne	.+12     	; 0x638 <initUART+0x5e>
 62c:	e2 ec       	ldi	r30, 0xC2	; 194
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	20 81       	ld	r18, Z
 632:	20 62       	ori	r18, 0x20	; 32
 634:	20 83       	st	Z, r18
 636:	07 c0       	rjmp	.+14     	; 0x646 <initUART+0x6c>
 638:	0f 34       	cpi	r16, 0x4F	; 79
 63a:	29 f4       	brne	.+10     	; 0x646 <initUART+0x6c>
 63c:	e2 ec       	ldi	r30, 0xC2	; 194
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	20 81       	ld	r18, Z
 642:	20 63       	ori	r18, 0x30	; 48
 644:	20 83       	st	Z, r18
 646:	6b 01       	movw	r12, r22
 648:	7c 01       	movw	r14, r24
 64a:	20 e8       	ldi	r18, 0x80	; 128
 64c:	c2 0e       	add	r12, r18
 64e:	24 e8       	ldi	r18, 0x84	; 132
 650:	d2 1e       	adc	r13, r18
 652:	2e e1       	ldi	r18, 0x1E	; 30
 654:	e2 1e       	adc	r14, r18
 656:	f1 1c       	adc	r15, r1
 658:	cc 0c       	add	r12, r12
 65a:	dd 1c       	adc	r13, r13
 65c:	ee 1c       	adc	r14, r14
 65e:	ff 1c       	adc	r15, r15
 660:	cc 0c       	add	r12, r12
 662:	dd 1c       	adc	r13, r13
 664:	ee 1c       	adc	r14, r14
 666:	ff 1c       	adc	r15, r15
 668:	cc 0c       	add	r12, r12
 66a:	dd 1c       	adc	r13, r13
 66c:	ee 1c       	adc	r14, r14
 66e:	ff 1c       	adc	r15, r15
 670:	dc 01       	movw	r26, r24
 672:	cb 01       	movw	r24, r22
 674:	88 0f       	add	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	aa 1f       	adc	r26, r26
 67a:	bb 1f       	adc	r27, r27
 67c:	88 0f       	add	r24, r24
 67e:	99 1f       	adc	r25, r25
 680:	aa 1f       	adc	r26, r26
 682:	bb 1f       	adc	r27, r27
 684:	9c 01       	movw	r18, r24
 686:	ad 01       	movw	r20, r26
 688:	22 0f       	add	r18, r18
 68a:	33 1f       	adc	r19, r19
 68c:	44 1f       	adc	r20, r20
 68e:	55 1f       	adc	r21, r21
 690:	22 0f       	add	r18, r18
 692:	33 1f       	adc	r19, r19
 694:	44 1f       	adc	r20, r20
 696:	55 1f       	adc	r21, r21
 698:	c7 01       	movw	r24, r14
 69a:	b6 01       	movw	r22, r12
 69c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__udivmodsi4>
 6a0:	21 50       	subi	r18, 0x01	; 1
 6a2:	31 09       	sbc	r19, r1
 6a4:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 6a8:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 6ac:	0f 91       	pop	r16
 6ae:	ff 90       	pop	r15
 6b0:	ef 90       	pop	r14
 6b2:	df 90       	pop	r13
 6b4:	cf 90       	pop	r12
 6b6:	08 95       	ret

000006b8 <sendChar>:
void sendChar(char sChar)
{
	while(!(UCSR0A & (1<<5)))
 6b8:	e0 ec       	ldi	r30, 0xC0	; 192
 6ba:	f0 e0       	ldi	r31, 0x00	; 0
 6bc:	90 81       	ld	r25, Z
 6be:	95 ff       	sbrs	r25, 5
 6c0:	fd cf       	rjmp	.-6      	; 0x6bc <sendChar+0x4>
	{}
	UDR0 = sChar;
 6c2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 6c6:	08 95       	ret

000006c8 <__udivmodsi4>:
 6c8:	a1 e2       	ldi	r26, 0x21	; 33
 6ca:	1a 2e       	mov	r1, r26
 6cc:	aa 1b       	sub	r26, r26
 6ce:	bb 1b       	sub	r27, r27
 6d0:	fd 01       	movw	r30, r26
 6d2:	0d c0       	rjmp	.+26     	; 0x6ee <__udivmodsi4_ep>

000006d4 <__udivmodsi4_loop>:
 6d4:	aa 1f       	adc	r26, r26
 6d6:	bb 1f       	adc	r27, r27
 6d8:	ee 1f       	adc	r30, r30
 6da:	ff 1f       	adc	r31, r31
 6dc:	a2 17       	cp	r26, r18
 6de:	b3 07       	cpc	r27, r19
 6e0:	e4 07       	cpc	r30, r20
 6e2:	f5 07       	cpc	r31, r21
 6e4:	20 f0       	brcs	.+8      	; 0x6ee <__udivmodsi4_ep>
 6e6:	a2 1b       	sub	r26, r18
 6e8:	b3 0b       	sbc	r27, r19
 6ea:	e4 0b       	sbc	r30, r20
 6ec:	f5 0b       	sbc	r31, r21

000006ee <__udivmodsi4_ep>:
 6ee:	66 1f       	adc	r22, r22
 6f0:	77 1f       	adc	r23, r23
 6f2:	88 1f       	adc	r24, r24
 6f4:	99 1f       	adc	r25, r25
 6f6:	1a 94       	dec	r1
 6f8:	69 f7       	brne	.-38     	; 0x6d4 <__udivmodsi4_loop>
 6fa:	60 95       	com	r22
 6fc:	70 95       	com	r23
 6fe:	80 95       	com	r24
 700:	90 95       	com	r25
 702:	9b 01       	movw	r18, r22
 704:	ac 01       	movw	r20, r24
 706:	bd 01       	movw	r22, r26
 708:	cf 01       	movw	r24, r30
 70a:	08 95       	ret

0000070c <_exit>:
 70c:	f8 94       	cli

0000070e <__stop_program>:
 70e:	ff cf       	rjmp	.-2      	; 0x70e <__stop_program>
