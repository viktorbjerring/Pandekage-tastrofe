
I2C_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000007d2  00000866  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800104  00800104  0000086a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000086a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a5d  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082b  00000000  00000000  000013cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000521  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  0000211c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058e  00000000  00000000  000021ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000193  00000000  00000000  0000277a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000290d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 ca 00 	jmp	0x194	; 0x194 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ed       	ldi	r30, 0xD2	; 210
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
  9e:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_MASTER_init>:
static uint8_t local_read_data = 0;
static bool data_ready_flag = false;

void I2C_MASTER_init(char bitRate, I2C_MASTER_prescale_t pre) 
{
	sei();			//Enable global interrupt
  a6:	78 94       	sei
	
	TWBR = bitRate;	//Set bitRate
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
	TWSR = ((pre & 0x01) << TWPS0) | ((pre & 0x02) << TWPS1);	//Set prescaler
  ac:	86 2f       	mov	r24, r22
  ae:	82 70       	andi	r24, 0x02	; 2
  b0:	88 0f       	add	r24, r24
  b2:	61 70       	andi	r22, 0x01	; 1
  b4:	68 2b       	or	r22, r24
  b6:	60 93 b9 00 	sts	0x00B9, r22	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	
	TWCR = (0 << TWEA) | (1 << TWEN);	//Setup TWI to send NACK when data is recieved and enable HW
  ba:	84 e0       	ldi	r24, 0x04	; 4
  bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  c0:	08 95       	ret

000000c2 <I2C_MASTER_sendData>:
}

void I2C_MASTER_sendData(char addr, I2C_commands_t cmd) 
{	
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
	//Check and lock mutex
	if (I2C_MASTER_hw_mutex)
  c6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <I2C_MASTER_hw_mutex>
  ca:	91 11       	cpse	r25, r1
  cc:	2f c0       	rjmp	.+94     	; 0x12c <I2C_MASTER_sendData+0x6a>
		return;
	
	I2C_MASTER_hw_mutex = true;
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <I2C_MASTER_hw_mutex>
	
	//Wait for start to transmit
	while (TWSR != 0x08);
	
	//Insert slave ADDR and write bit to data register
	TWDR = (addr << 1) + I2C_write; 
  d4:	88 0f       	add	r24, r24
	
	I2C_MASTER_hw_mutex = true;
	
startTransmit:
	//Start by sending a start condition
	TWCR = (1 << TWEN) | (0 << TWSTO) | (1 << TWSTA) | (1 << TWINT);
  d6:	ec eb       	ldi	r30, 0xBC	; 188
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	34 ea       	ldi	r19, 0xA4	; 164
	
	//Wait for start to transmit
	while (TWSR != 0x08);
  dc:	a9 eb       	ldi	r26, 0xB9	; 185
  de:	b0 e0       	ldi	r27, 0x00	; 0
	
	//Insert slave ADDR and write bit to data register
	TWDR = (addr << 1) + I2C_write; 
  e0:	cb eb       	ldi	r28, 0xBB	; 187
  e2:	d0 e0       	ldi	r29, 0x00	; 0
	
	//Send addr and W
	TWCR = (1 << TWEN) | (1 << TWINT);
  e4:	24 e8       	ldi	r18, 0x84	; 132
	
	I2C_MASTER_hw_mutex = true;
	
startTransmit:
	//Start by sending a start condition
	TWCR = (1 << TWEN) | (0 << TWSTO) | (1 << TWSTA) | (1 << TWINT);
  e6:	30 83       	st	Z, r19
	
	//Wait for start to transmit
	while (TWSR != 0x08);
  e8:	9c 91       	ld	r25, X
  ea:	98 30       	cpi	r25, 0x08	; 8
  ec:	e9 f7       	brne	.-6      	; 0xe8 <I2C_MASTER_sendData+0x26>
	
	//Insert slave ADDR and write bit to data register
	TWDR = (addr << 1) + I2C_write; 
  ee:	88 83       	st	Y, r24
	
	//Send addr and W
	TWCR = (1 << TWEN) | (1 << TWINT);
  f0:	20 83       	st	Z, r18
	
	//Wait for status
	while (!(TWCR & (1 << TWINT)));
  f2:	90 81       	ld	r25, Z
  f4:	99 23       	and	r25, r25
  f6:	ec f7       	brge	.-6      	; 0xf2 <I2C_MASTER_sendData+0x30>
	if (TWSR == 0x38)
  f8:	9c 91       	ld	r25, X
  fa:	98 33       	cpi	r25, 0x38	; 56
  fc:	a1 f3       	breq	.-24     	; 0xe6 <I2C_MASTER_sendData+0x24>
		goto startTransmit;	
	
sendData:
	//Make sure data can be written
	while(!(TWCR & (1 << TWINT)));
  fe:	ec eb       	ldi	r30, 0xBC	; 188
 100:	f0 e0       	ldi	r31, 0x00	; 0
	
	//Write data
	TWDR = cmd;
 102:	cb eb       	ldi	r28, 0xBB	; 187
 104:	d0 e0       	ldi	r29, 0x00	; 0
	TWCR = (1 << TWEN) | (1 << TWINT);
 106:	94 e8       	ldi	r25, 0x84	; 132
	
	//Wait for status
	while (!(TWCR & (1 << TWINT)));
	if (TWSR == 0x38)
 108:	a9 eb       	ldi	r26, 0xB9	; 185
 10a:	b0 e0       	ldi	r27, 0x00	; 0
	if (TWSR == 0x38)
		goto startTransmit;	
	
sendData:
	//Make sure data can be written
	while(!(TWCR & (1 << TWINT)));
 10c:	80 81       	ld	r24, Z
 10e:	88 23       	and	r24, r24
 110:	ec f7       	brge	.-6      	; 0x10c <I2C_MASTER_sendData+0x4a>
	
	//Write data
	TWDR = cmd;
 112:	68 83       	st	Y, r22
	TWCR = (1 << TWEN) | (1 << TWINT);
 114:	90 83       	st	Z, r25
	
	//Wait for status
	while (!(TWCR & (1 << TWINT)));
 116:	80 81       	ld	r24, Z
 118:	88 23       	and	r24, r24
 11a:	ec f7       	brge	.-6      	; 0x116 <I2C_MASTER_sendData+0x54>
	if (TWSR == 0x38)
 11c:	8c 91       	ld	r24, X
 11e:	88 33       	cpi	r24, 0x38	; 56
 120:	a9 f3       	breq	.-22     	; 0x10c <I2C_MASTER_sendData+0x4a>
		goto sendData;
	
	//Send stop	
	TWCR = (1 << TWEN) | (1 << TWSTO) | (0 << TWSTA) | (1 << TWINT);
 122:	84 e9       	ldi	r24, 0x94	; 148
 124:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	//Unlock mutex	
	I2C_MASTER_hw_mutex = false;
 128:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <I2C_MASTER_hw_mutex>
}
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <I2C_MASTER_readData>:

void I2C_MASTER_readData(char addr) {
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
	
	//Wait for start to transmit
	while (TWSR != 0x08);
	
	//Insert slave ADDR and read bit to data register
	TWDR = (addr << 1) + I2C_read;
 136:	88 0f       	add	r24, r24
 138:	8f 5f       	subi	r24, 0xFF	; 255
sendRead:
	//Lock mutex
	if (I2C_MASTER_hw_mutex)
		return;
		
	I2C_MASTER_hw_mutex = true;
 13a:	41 e0       	ldi	r20, 0x01	; 1

	//Start by sending a start condition
	TWCR = (1 << TWEN) | (0 << TWSTO) | (1 << TWSTA) | (1 << TWINT);
 13c:	ec eb       	ldi	r30, 0xBC	; 188
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	34 ea       	ldi	r19, 0xA4	; 164
	
	//Wait for start to transmit
	while (TWSR != 0x08);
 142:	a9 eb       	ldi	r26, 0xB9	; 185
 144:	b0 e0       	ldi	r27, 0x00	; 0
	
	//Insert slave ADDR and read bit to data register
	TWDR = (addr << 1) + I2C_read;
 146:	cb eb       	ldi	r28, 0xBB	; 187
 148:	d0 e0       	ldi	r29, 0x00	; 0
	
	//Send addr and R
	TWCR = (1 << TWEN) | (1 << TWINT);
 14a:	24 e8       	ldi	r18, 0x84	; 132

void I2C_MASTER_readData(char addr) {

sendRead:
	//Lock mutex
	if (I2C_MASTER_hw_mutex)
 14c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <I2C_MASTER_hw_mutex>
 150:	91 11       	cpse	r25, r1
 152:	11 c0       	rjmp	.+34     	; 0x176 <I2C_MASTER_readData+0x44>
		return;
		
	I2C_MASTER_hw_mutex = true;
 154:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <I2C_MASTER_hw_mutex>

	//Start by sending a start condition
	TWCR = (1 << TWEN) | (0 << TWSTO) | (1 << TWSTA) | (1 << TWINT);
 158:	30 83       	st	Z, r19
	
	//Wait for start to transmit
	while (TWSR != 0x08);
 15a:	9c 91       	ld	r25, X
 15c:	98 30       	cpi	r25, 0x08	; 8
 15e:	e9 f7       	brne	.-6      	; 0x15a <I2C_MASTER_readData+0x28>
	
	//Insert slave ADDR and read bit to data register
	TWDR = (addr << 1) + I2C_read;
 160:	88 83       	st	Y, r24
	
	//Send addr and R
	TWCR = (1 << TWEN) | (1 << TWINT);
 162:	20 83       	st	Z, r18
	
	while (!(TWCR & (1 << TWINT)));
 164:	90 81       	ld	r25, Z
 166:	99 23       	and	r25, r25
 168:	ec f7       	brge	.-6      	; 0x164 <I2C_MASTER_readData+0x32>
	if (TWSR == 0x38)
 16a:	9c 91       	ld	r25, X
 16c:	98 33       	cpi	r25, 0x38	; 56
 16e:	71 f3       	breq	.-36     	; 0x14c <I2C_MASTER_readData+0x1a>
		goto sendRead;
		
	//Enable read interrupt, so CPU can do other stuff
	TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT);
 170:	85 e8       	ldi	r24, 0x85	; 133
 172:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	//Do NOT unlock mutex before data is read
	
}
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <I2C_MASTER_checkData>:

bool I2C_MASTER_checkData() {
	return data_ready_flag;
}
 17c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 180:	08 95       	ret

00000182 <I2C_MASTER_getData>:
	//Do NOT unlock mutex before data is read
	
}

bool I2C_MASTER_checkData() {
	return data_ready_flag;
 182:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
}

char I2C_MASTER_getData() {
	
	//Block if no data
	while(!I2C_MASTER_checkData());
 186:	88 23       	and	r24, r24
 188:	f1 f3       	breq	.-4      	; 0x186 <I2C_MASTER_getData+0x4>
	
	//Update status
	data_ready_flag = false;
 18a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
	
	//Return data
	return local_read_data;
}
 18e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <local_read_data>
 192:	08 95       	ret

00000194 <__vector_24>:

//Read data from TWI
ISR(TWI_vect) {
 194:	1f 92       	push	r1
 196:	0f 92       	push	r0
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	0f 92       	push	r0
 19c:	11 24       	eor	r1, r1
 19e:	8f 93       	push	r24
	
	//Save data
	local_read_data = TWDR;
 1a0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 1a4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <local_read_data>
	
	//Set flag
	data_ready_flag = true;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	
	//Send stop and stop interrupts
	TWCR = (1 << TWEN) | (0 << TWIE) | (1 << TWSTO) | (0 << TWSTA) | (1 << TWINT);
 1ae:	84 e9       	ldi	r24, 0x94	; 148
 1b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	//Unlock mutex from read
	I2C_MASTER_hw_mutex = false;
 1b4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <I2C_MASTER_hw_mutex>
	
 1b8:	8f 91       	pop	r24
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <main>:


int main(void)
{
	//Init master clock to 250 kHz
	I2C_MASTER_init(4U, I2C_MASTER_PRESCALE_1);
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	84 e0       	ldi	r24, 0x04	; 4
 1c8:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_MASTER_init>
		
		//Get data
		uint8_t dataRead = I2C_MASTER_getData();
		
		//Print data
		printf("%d", dataRead);
 1cc:	c0 e0       	ldi	r28, 0x00	; 0
 1ce:	d1 e0       	ldi	r29, 0x01	; 1
	
    /* Replace with your application code */
    while (1) 
    {
		//Send command
		I2C_MASTER_sendData(I2C_SLAVE_ADDR, PING);
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 61 00 	call	0xc2	; 0xc2 <I2C_MASTER_sendData>
		
		//Send read to slace
		I2C_MASTER_readData(I2C_SLAVE_ADDR);
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	0e 94 99 00 	call	0x132	; 0x132 <I2C_MASTER_readData>
		
		//Wait for data
		while(!I2C_MASTER_checkData());
 1de:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_MASTER_checkData>
 1e2:	88 23       	and	r24, r24
 1e4:	e1 f3       	breq	.-8      	; 0x1de <main+0x1a>
		
		//Get data
		uint8_t dataRead = I2C_MASTER_getData();
 1e6:	0e 94 c1 00 	call	0x182	; 0x182 <I2C_MASTER_getData>
		
		//Print data
		printf("%d", dataRead);
 1ea:	1f 92       	push	r1
 1ec:	8f 93       	push	r24
 1ee:	df 93       	push	r29
 1f0:	cf 93       	push	r28
 1f2:	0e 94 09 01 	call	0x212	; 0x212 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	9f e3       	ldi	r25, 0x3F	; 63
 1f8:	2d e0       	ldi	r18, 0x0D	; 13
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	91 50       	subi	r25, 0x01	; 1
 1fe:	20 40       	sbci	r18, 0x00	; 0
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <main+0x38>
 204:	00 c0       	rjmp	.+0      	; 0x206 <main+0x42>
 206:	00 00       	nop
 208:	0f 90       	pop	r0
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	df cf       	rjmp	.-66     	; 0x1d0 <main+0xc>

00000212 <printf>:
 212:	a0 e0       	ldi	r26, 0x00	; 0
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	ef e0       	ldi	r30, 0x0F	; 15
 218:	f1 e0       	ldi	r31, 0x01	; 1
 21a:	0c 94 c0 03 	jmp	0x780	; 0x780 <__prologue_saves__+0x20>
 21e:	ae 01       	movw	r20, r28
 220:	4b 5f       	subi	r20, 0xFB	; 251
 222:	5f 4f       	sbci	r21, 0xFF	; 255
 224:	fa 01       	movw	r30, r20
 226:	61 91       	ld	r22, Z+
 228:	71 91       	ld	r23, Z+
 22a:	af 01       	movw	r20, r30
 22c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__iob+0x2>
 230:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__iob+0x3>
 234:	0e 94 1f 01 	call	0x23e	; 0x23e <vfprintf>
 238:	e2 e0       	ldi	r30, 0x02	; 2
 23a:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <__epilogue_restores__+0x20>

0000023e <vfprintf>:
 23e:	ab e0       	ldi	r26, 0x0B	; 11
 240:	b0 e0       	ldi	r27, 0x00	; 0
 242:	e5 e2       	ldi	r30, 0x25	; 37
 244:	f1 e0       	ldi	r31, 0x01	; 1
 246:	0c 94 b0 03 	jmp	0x760	; 0x760 <__prologue_saves__>
 24a:	6c 01       	movw	r12, r24
 24c:	7b 01       	movw	r14, r22
 24e:	8a 01       	movw	r16, r20
 250:	fc 01       	movw	r30, r24
 252:	17 82       	std	Z+7, r1	; 0x07
 254:	16 82       	std	Z+6, r1	; 0x06
 256:	83 81       	ldd	r24, Z+3	; 0x03
 258:	81 ff       	sbrs	r24, 1
 25a:	cc c1       	rjmp	.+920    	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 25c:	ce 01       	movw	r24, r28
 25e:	01 96       	adiw	r24, 0x01	; 1
 260:	3c 01       	movw	r6, r24
 262:	f6 01       	movw	r30, r12
 264:	93 81       	ldd	r25, Z+3	; 0x03
 266:	f7 01       	movw	r30, r14
 268:	93 fd       	sbrc	r25, 3
 26a:	85 91       	lpm	r24, Z+
 26c:	93 ff       	sbrs	r25, 3
 26e:	81 91       	ld	r24, Z+
 270:	7f 01       	movw	r14, r30
 272:	88 23       	and	r24, r24
 274:	09 f4       	brne	.+2      	; 0x278 <vfprintf+0x3a>
 276:	ba c1       	rjmp	.+884    	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 278:	85 32       	cpi	r24, 0x25	; 37
 27a:	39 f4       	brne	.+14     	; 0x28a <vfprintf+0x4c>
 27c:	93 fd       	sbrc	r25, 3
 27e:	85 91       	lpm	r24, Z+
 280:	93 ff       	sbrs	r25, 3
 282:	81 91       	ld	r24, Z+
 284:	7f 01       	movw	r14, r30
 286:	85 32       	cpi	r24, 0x25	; 37
 288:	29 f4       	brne	.+10     	; 0x294 <vfprintf+0x56>
 28a:	b6 01       	movw	r22, r12
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 16 03 	call	0x62c	; 0x62c <fputc>
 292:	e7 cf       	rjmp	.-50     	; 0x262 <vfprintf+0x24>
 294:	91 2c       	mov	r9, r1
 296:	21 2c       	mov	r2, r1
 298:	31 2c       	mov	r3, r1
 29a:	ff e1       	ldi	r31, 0x1F	; 31
 29c:	f3 15       	cp	r31, r3
 29e:	d8 f0       	brcs	.+54     	; 0x2d6 <vfprintf+0x98>
 2a0:	8b 32       	cpi	r24, 0x2B	; 43
 2a2:	79 f0       	breq	.+30     	; 0x2c2 <vfprintf+0x84>
 2a4:	38 f4       	brcc	.+14     	; 0x2b4 <vfprintf+0x76>
 2a6:	80 32       	cpi	r24, 0x20	; 32
 2a8:	79 f0       	breq	.+30     	; 0x2c8 <vfprintf+0x8a>
 2aa:	83 32       	cpi	r24, 0x23	; 35
 2ac:	a1 f4       	brne	.+40     	; 0x2d6 <vfprintf+0x98>
 2ae:	23 2d       	mov	r18, r3
 2b0:	20 61       	ori	r18, 0x10	; 16
 2b2:	1d c0       	rjmp	.+58     	; 0x2ee <vfprintf+0xb0>
 2b4:	8d 32       	cpi	r24, 0x2D	; 45
 2b6:	61 f0       	breq	.+24     	; 0x2d0 <vfprintf+0x92>
 2b8:	80 33       	cpi	r24, 0x30	; 48
 2ba:	69 f4       	brne	.+26     	; 0x2d6 <vfprintf+0x98>
 2bc:	23 2d       	mov	r18, r3
 2be:	21 60       	ori	r18, 0x01	; 1
 2c0:	16 c0       	rjmp	.+44     	; 0x2ee <vfprintf+0xb0>
 2c2:	83 2d       	mov	r24, r3
 2c4:	82 60       	ori	r24, 0x02	; 2
 2c6:	38 2e       	mov	r3, r24
 2c8:	e3 2d       	mov	r30, r3
 2ca:	e4 60       	ori	r30, 0x04	; 4
 2cc:	3e 2e       	mov	r3, r30
 2ce:	2a c0       	rjmp	.+84     	; 0x324 <vfprintf+0xe6>
 2d0:	f3 2d       	mov	r31, r3
 2d2:	f8 60       	ori	r31, 0x08	; 8
 2d4:	1d c0       	rjmp	.+58     	; 0x310 <vfprintf+0xd2>
 2d6:	37 fc       	sbrc	r3, 7
 2d8:	2d c0       	rjmp	.+90     	; 0x334 <vfprintf+0xf6>
 2da:	20 ed       	ldi	r18, 0xD0	; 208
 2dc:	28 0f       	add	r18, r24
 2de:	2a 30       	cpi	r18, 0x0A	; 10
 2e0:	40 f0       	brcs	.+16     	; 0x2f2 <vfprintf+0xb4>
 2e2:	8e 32       	cpi	r24, 0x2E	; 46
 2e4:	b9 f4       	brne	.+46     	; 0x314 <vfprintf+0xd6>
 2e6:	36 fc       	sbrc	r3, 6
 2e8:	81 c1       	rjmp	.+770    	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 2ea:	23 2d       	mov	r18, r3
 2ec:	20 64       	ori	r18, 0x40	; 64
 2ee:	32 2e       	mov	r3, r18
 2f0:	19 c0       	rjmp	.+50     	; 0x324 <vfprintf+0xe6>
 2f2:	36 fe       	sbrs	r3, 6
 2f4:	06 c0       	rjmp	.+12     	; 0x302 <vfprintf+0xc4>
 2f6:	8a e0       	ldi	r24, 0x0A	; 10
 2f8:	98 9e       	mul	r9, r24
 2fa:	20 0d       	add	r18, r0
 2fc:	11 24       	eor	r1, r1
 2fe:	92 2e       	mov	r9, r18
 300:	11 c0       	rjmp	.+34     	; 0x324 <vfprintf+0xe6>
 302:	ea e0       	ldi	r30, 0x0A	; 10
 304:	2e 9e       	mul	r2, r30
 306:	20 0d       	add	r18, r0
 308:	11 24       	eor	r1, r1
 30a:	22 2e       	mov	r2, r18
 30c:	f3 2d       	mov	r31, r3
 30e:	f0 62       	ori	r31, 0x20	; 32
 310:	3f 2e       	mov	r3, r31
 312:	08 c0       	rjmp	.+16     	; 0x324 <vfprintf+0xe6>
 314:	8c 36       	cpi	r24, 0x6C	; 108
 316:	21 f4       	brne	.+8      	; 0x320 <vfprintf+0xe2>
 318:	83 2d       	mov	r24, r3
 31a:	80 68       	ori	r24, 0x80	; 128
 31c:	38 2e       	mov	r3, r24
 31e:	02 c0       	rjmp	.+4      	; 0x324 <vfprintf+0xe6>
 320:	88 36       	cpi	r24, 0x68	; 104
 322:	41 f4       	brne	.+16     	; 0x334 <vfprintf+0xf6>
 324:	f7 01       	movw	r30, r14
 326:	93 fd       	sbrc	r25, 3
 328:	85 91       	lpm	r24, Z+
 32a:	93 ff       	sbrs	r25, 3
 32c:	81 91       	ld	r24, Z+
 32e:	7f 01       	movw	r14, r30
 330:	81 11       	cpse	r24, r1
 332:	b3 cf       	rjmp	.-154    	; 0x29a <vfprintf+0x5c>
 334:	98 2f       	mov	r25, r24
 336:	9f 7d       	andi	r25, 0xDF	; 223
 338:	95 54       	subi	r25, 0x45	; 69
 33a:	93 30       	cpi	r25, 0x03	; 3
 33c:	28 f4       	brcc	.+10     	; 0x348 <vfprintf+0x10a>
 33e:	0c 5f       	subi	r16, 0xFC	; 252
 340:	1f 4f       	sbci	r17, 0xFF	; 255
 342:	9f e3       	ldi	r25, 0x3F	; 63
 344:	99 83       	std	Y+1, r25	; 0x01
 346:	0d c0       	rjmp	.+26     	; 0x362 <vfprintf+0x124>
 348:	83 36       	cpi	r24, 0x63	; 99
 34a:	31 f0       	breq	.+12     	; 0x358 <vfprintf+0x11a>
 34c:	83 37       	cpi	r24, 0x73	; 115
 34e:	71 f0       	breq	.+28     	; 0x36c <vfprintf+0x12e>
 350:	83 35       	cpi	r24, 0x53	; 83
 352:	09 f0       	breq	.+2      	; 0x356 <vfprintf+0x118>
 354:	59 c0       	rjmp	.+178    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 356:	21 c0       	rjmp	.+66     	; 0x39a <vfprintf+0x15c>
 358:	f8 01       	movw	r30, r16
 35a:	80 81       	ld	r24, Z
 35c:	89 83       	std	Y+1, r24	; 0x01
 35e:	0e 5f       	subi	r16, 0xFE	; 254
 360:	1f 4f       	sbci	r17, 0xFF	; 255
 362:	88 24       	eor	r8, r8
 364:	83 94       	inc	r8
 366:	91 2c       	mov	r9, r1
 368:	53 01       	movw	r10, r6
 36a:	13 c0       	rjmp	.+38     	; 0x392 <vfprintf+0x154>
 36c:	28 01       	movw	r4, r16
 36e:	f2 e0       	ldi	r31, 0x02	; 2
 370:	4f 0e       	add	r4, r31
 372:	51 1c       	adc	r5, r1
 374:	f8 01       	movw	r30, r16
 376:	a0 80       	ld	r10, Z
 378:	b1 80       	ldd	r11, Z+1	; 0x01
 37a:	36 fe       	sbrs	r3, 6
 37c:	03 c0       	rjmp	.+6      	; 0x384 <vfprintf+0x146>
 37e:	69 2d       	mov	r22, r9
 380:	70 e0       	ldi	r23, 0x00	; 0
 382:	02 c0       	rjmp	.+4      	; 0x388 <vfprintf+0x14a>
 384:	6f ef       	ldi	r22, 0xFF	; 255
 386:	7f ef       	ldi	r23, 0xFF	; 255
 388:	c5 01       	movw	r24, r10
 38a:	0e 94 0b 03 	call	0x616	; 0x616 <strnlen>
 38e:	4c 01       	movw	r8, r24
 390:	82 01       	movw	r16, r4
 392:	f3 2d       	mov	r31, r3
 394:	ff 77       	andi	r31, 0x7F	; 127
 396:	3f 2e       	mov	r3, r31
 398:	16 c0       	rjmp	.+44     	; 0x3c6 <vfprintf+0x188>
 39a:	28 01       	movw	r4, r16
 39c:	22 e0       	ldi	r18, 0x02	; 2
 39e:	42 0e       	add	r4, r18
 3a0:	51 1c       	adc	r5, r1
 3a2:	f8 01       	movw	r30, r16
 3a4:	a0 80       	ld	r10, Z
 3a6:	b1 80       	ldd	r11, Z+1	; 0x01
 3a8:	36 fe       	sbrs	r3, 6
 3aa:	03 c0       	rjmp	.+6      	; 0x3b2 <vfprintf+0x174>
 3ac:	69 2d       	mov	r22, r9
 3ae:	70 e0       	ldi	r23, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <vfprintf+0x178>
 3b2:	6f ef       	ldi	r22, 0xFF	; 255
 3b4:	7f ef       	ldi	r23, 0xFF	; 255
 3b6:	c5 01       	movw	r24, r10
 3b8:	0e 94 00 03 	call	0x600	; 0x600 <strnlen_P>
 3bc:	4c 01       	movw	r8, r24
 3be:	f3 2d       	mov	r31, r3
 3c0:	f0 68       	ori	r31, 0x80	; 128
 3c2:	3f 2e       	mov	r3, r31
 3c4:	82 01       	movw	r16, r4
 3c6:	33 fc       	sbrc	r3, 3
 3c8:	1b c0       	rjmp	.+54     	; 0x400 <__LOCK_REGION_LENGTH__>
 3ca:	82 2d       	mov	r24, r2
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	88 16       	cp	r8, r24
 3d0:	99 06       	cpc	r9, r25
 3d2:	b0 f4       	brcc	.+44     	; 0x400 <__LOCK_REGION_LENGTH__>
 3d4:	b6 01       	movw	r22, r12
 3d6:	80 e2       	ldi	r24, 0x20	; 32
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 16 03 	call	0x62c	; 0x62c <fputc>
 3de:	2a 94       	dec	r2
 3e0:	f4 cf       	rjmp	.-24     	; 0x3ca <vfprintf+0x18c>
 3e2:	f5 01       	movw	r30, r10
 3e4:	37 fc       	sbrc	r3, 7
 3e6:	85 91       	lpm	r24, Z+
 3e8:	37 fe       	sbrs	r3, 7
 3ea:	81 91       	ld	r24, Z+
 3ec:	5f 01       	movw	r10, r30
 3ee:	b6 01       	movw	r22, r12
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 16 03 	call	0x62c	; 0x62c <fputc>
 3f6:	21 10       	cpse	r2, r1
 3f8:	2a 94       	dec	r2
 3fa:	21 e0       	ldi	r18, 0x01	; 1
 3fc:	82 1a       	sub	r8, r18
 3fe:	91 08       	sbc	r9, r1
 400:	81 14       	cp	r8, r1
 402:	91 04       	cpc	r9, r1
 404:	71 f7       	brne	.-36     	; 0x3e2 <vfprintf+0x1a4>
 406:	e8 c0       	rjmp	.+464    	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 408:	84 36       	cpi	r24, 0x64	; 100
 40a:	11 f0       	breq	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40c:	89 36       	cpi	r24, 0x69	; 105
 40e:	41 f5       	brne	.+80     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 410:	f8 01       	movw	r30, r16
 412:	37 fe       	sbrs	r3, 7
 414:	07 c0       	rjmp	.+14     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 416:	60 81       	ld	r22, Z
 418:	71 81       	ldd	r23, Z+1	; 0x01
 41a:	82 81       	ldd	r24, Z+2	; 0x02
 41c:	93 81       	ldd	r25, Z+3	; 0x03
 41e:	0c 5f       	subi	r16, 0xFC	; 252
 420:	1f 4f       	sbci	r17, 0xFF	; 255
 422:	08 c0       	rjmp	.+16     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 424:	60 81       	ld	r22, Z
 426:	71 81       	ldd	r23, Z+1	; 0x01
 428:	07 2e       	mov	r0, r23
 42a:	00 0c       	add	r0, r0
 42c:	88 0b       	sbc	r24, r24
 42e:	99 0b       	sbc	r25, r25
 430:	0e 5f       	subi	r16, 0xFE	; 254
 432:	1f 4f       	sbci	r17, 0xFF	; 255
 434:	f3 2d       	mov	r31, r3
 436:	ff 76       	andi	r31, 0x6F	; 111
 438:	3f 2e       	mov	r3, r31
 43a:	97 ff       	sbrs	r25, 7
 43c:	09 c0       	rjmp	.+18     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 43e:	90 95       	com	r25
 440:	80 95       	com	r24
 442:	70 95       	com	r23
 444:	61 95       	neg	r22
 446:	7f 4f       	sbci	r23, 0xFF	; 255
 448:	8f 4f       	sbci	r24, 0xFF	; 255
 44a:	9f 4f       	sbci	r25, 0xFF	; 255
 44c:	f0 68       	ori	r31, 0x80	; 128
 44e:	3f 2e       	mov	r3, r31
 450:	2a e0       	ldi	r18, 0x0A	; 10
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	a3 01       	movw	r20, r6
 456:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__ultoa_invert>
 45a:	88 2e       	mov	r8, r24
 45c:	86 18       	sub	r8, r6
 45e:	45 c0       	rjmp	.+138    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 460:	85 37       	cpi	r24, 0x75	; 117
 462:	31 f4       	brne	.+12     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 464:	23 2d       	mov	r18, r3
 466:	2f 7e       	andi	r18, 0xEF	; 239
 468:	b2 2e       	mov	r11, r18
 46a:	2a e0       	ldi	r18, 0x0A	; 10
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	25 c0       	rjmp	.+74     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 470:	93 2d       	mov	r25, r3
 472:	99 7f       	andi	r25, 0xF9	; 249
 474:	b9 2e       	mov	r11, r25
 476:	8f 36       	cpi	r24, 0x6F	; 111
 478:	c1 f0       	breq	.+48     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 47a:	18 f4       	brcc	.+6      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 47c:	88 35       	cpi	r24, 0x58	; 88
 47e:	79 f0       	breq	.+30     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 480:	b5 c0       	rjmp	.+362    	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 482:	80 37       	cpi	r24, 0x70	; 112
 484:	19 f0       	breq	.+6      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 486:	88 37       	cpi	r24, 0x78	; 120
 488:	21 f0       	breq	.+8      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 48a:	b0 c0       	rjmp	.+352    	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 48c:	e9 2f       	mov	r30, r25
 48e:	e0 61       	ori	r30, 0x10	; 16
 490:	be 2e       	mov	r11, r30
 492:	b4 fe       	sbrs	r11, 4
 494:	0d c0       	rjmp	.+26     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 496:	fb 2d       	mov	r31, r11
 498:	f4 60       	ori	r31, 0x04	; 4
 49a:	bf 2e       	mov	r11, r31
 49c:	09 c0       	rjmp	.+18     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 49e:	34 fe       	sbrs	r3, 4
 4a0:	0a c0       	rjmp	.+20     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4a2:	29 2f       	mov	r18, r25
 4a4:	26 60       	ori	r18, 0x06	; 6
 4a6:	b2 2e       	mov	r11, r18
 4a8:	06 c0       	rjmp	.+12     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4aa:	28 e0       	ldi	r18, 0x08	; 8
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	05 c0       	rjmp	.+10     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4b0:	20 e1       	ldi	r18, 0x10	; 16
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4b6:	20 e1       	ldi	r18, 0x10	; 16
 4b8:	32 e0       	ldi	r19, 0x02	; 2
 4ba:	f8 01       	movw	r30, r16
 4bc:	b7 fe       	sbrs	r11, 7
 4be:	07 c0       	rjmp	.+14     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4c0:	60 81       	ld	r22, Z
 4c2:	71 81       	ldd	r23, Z+1	; 0x01
 4c4:	82 81       	ldd	r24, Z+2	; 0x02
 4c6:	93 81       	ldd	r25, Z+3	; 0x03
 4c8:	0c 5f       	subi	r16, 0xFC	; 252
 4ca:	1f 4f       	sbci	r17, 0xFF	; 255
 4cc:	06 c0       	rjmp	.+12     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4ce:	60 81       	ld	r22, Z
 4d0:	71 81       	ldd	r23, Z+1	; 0x01
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 5f       	subi	r16, 0xFE	; 254
 4d8:	1f 4f       	sbci	r17, 0xFF	; 255
 4da:	a3 01       	movw	r20, r6
 4dc:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__ultoa_invert>
 4e0:	88 2e       	mov	r8, r24
 4e2:	86 18       	sub	r8, r6
 4e4:	fb 2d       	mov	r31, r11
 4e6:	ff 77       	andi	r31, 0x7F	; 127
 4e8:	3f 2e       	mov	r3, r31
 4ea:	36 fe       	sbrs	r3, 6
 4ec:	0d c0       	rjmp	.+26     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 4ee:	23 2d       	mov	r18, r3
 4f0:	2e 7f       	andi	r18, 0xFE	; 254
 4f2:	a2 2e       	mov	r10, r18
 4f4:	89 14       	cp	r8, r9
 4f6:	58 f4       	brcc	.+22     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 4f8:	34 fe       	sbrs	r3, 4
 4fa:	0b c0       	rjmp	.+22     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 4fc:	32 fc       	sbrc	r3, 2
 4fe:	09 c0       	rjmp	.+18     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 500:	83 2d       	mov	r24, r3
 502:	8e 7e       	andi	r24, 0xEE	; 238
 504:	a8 2e       	mov	r10, r24
 506:	05 c0       	rjmp	.+10     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 508:	b8 2c       	mov	r11, r8
 50a:	a3 2c       	mov	r10, r3
 50c:	03 c0       	rjmp	.+6      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 50e:	b8 2c       	mov	r11, r8
 510:	01 c0       	rjmp	.+2      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 512:	b9 2c       	mov	r11, r9
 514:	a4 fe       	sbrs	r10, 4
 516:	0f c0       	rjmp	.+30     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 518:	fe 01       	movw	r30, r28
 51a:	e8 0d       	add	r30, r8
 51c:	f1 1d       	adc	r31, r1
 51e:	80 81       	ld	r24, Z
 520:	80 33       	cpi	r24, 0x30	; 48
 522:	21 f4       	brne	.+8      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 524:	9a 2d       	mov	r25, r10
 526:	99 7e       	andi	r25, 0xE9	; 233
 528:	a9 2e       	mov	r10, r25
 52a:	09 c0       	rjmp	.+18     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 52c:	a2 fe       	sbrs	r10, 2
 52e:	06 c0       	rjmp	.+12     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 530:	b3 94       	inc	r11
 532:	b3 94       	inc	r11
 534:	04 c0       	rjmp	.+8      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 536:	8a 2d       	mov	r24, r10
 538:	86 78       	andi	r24, 0x86	; 134
 53a:	09 f0       	breq	.+2      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 53c:	b3 94       	inc	r11
 53e:	a3 fc       	sbrc	r10, 3
 540:	11 c0       	rjmp	.+34     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 542:	a0 fe       	sbrs	r10, 0
 544:	06 c0       	rjmp	.+12     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 546:	b2 14       	cp	r11, r2
 548:	88 f4       	brcc	.+34     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 54a:	28 0c       	add	r2, r8
 54c:	92 2c       	mov	r9, r2
 54e:	9b 18       	sub	r9, r11
 550:	0e c0       	rjmp	.+28     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 552:	b2 14       	cp	r11, r2
 554:	60 f4       	brcc	.+24     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 556:	b6 01       	movw	r22, r12
 558:	80 e2       	ldi	r24, 0x20	; 32
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	0e 94 16 03 	call	0x62c	; 0x62c <fputc>
 560:	b3 94       	inc	r11
 562:	f7 cf       	rjmp	.-18     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 564:	b2 14       	cp	r11, r2
 566:	18 f4       	brcc	.+6      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 568:	2b 18       	sub	r2, r11
 56a:	02 c0       	rjmp	.+4      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
 56c:	98 2c       	mov	r9, r8
 56e:	21 2c       	mov	r2, r1
 570:	a4 fe       	sbrs	r10, 4
 572:	10 c0       	rjmp	.+32     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
 574:	b6 01       	movw	r22, r12
 576:	80 e3       	ldi	r24, 0x30	; 48
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	0e 94 16 03 	call	0x62c	; 0x62c <fputc>
 57e:	a2 fe       	sbrs	r10, 2
 580:	17 c0       	rjmp	.+46     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 582:	a1 fc       	sbrc	r10, 1
 584:	03 c0       	rjmp	.+6      	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 586:	88 e7       	ldi	r24, 0x78	; 120
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	02 c0       	rjmp	.+4      	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
 58c:	88 e5       	ldi	r24, 0x58	; 88
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	b6 01       	movw	r22, r12
 592:	0c c0       	rjmp	.+24     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 594:	8a 2d       	mov	r24, r10
 596:	86 78       	andi	r24, 0x86	; 134
 598:	59 f0       	breq	.+22     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 59a:	a1 fe       	sbrs	r10, 1
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 59e:	8b e2       	ldi	r24, 0x2B	; 43
 5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 5a2:	80 e2       	ldi	r24, 0x20	; 32
 5a4:	a7 fc       	sbrc	r10, 7
 5a6:	8d e2       	ldi	r24, 0x2D	; 45
 5a8:	b6 01       	movw	r22, r12
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	0e 94 16 03 	call	0x62c	; 0x62c <fputc>
 5b0:	89 14       	cp	r8, r9
 5b2:	38 f4       	brcc	.+14     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 5b4:	b6 01       	movw	r22, r12
 5b6:	80 e3       	ldi	r24, 0x30	; 48
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	0e 94 16 03 	call	0x62c	; 0x62c <fputc>
 5be:	9a 94       	dec	r9
 5c0:	f7 cf       	rjmp	.-18     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 5c2:	8a 94       	dec	r8
 5c4:	f3 01       	movw	r30, r6
 5c6:	e8 0d       	add	r30, r8
 5c8:	f1 1d       	adc	r31, r1
 5ca:	80 81       	ld	r24, Z
 5cc:	b6 01       	movw	r22, r12
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	0e 94 16 03 	call	0x62c	; 0x62c <fputc>
 5d4:	81 10       	cpse	r8, r1
 5d6:	f5 cf       	rjmp	.-22     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 5d8:	22 20       	and	r2, r2
 5da:	09 f4       	brne	.+2      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
 5dc:	42 ce       	rjmp	.-892    	; 0x262 <vfprintf+0x24>
 5de:	b6 01       	movw	r22, r12
 5e0:	80 e2       	ldi	r24, 0x20	; 32
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	0e 94 16 03 	call	0x62c	; 0x62c <fputc>
 5e8:	2a 94       	dec	r2
 5ea:	f6 cf       	rjmp	.-20     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 5ec:	f6 01       	movw	r30, r12
 5ee:	86 81       	ldd	r24, Z+6	; 0x06
 5f0:	97 81       	ldd	r25, Z+7	; 0x07
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
 5f4:	8f ef       	ldi	r24, 0xFF	; 255
 5f6:	9f ef       	ldi	r25, 0xFF	; 255
 5f8:	2b 96       	adiw	r28, 0x0b	; 11
 5fa:	e2 e1       	ldi	r30, 0x12	; 18
 5fc:	0c 94 cc 03 	jmp	0x798	; 0x798 <__epilogue_restores__>

00000600 <strnlen_P>:
 600:	fc 01       	movw	r30, r24
 602:	05 90       	lpm	r0, Z+
 604:	61 50       	subi	r22, 0x01	; 1
 606:	70 40       	sbci	r23, 0x00	; 0
 608:	01 10       	cpse	r0, r1
 60a:	d8 f7       	brcc	.-10     	; 0x602 <strnlen_P+0x2>
 60c:	80 95       	com	r24
 60e:	90 95       	com	r25
 610:	8e 0f       	add	r24, r30
 612:	9f 1f       	adc	r25, r31
 614:	08 95       	ret

00000616 <strnlen>:
 616:	fc 01       	movw	r30, r24
 618:	61 50       	subi	r22, 0x01	; 1
 61a:	70 40       	sbci	r23, 0x00	; 0
 61c:	01 90       	ld	r0, Z+
 61e:	01 10       	cpse	r0, r1
 620:	d8 f7       	brcc	.-10     	; 0x618 <strnlen+0x2>
 622:	80 95       	com	r24
 624:	90 95       	com	r25
 626:	8e 0f       	add	r24, r30
 628:	9f 1f       	adc	r25, r31
 62a:	08 95       	ret

0000062c <fputc>:
 62c:	0f 93       	push	r16
 62e:	1f 93       	push	r17
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
 634:	fb 01       	movw	r30, r22
 636:	23 81       	ldd	r18, Z+3	; 0x03
 638:	21 fd       	sbrc	r18, 1
 63a:	03 c0       	rjmp	.+6      	; 0x642 <fputc+0x16>
 63c:	8f ef       	ldi	r24, 0xFF	; 255
 63e:	9f ef       	ldi	r25, 0xFF	; 255
 640:	2c c0       	rjmp	.+88     	; 0x69a <fputc+0x6e>
 642:	22 ff       	sbrs	r18, 2
 644:	16 c0       	rjmp	.+44     	; 0x672 <fputc+0x46>
 646:	46 81       	ldd	r20, Z+6	; 0x06
 648:	57 81       	ldd	r21, Z+7	; 0x07
 64a:	24 81       	ldd	r18, Z+4	; 0x04
 64c:	35 81       	ldd	r19, Z+5	; 0x05
 64e:	42 17       	cp	r20, r18
 650:	53 07       	cpc	r21, r19
 652:	44 f4       	brge	.+16     	; 0x664 <fputc+0x38>
 654:	a0 81       	ld	r26, Z
 656:	b1 81       	ldd	r27, Z+1	; 0x01
 658:	9d 01       	movw	r18, r26
 65a:	2f 5f       	subi	r18, 0xFF	; 255
 65c:	3f 4f       	sbci	r19, 0xFF	; 255
 65e:	31 83       	std	Z+1, r19	; 0x01
 660:	20 83       	st	Z, r18
 662:	8c 93       	st	X, r24
 664:	26 81       	ldd	r18, Z+6	; 0x06
 666:	37 81       	ldd	r19, Z+7	; 0x07
 668:	2f 5f       	subi	r18, 0xFF	; 255
 66a:	3f 4f       	sbci	r19, 0xFF	; 255
 66c:	37 83       	std	Z+7, r19	; 0x07
 66e:	26 83       	std	Z+6, r18	; 0x06
 670:	14 c0       	rjmp	.+40     	; 0x69a <fputc+0x6e>
 672:	8b 01       	movw	r16, r22
 674:	ec 01       	movw	r28, r24
 676:	fb 01       	movw	r30, r22
 678:	00 84       	ldd	r0, Z+8	; 0x08
 67a:	f1 85       	ldd	r31, Z+9	; 0x09
 67c:	e0 2d       	mov	r30, r0
 67e:	09 95       	icall
 680:	89 2b       	or	r24, r25
 682:	e1 f6       	brne	.-72     	; 0x63c <fputc+0x10>
 684:	d8 01       	movw	r26, r16
 686:	16 96       	adiw	r26, 0x06	; 6
 688:	8d 91       	ld	r24, X+
 68a:	9c 91       	ld	r25, X
 68c:	17 97       	sbiw	r26, 0x07	; 7
 68e:	01 96       	adiw	r24, 0x01	; 1
 690:	17 96       	adiw	r26, 0x07	; 7
 692:	9c 93       	st	X, r25
 694:	8e 93       	st	-X, r24
 696:	16 97       	sbiw	r26, 0x06	; 6
 698:	ce 01       	movw	r24, r28
 69a:	df 91       	pop	r29
 69c:	cf 91       	pop	r28
 69e:	1f 91       	pop	r17
 6a0:	0f 91       	pop	r16
 6a2:	08 95       	ret

000006a4 <__ultoa_invert>:
 6a4:	fa 01       	movw	r30, r20
 6a6:	aa 27       	eor	r26, r26
 6a8:	28 30       	cpi	r18, 0x08	; 8
 6aa:	51 f1       	breq	.+84     	; 0x700 <__ultoa_invert+0x5c>
 6ac:	20 31       	cpi	r18, 0x10	; 16
 6ae:	81 f1       	breq	.+96     	; 0x710 <__ultoa_invert+0x6c>
 6b0:	e8 94       	clt
 6b2:	6f 93       	push	r22
 6b4:	6e 7f       	andi	r22, 0xFE	; 254
 6b6:	6e 5f       	subi	r22, 0xFE	; 254
 6b8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ba:	8f 4f       	sbci	r24, 0xFF	; 255
 6bc:	9f 4f       	sbci	r25, 0xFF	; 255
 6be:	af 4f       	sbci	r26, 0xFF	; 255
 6c0:	b1 e0       	ldi	r27, 0x01	; 1
 6c2:	3e d0       	rcall	.+124    	; 0x740 <__ultoa_invert+0x9c>
 6c4:	b4 e0       	ldi	r27, 0x04	; 4
 6c6:	3c d0       	rcall	.+120    	; 0x740 <__ultoa_invert+0x9c>
 6c8:	67 0f       	add	r22, r23
 6ca:	78 1f       	adc	r23, r24
 6cc:	89 1f       	adc	r24, r25
 6ce:	9a 1f       	adc	r25, r26
 6d0:	a1 1d       	adc	r26, r1
 6d2:	68 0f       	add	r22, r24
 6d4:	79 1f       	adc	r23, r25
 6d6:	8a 1f       	adc	r24, r26
 6d8:	91 1d       	adc	r25, r1
 6da:	a1 1d       	adc	r26, r1
 6dc:	6a 0f       	add	r22, r26
 6de:	71 1d       	adc	r23, r1
 6e0:	81 1d       	adc	r24, r1
 6e2:	91 1d       	adc	r25, r1
 6e4:	a1 1d       	adc	r26, r1
 6e6:	20 d0       	rcall	.+64     	; 0x728 <__ultoa_invert+0x84>
 6e8:	09 f4       	brne	.+2      	; 0x6ec <__ultoa_invert+0x48>
 6ea:	68 94       	set
 6ec:	3f 91       	pop	r19
 6ee:	2a e0       	ldi	r18, 0x0A	; 10
 6f0:	26 9f       	mul	r18, r22
 6f2:	11 24       	eor	r1, r1
 6f4:	30 19       	sub	r19, r0
 6f6:	30 5d       	subi	r19, 0xD0	; 208
 6f8:	31 93       	st	Z+, r19
 6fa:	de f6       	brtc	.-74     	; 0x6b2 <__ultoa_invert+0xe>
 6fc:	cf 01       	movw	r24, r30
 6fe:	08 95       	ret
 700:	46 2f       	mov	r20, r22
 702:	47 70       	andi	r20, 0x07	; 7
 704:	40 5d       	subi	r20, 0xD0	; 208
 706:	41 93       	st	Z+, r20
 708:	b3 e0       	ldi	r27, 0x03	; 3
 70a:	0f d0       	rcall	.+30     	; 0x72a <__ultoa_invert+0x86>
 70c:	c9 f7       	brne	.-14     	; 0x700 <__ultoa_invert+0x5c>
 70e:	f6 cf       	rjmp	.-20     	; 0x6fc <__ultoa_invert+0x58>
 710:	46 2f       	mov	r20, r22
 712:	4f 70       	andi	r20, 0x0F	; 15
 714:	40 5d       	subi	r20, 0xD0	; 208
 716:	4a 33       	cpi	r20, 0x3A	; 58
 718:	18 f0       	brcs	.+6      	; 0x720 <__ultoa_invert+0x7c>
 71a:	49 5d       	subi	r20, 0xD9	; 217
 71c:	31 fd       	sbrc	r19, 1
 71e:	40 52       	subi	r20, 0x20	; 32
 720:	41 93       	st	Z+, r20
 722:	02 d0       	rcall	.+4      	; 0x728 <__ultoa_invert+0x84>
 724:	a9 f7       	brne	.-22     	; 0x710 <__ultoa_invert+0x6c>
 726:	ea cf       	rjmp	.-44     	; 0x6fc <__ultoa_invert+0x58>
 728:	b4 e0       	ldi	r27, 0x04	; 4
 72a:	a6 95       	lsr	r26
 72c:	97 95       	ror	r25
 72e:	87 95       	ror	r24
 730:	77 95       	ror	r23
 732:	67 95       	ror	r22
 734:	ba 95       	dec	r27
 736:	c9 f7       	brne	.-14     	; 0x72a <__ultoa_invert+0x86>
 738:	00 97       	sbiw	r24, 0x00	; 0
 73a:	61 05       	cpc	r22, r1
 73c:	71 05       	cpc	r23, r1
 73e:	08 95       	ret
 740:	9b 01       	movw	r18, r22
 742:	ac 01       	movw	r20, r24
 744:	0a 2e       	mov	r0, r26
 746:	06 94       	lsr	r0
 748:	57 95       	ror	r21
 74a:	47 95       	ror	r20
 74c:	37 95       	ror	r19
 74e:	27 95       	ror	r18
 750:	ba 95       	dec	r27
 752:	c9 f7       	brne	.-14     	; 0x746 <__ultoa_invert+0xa2>
 754:	62 0f       	add	r22, r18
 756:	73 1f       	adc	r23, r19
 758:	84 1f       	adc	r24, r20
 75a:	95 1f       	adc	r25, r21
 75c:	a0 1d       	adc	r26, r0
 75e:	08 95       	ret

00000760 <__prologue_saves__>:
 760:	2f 92       	push	r2
 762:	3f 92       	push	r3
 764:	4f 92       	push	r4
 766:	5f 92       	push	r5
 768:	6f 92       	push	r6
 76a:	7f 92       	push	r7
 76c:	8f 92       	push	r8
 76e:	9f 92       	push	r9
 770:	af 92       	push	r10
 772:	bf 92       	push	r11
 774:	cf 92       	push	r12
 776:	df 92       	push	r13
 778:	ef 92       	push	r14
 77a:	ff 92       	push	r15
 77c:	0f 93       	push	r16
 77e:	1f 93       	push	r17
 780:	cf 93       	push	r28
 782:	df 93       	push	r29
 784:	cd b7       	in	r28, 0x3d	; 61
 786:	de b7       	in	r29, 0x3e	; 62
 788:	ca 1b       	sub	r28, r26
 78a:	db 0b       	sbc	r29, r27
 78c:	0f b6       	in	r0, 0x3f	; 63
 78e:	f8 94       	cli
 790:	de bf       	out	0x3e, r29	; 62
 792:	0f be       	out	0x3f, r0	; 63
 794:	cd bf       	out	0x3d, r28	; 61
 796:	09 94       	ijmp

00000798 <__epilogue_restores__>:
 798:	2a 88       	ldd	r2, Y+18	; 0x12
 79a:	39 88       	ldd	r3, Y+17	; 0x11
 79c:	48 88       	ldd	r4, Y+16	; 0x10
 79e:	5f 84       	ldd	r5, Y+15	; 0x0f
 7a0:	6e 84       	ldd	r6, Y+14	; 0x0e
 7a2:	7d 84       	ldd	r7, Y+13	; 0x0d
 7a4:	8c 84       	ldd	r8, Y+12	; 0x0c
 7a6:	9b 84       	ldd	r9, Y+11	; 0x0b
 7a8:	aa 84       	ldd	r10, Y+10	; 0x0a
 7aa:	b9 84       	ldd	r11, Y+9	; 0x09
 7ac:	c8 84       	ldd	r12, Y+8	; 0x08
 7ae:	df 80       	ldd	r13, Y+7	; 0x07
 7b0:	ee 80       	ldd	r14, Y+6	; 0x06
 7b2:	fd 80       	ldd	r15, Y+5	; 0x05
 7b4:	0c 81       	ldd	r16, Y+4	; 0x04
 7b6:	1b 81       	ldd	r17, Y+3	; 0x03
 7b8:	aa 81       	ldd	r26, Y+2	; 0x02
 7ba:	b9 81       	ldd	r27, Y+1	; 0x01
 7bc:	ce 0f       	add	r28, r30
 7be:	d1 1d       	adc	r29, r1
 7c0:	0f b6       	in	r0, 0x3f	; 63
 7c2:	f8 94       	cli
 7c4:	de bf       	out	0x3e, r29	; 62
 7c6:	0f be       	out	0x3f, r0	; 63
 7c8:	cd bf       	out	0x3d, r28	; 61
 7ca:	ed 01       	movw	r28, r26
 7cc:	08 95       	ret

000007ce <_exit>:
 7ce:	f8 94       	cli

000007d0 <__stop_program>:
 7d0:	ff cf       	rjmp	.-2      	; 0x7d0 <__stop_program>
