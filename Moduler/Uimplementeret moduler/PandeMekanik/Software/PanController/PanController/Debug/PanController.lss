
PanController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000d48  00000dfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d48  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800102  00800102  00000dfe  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000dfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000e01  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e34  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000130  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000fd2  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000008a0  00000000  00000000  00001f76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000bab  00000000  00000000  00002816  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000374  00000000  00000000  000033c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000081e  00000000  00000000  00003738  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000064d  00000000  00000000  00003f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000108  00000000  00000000  000045a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 1a 02 	jmp	0x434	; 0x434 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 38 03 	jmp	0x670	; 0x670 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 11 04 	jmp	0x822	; 0x822 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 32       	cpi	r26, 0x24	; 36
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a8 04 	call	0x950	; 0x950 <main>
  9e:	0c 94 a2 06 	jmp	0xd44	; 0xd44 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_digital_comm>:
}

I2C_commands_t I2C_SLAVE_getData()
{
	return (I2C_commands_t)I2C_SLAVE_readFirst();
}
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	8e 7e       	andi	r24, 0xEE	; 238
  aa:	80 61       	ori	r24, 0x10	; 16
  ac:	84 b9       	out	0x04, r24	; 4
  ae:	2c 98       	cbi	0x05, 4	; 5
  b0:	e8 e6       	ldi	r30, 0x68	; 104
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 83       	st	Z, r24
  b8:	eb e6       	ldi	r30, 0x6B	; 107
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	80 83       	st	Z, r24
  c2:	08 95       	ret

000000c4 <pancakeDone>:
  c4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pancake_done>
  c8:	88 23       	and	r24, r24
  ca:	21 f0       	breq	.+8      	; 0xd4 <pancakeDone+0x10>
  cc:	2c 9a       	sbi	0x05, 4	; 5
  ce:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pancake_done>
  d2:	08 95       	ret
  d4:	2c 98       	cbi	0x05, 4	; 5
  d6:	08 95       	ret

000000d8 <__vector_3>:
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <init_regulation>:
  ec:	e4 e6       	ldi	r30, 0x64	; 100
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	8e 7f       	andi	r24, 0xFE	; 254
  f4:	80 83       	st	Z, r24
  f6:	87 b1       	in	r24, 0x07	; 7
  f8:	8c 7f       	andi	r24, 0xFC	; 252
  fa:	87 b9       	out	0x07, r24	; 7
  fc:	80 e4       	ldi	r24, 0x40	; 64
  fe:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
 102:	ea e7       	ldi	r30, 0x7A	; 122
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	8f 68       	ori	r24, 0x8F	; 143
 10a:	80 83       	st	Z, r24
 10c:	84 b1       	in	r24, 0x04	; 4
 10e:	86 60       	ori	r24, 0x06	; 6
 110:	84 b9       	out	0x04, r24	; 4
 112:	81 e1       	ldi	r24, 0x11	; 17
 114:	9a e7       	ldi	r25, 0x7A	; 122
 116:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 11a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 11e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 122:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 126:	a0 e8       	ldi	r26, 0x80	; 128
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	8c 91       	ld	r24, X
 12c:	80 6a       	ori	r24, 0xA0	; 160
 12e:	8c 93       	st	X, r24
 130:	80 81       	ld	r24, Z
 132:	80 64       	ori	r24, 0x40	; 64
 134:	80 83       	st	Z, r24
 136:	08 95       	ret

00000138 <setPWMLevel>:
 138:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <curr_pan>
 13c:	99 23       	and	r25, r25
 13e:	f9 f0       	breq	.+62     	; 0x17e <setPWMLevel+0x46>
 140:	85 36       	cpi	r24, 0x65	; 101
 142:	80 f4       	brcc	.+32     	; 0x164 <setPWMLevel+0x2c>
 144:	28 ec       	ldi	r18, 0xC8	; 200
 146:	3e ef       	ldi	r19, 0xFE	; 254
 148:	82 9f       	mul	r24, r18
 14a:	b0 01       	movw	r22, r0
 14c:	83 9f       	mul	r24, r19
 14e:	70 0d       	add	r23, r0
 150:	11 24       	eor	r1, r1
 152:	6f 5e       	subi	r22, 0xEF	; 239
 154:	75 48       	sbci	r23, 0x85	; 133
 156:	07 2e       	mov	r0, r23
 158:	00 0c       	add	r0, r0
 15a:	88 0b       	sbc	r24, r24
 15c:	99 0b       	sbc	r25, r25
 15e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__floatsisf>
 162:	04 c0       	rjmp	.+8      	; 0x16c <setPWMLevel+0x34>
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	84 e4       	ldi	r24, 0x44	; 68
 16a:	92 e4       	ldi	r25, 0x42	; 66
 16c:	0e 94 8d 05 	call	0xb1a	; 0xb1a <ceil>
 170:	0e 94 a4 05 	call	0xb48	; 0xb48 <__fixunssfsi>
 174:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 178:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 17c:	08 95       	ret
 17e:	85 36       	cpi	r24, 0x65	; 101
 180:	80 f4       	brcc	.+32     	; 0x1a2 <setPWMLevel+0x6a>
 182:	28 ec       	ldi	r18, 0xC8	; 200
 184:	3e ef       	ldi	r19, 0xFE	; 254
 186:	82 9f       	mul	r24, r18
 188:	b0 01       	movw	r22, r0
 18a:	83 9f       	mul	r24, r19
 18c:	70 0d       	add	r23, r0
 18e:	11 24       	eor	r1, r1
 190:	6f 5e       	subi	r22, 0xEF	; 239
 192:	75 48       	sbci	r23, 0x85	; 133
 194:	07 2e       	mov	r0, r23
 196:	00 0c       	add	r0, r0
 198:	88 0b       	sbc	r24, r24
 19a:	99 0b       	sbc	r25, r25
 19c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__floatsisf>
 1a0:	04 c0       	rjmp	.+8      	; 0x1aa <setPWMLevel+0x72>
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	84 e4       	ldi	r24, 0x44	; 68
 1a8:	92 e4       	ldi	r25, 0x42	; 66
 1aa:	0e 94 8d 05 	call	0xb1a	; 0xb1a <ceil>
 1ae:	0e 94 a4 05 	call	0xb48	; 0xb48 <__fixunssfsi>
 1b2:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 1b6:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 1ba:	08 95       	ret

000001bc <readHeatLevel>:
 1bc:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 1c0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 1c4:	83 70       	andi	r24, 0x03	; 3
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	98 2f       	mov	r25, r24
 1ca:	88 27       	eor	r24, r24
 1cc:	2c 7f       	andi	r18, 0xFC	; 252
 1ce:	82 0f       	add	r24, r18
 1d0:	91 1d       	adc	r25, r1
 1d2:	08 95       	ret

000001d4 <__vector_21>:
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	2f 93       	push	r18
 1e0:	3f 93       	push	r19
 1e2:	4f 93       	push	r20
 1e4:	5f 93       	push	r21
 1e6:	6f 93       	push	r22
 1e8:	7f 93       	push	r23
 1ea:	8f 93       	push	r24
 1ec:	9f 93       	push	r25
 1ee:	af 93       	push	r26
 1f0:	bf 93       	push	r27
 1f2:	ef 93       	push	r30
 1f4:	ff 93       	push	r31
 1f6:	78 94       	sei
 1f8:	0e 94 de 00 	call	0x1bc	; 0x1bc <readHeatLevel>
 1fc:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <curr_pan>
 200:	21 e0       	ldi	r18, 0x01	; 1
 202:	32 27       	eor	r19, r18
 204:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <curr_pan>
 208:	ec e7       	ldi	r30, 0x7C	; 124
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	30 81       	ld	r19, Z
 20e:	23 27       	eor	r18, r19
 210:	20 83       	st	Z, r18
 212:	8c 5a       	subi	r24, 0xAC	; 172
 214:	93 40       	sbci	r25, 0x03	; 3
 216:	0d 97       	sbiw	r24, 0x0d	; 13
 218:	20 f4       	brcc	.+8      	; 0x222 <__vector_21+0x4e>
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <heat_ok>
 220:	02 c0       	rjmp	.+4      	; 0x226 <__vector_21+0x52>
 222:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <heat_ok>
 226:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <heat_on_ctrl>
 22a:	81 11       	cpse	r24, r1
 22c:	08 c0       	rjmp	.+16     	; 0x23e <__vector_21+0x6a>
 22e:	0e 94 9c 00 	call	0x138	; 0x138 <setPWMLevel>
 232:	ea e7       	ldi	r30, 0x7A	; 122
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	80 64       	ori	r24, 0x40	; 64
 23a:	80 83       	st	Z, r24
 23c:	05 c0       	rjmp	.+10     	; 0x248 <__vector_21+0x74>
 23e:	ea e7       	ldi	r30, 0x7A	; 122
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	80 64       	ori	r24, 0x40	; 64
 246:	80 83       	st	Z, r24
 248:	ff 91       	pop	r31
 24a:	ef 91       	pop	r30
 24c:	bf 91       	pop	r27
 24e:	af 91       	pop	r26
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
 254:	7f 91       	pop	r23
 256:	6f 91       	pop	r22
 258:	5f 91       	pop	r21
 25a:	4f 91       	pop	r20
 25c:	3f 91       	pop	r19
 25e:	2f 91       	pop	r18
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <I2C_SLAVE_checkData>:
 26a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <I2C_SLAVE_first>
 26e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <I2C_SLAVE_last>
 272:	98 13       	cpse	r25, r24
 274:	03 c0       	rjmp	.+6      	; 0x27c <I2C_SLAVE_checkData+0x12>
 276:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <I2C_SLAVE_full>
 27a:	08 95       	ret
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	08 95       	ret

00000280 <I2C_SLAVE_sendData>:
 280:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <I2C_SLAVE_toSend>
 284:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <I2C_SLAVE_haveSended>
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <I2C_SLAVE_dataReady>
 28e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <I2C_SLAVE_beginHold>
 292:	88 23       	and	r24, r24
 294:	a9 f1       	breq	.+106    	; 0x300 <I2C_SLAVE_sendData+0x80>
 296:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <I2C_SLAVE_beginHold>
 29a:	e8 e6       	ldi	r30, 0x68	; 104
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	8b 7f       	andi	r24, 0xFB	; 251
 2a2:	80 83       	st	Z, r24
 2a4:	2b b1       	in	r18, 0x0b	; 11
 2a6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <I2C_SLAVE_toSend>
 2aa:	88 1f       	adc	r24, r24
 2ac:	88 27       	eor	r24, r24
 2ae:	88 1f       	adc	r24, r24
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	82 95       	swap	r24
 2b4:	92 95       	swap	r25
 2b6:	90 7f       	andi	r25, 0xF0	; 240
 2b8:	98 27       	eor	r25, r24
 2ba:	80 7f       	andi	r24, 0xF0	; 240
 2bc:	98 27       	eor	r25, r24
 2be:	80 71       	andi	r24, 0x10	; 16
 2c0:	92 2f       	mov	r25, r18
 2c2:	9f 7e       	andi	r25, 0xEF	; 239
 2c4:	89 0f       	add	r24, r25
 2c6:	8b b9       	out	0x0b, r24	; 11
 2c8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <I2C_SLAVE_haveSended>
 2cc:	8f 5f       	subi	r24, 0xFF	; 255
 2ce:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <I2C_SLAVE_haveSended>
 2d2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <I2C_SLAVE_toSend>
 2d6:	29 b1       	in	r18, 0x09	; 9
 2d8:	88 1f       	adc	r24, r24
 2da:	88 27       	eor	r24, r24
 2dc:	88 1f       	adc	r24, r24
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	82 95       	swap	r24
 2e2:	92 95       	swap	r25
 2e4:	90 7f       	andi	r25, 0xF0	; 240
 2e6:	98 27       	eor	r25, r24
 2e8:	80 7f       	andi	r24, 0xF0	; 240
 2ea:	98 27       	eor	r25, r24
 2ec:	20 71       	andi	r18, 0x10	; 16
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	82 17       	cp	r24, r18
 2f2:	93 07       	cpc	r25, r19
 2f4:	71 f7       	brne	.-36     	; 0x2d2 <I2C_SLAVE_sendData+0x52>
 2f6:	e8 e6       	ldi	r30, 0x68	; 104
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	84 60       	ori	r24, 0x04	; 4
 2fe:	80 83       	st	Z, r24
 300:	5a 9a       	sbi	0x0b, 2	; 11
 302:	08 95       	ret

00000304 <I2C_SLAVE_init>:
 304:	e9 e6       	ldi	r30, 0x69	; 105
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	82 60       	ori	r24, 0x02	; 2
 30c:	80 83       	st	Z, r24
 30e:	80 81       	ld	r24, Z
 310:	81 60       	ori	r24, 0x01	; 1
 312:	80 83       	st	Z, r24
 314:	e8 e6       	ldi	r30, 0x68	; 104
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	80 61       	ori	r24, 0x10	; 16
 31c:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>
 320:	80 81       	ld	r24, Z
 322:	84 60       	ori	r24, 0x04	; 4
 324:	80 83       	st	Z, r24
 326:	8a b1       	in	r24, 0x0a	; 10
 328:	8b 7e       	andi	r24, 0xEB	; 235
 32a:	8a b9       	out	0x0a, r24	; 10
 32c:	8a b1       	in	r24, 0x0a	; 10
 32e:	80 6e       	ori	r24, 0xE0	; 224
 330:	8a b9       	out	0x0a, r24	; 10
 332:	8b b1       	in	r24, 0x0b	; 11
 334:	84 61       	ori	r24, 0x14	; 20
 336:	8b b9       	out	0x0b, r24	; 11
 338:	08 95       	ret

0000033a <I2C_SLAVE_sendBit>:
 33a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <I2C_SLAVE_dataReady>
 33e:	91 30       	cpi	r25, 0x01	; 1
 340:	41 f4       	brne	.+16     	; 0x352 <I2C_SLAVE_sendBit+0x18>
 342:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <I2C_SLAVE_toSend>
 346:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <I2C_SLAVE_tempSave>
 34a:	92 e0       	ldi	r25, 0x02	; 2
 34c:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <I2C_SLAVE_dataReady>
 350:	03 c0       	rjmp	.+6      	; 0x358 <I2C_SLAVE_sendBit+0x1e>
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <I2C_SLAVE_dataReady>
 358:	87 95       	ror	r24
 35a:	88 27       	eor	r24, r24
 35c:	87 95       	ror	r24
 35e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <I2C_SLAVE_toSend>
 362:	87 e0       	ldi	r24, 0x07	; 7
 364:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <I2C_SLAVE_haveSended>
 368:	08 95       	ret

0000036a <I2C_SLAVE_beginSend>:
 36a:	e9 e6       	ldi	r30, 0x69	; 105
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	82 60       	ori	r24, 0x02	; 2
 372:	80 83       	st	Z, r24
 374:	80 81       	ld	r24, Z
 376:	8e 7f       	andi	r24, 0xFE	; 254
 378:	80 83       	st	Z, r24
 37a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <I2C_SLAVE_dataReady>
 37e:	82 30       	cpi	r24, 0x02	; 2
 380:	21 f4       	brne	.+8      	; 0x38a <I2C_SLAVE_beginSend+0x20>
 382:	83 e0       	ldi	r24, 0x03	; 3
 384:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <I2C_SLAVE_dataReady>
 388:	08 95       	ret
 38a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <I2C_SLAVE_dataReady>
 38e:	08 95       	ret

00000390 <I2C_SLAVE_hold>:
 390:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <I2C_SLAVE_dataReady>
 394:	81 50       	subi	r24, 0x01	; 1
 396:	82 30       	cpi	r24, 0x02	; 2
 398:	28 f4       	brcc	.+10     	; 0x3a4 <I2C_SLAVE_hold+0x14>
 39a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <I2C_SLAVE_beginHold>
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	08 95       	ret
 3a4:	5a 98       	cbi	0x0b, 2	; 11
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	08 95       	ret

000003ac <I2C_SLAVE_inc>:
 3ac:	fc 01       	movw	r30, r24
 3ae:	80 81       	ld	r24, Z
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	98 0f       	add	r25, r24
 3b4:	9a 30       	cpi	r25, 0x0A	; 10
 3b6:	10 f4       	brcc	.+4      	; 0x3bc <I2C_SLAVE_inc+0x10>
 3b8:	90 83       	st	Z, r25
 3ba:	08 95       	ret
 3bc:	10 82       	st	Z, r1
 3be:	08 95       	ret

000003c0 <I2C_SLAVE_addData>:
 3c0:	cf 93       	push	r28
 3c2:	c8 2f       	mov	r28, r24
 3c4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <I2C_SLAVE_full>
 3c8:	88 23       	and	r24, r24
 3ca:	29 f0       	breq	.+10     	; 0x3d6 <I2C_SLAVE_addData+0x16>
 3cc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <I2C_SLAVE_first>
 3d0:	8f 5f       	subi	r24, 0xFF	; 255
 3d2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <I2C_SLAVE_first>
 3d6:	8d e0       	ldi	r24, 0x0D	; 13
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	0e 94 d6 01 	call	0x3ac	; 0x3ac <I2C_SLAVE_inc>
 3de:	e8 2f       	mov	r30, r24
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	e6 5e       	subi	r30, 0xE6	; 230
 3e4:	fe 4f       	sbci	r31, 0xFE	; 254
 3e6:	c0 83       	st	Z, r28
 3e8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <I2C_SLAVE_last>
 3ec:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <I2C_SLAVE_first>
 3f0:	98 13       	cpse	r25, r24
 3f2:	03 c0       	rjmp	.+6      	; 0x3fa <I2C_SLAVE_addData+0x3a>
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <I2C_SLAVE_full>
 3fa:	cf 91       	pop	r28
 3fc:	08 95       	ret

000003fe <I2C_SLAVE_readFirst>:
 3fe:	0e 94 35 01 	call	0x26a	; 0x26a <I2C_SLAVE_checkData>
 402:	88 23       	and	r24, r24
 404:	a9 f0       	breq	.+42     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 406:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <I2C_SLAVE_first>
 40a:	8a 30       	cpi	r24, 0x0A	; 10
 40c:	10 f0       	brcs	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 40e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <I2C_SLAVE_first>
 412:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <I2C_SLAVE_full>
 416:	81 11       	cpse	r24, r1
 418:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <I2C_SLAVE_full>
 41c:	8e e0       	ldi	r24, 0x0E	; 14
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	0e 94 d6 01 	call	0x3ac	; 0x3ac <I2C_SLAVE_inc>
 424:	e8 2f       	mov	r30, r24
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	e6 5e       	subi	r30, 0xE6	; 230
 42a:	fe 4f       	sbci	r31, 0xFE	; 254
 42c:	80 81       	ld	r24, Z
 42e:	08 95       	ret
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	08 95       	ret

00000434 <__vector_1>:
	return 0;
}


ISR(I2C_SLAVE_SCL_vect)
{
 434:	1f 92       	push	r1
 436:	0f 92       	push	r0
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	0f 92       	push	r0
 43c:	11 24       	eor	r1, r1
 43e:	2f 93       	push	r18
 440:	3f 93       	push	r19
 442:	4f 93       	push	r20
 444:	5f 93       	push	r21
 446:	6f 93       	push	r22
 448:	7f 93       	push	r23
 44a:	8f 93       	push	r24
 44c:	9f 93       	push	r25
 44e:	af 93       	push	r26
 450:	bf 93       	push	r27
 452:	ef 93       	push	r30
 454:	ff 93       	push	r31
	if(I2C_SLAVE_startRecived)
 456:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <I2C_SLAVE_startRecived>
 45a:	88 23       	and	r24, r24
 45c:	09 f4       	brne	.+2      	; 0x460 <__vector_1+0x2c>
 45e:	f7 c0       	rjmp	.+494    	; 0x64e <__vector_1+0x21a>
	{
		if(I2C_SLAVE_SCL_IS_RISING())
 460:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 464:	83 70       	andi	r24, 0x03	; 3
 466:	83 30       	cpi	r24, 0x03	; 3
 468:	09 f0       	breq	.+2      	; 0x46c <__vector_1+0x38>
 46a:	98 c0       	rjmp	.+304    	; 0x59c <__vector_1+0x168>
		{
			if(I2C_SLAVE_haveSended > 7)
 46c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <I2C_SLAVE_haveSended>
 470:	88 30       	cpi	r24, 0x08	; 8
 472:	28 f0       	brcs	.+10     	; 0x47e <__vector_1+0x4a>
			{
				I2C_SLAVE_haveSended = 0;
 474:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <I2C_SLAVE_haveSended>
				I2C_SLAVE_PORT |= (1 << I2C_SLAVE_SDA | 1 << I2C_SLAVE_SCL);
 478:	8b b1       	in	r24, 0x0b	; 11
 47a:	84 61       	ori	r24, 0x14	; 20
 47c:	8b b9       	out	0x0b, r24	; 11
				//I2C_SLAVE_DDR |= 1 << I2C_SLAVE_SDA;
			}
			if(I2C_SLAVE_recevedBits < 7)
 47e:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <I2C_SLAVE_recevedBits>
 482:	97 30       	cpi	r25, 0x07	; 7
 484:	20 f5       	brcc	.+72     	; 0x4ce <__vector_1+0x9a>
			{
				I2C_SLAVE_recevedAddr = I2C_SLAVE_SET_BIT(I2C_SLAVE_recevedAddr,6-I2C_SLAVE_recevedBits,I2C_SLAVE_PIN,I2C_SLAVE_SDA);
 486:	66 e0       	ldi	r22, 0x06	; 6
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	69 1b       	sub	r22, r25
 48c:	71 09       	sbc	r23, r1
 48e:	21 e0       	ldi	r18, 0x01	; 1
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	a9 01       	movw	r20, r18
 494:	06 2e       	mov	r0, r22
 496:	02 c0       	rjmp	.+4      	; 0x49c <__vector_1+0x68>
 498:	44 0f       	add	r20, r20
 49a:	55 1f       	adc	r21, r21
 49c:	0a 94       	dec	r0
 49e:	e2 f7       	brpl	.-8      	; 0x498 <__vector_1+0x64>
 4a0:	89 b1       	in	r24, 0x09	; 9
 4a2:	54 2f       	mov	r21, r20
 4a4:	50 95       	com	r21
 4a6:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <I2C_SLAVE_recevedAddr>
 4aa:	52 23       	and	r21, r18
 4ac:	82 95       	swap	r24
 4ae:	8f 70       	andi	r24, 0x0F	; 15
 4b0:	28 2f       	mov	r18, r24
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <__vector_1+0x86>
 4b6:	22 0f       	add	r18, r18
 4b8:	33 1f       	adc	r19, r19
 4ba:	6a 95       	dec	r22
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <__vector_1+0x82>
 4be:	24 23       	and	r18, r20
 4c0:	25 0f       	add	r18, r21
 4c2:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <I2C_SLAVE_recevedAddr>
				I2C_SLAVE_recevedBits++;
 4c6:	9f 5f       	subi	r25, 0xFF	; 255
 4c8:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <I2C_SLAVE_recevedBits>
 4cc:	c0 c0       	rjmp	.+384    	; 0x64e <__vector_1+0x21a>
			}
			else if(I2C_SLAVE_recevedAddr == I2C_SLAVE_ADDR && I2C_SLAVE_recevedBits < 8)
 4ce:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <I2C_SLAVE_recevedAddr>
 4d2:	80 37       	cpi	r24, 0x70	; 112
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <__vector_1+0xa4>
 4d6:	bb c0       	rjmp	.+374    	; 0x64e <__vector_1+0x21a>
 4d8:	98 30       	cpi	r25, 0x08	; 8
 4da:	b8 f4       	brcc	.+46     	; 0x50a <__vector_1+0xd6>
			{
				I2C_SLAVE_recevedBits++;
 4dc:	9f 5f       	subi	r25, 0xFF	; 255
 4de:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <I2C_SLAVE_recevedBits>
				I2C_SLAVE_shouldWrite = I2C_SLAVE_SET_BIT(I2C_SLAVE_shouldWrite,0,I2C_SLAVE_PIN,I2C_SLAVE_SDA);//0;
 4e2:	89 b1       	in	r24, 0x09	; 9
 4e4:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <I2C_SLAVE_shouldWrite>
 4e8:	9e 7f       	andi	r25, 0xFE	; 254
 4ea:	82 95       	swap	r24
 4ec:	81 70       	andi	r24, 0x01	; 1
 4ee:	89 0f       	add	r24, r25
 4f0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <I2C_SLAVE_shouldWrite>
				if(I2C_SLAVE_shouldWrite)
 4f4:	88 23       	and	r24, r24
 4f6:	19 f0       	breq	.+6      	; 0x4fe <__vector_1+0xca>
				{
					I2C_SLAVE_beginHold = true;
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <I2C_SLAVE_beginHold>
				}
				I2C_SLAVE_sendBit(0);
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	0e 94 9d 01 	call	0x33a	; 0x33a <I2C_SLAVE_sendBit>
				I2C_SLAVE_beginSend();
 504:	0e 94 b5 01 	call	0x36a	; 0x36a <I2C_SLAVE_beginSend>
 508:	a2 c0       	rjmp	.+324    	; 0x64e <__vector_1+0x21a>
			}
			else if(I2C_SLAVE_recevedAddr == I2C_SLAVE_ADDR && I2C_SLAVE_recevedBits < (9))
 50a:	99 30       	cpi	r25, 0x09	; 9
 50c:	20 f4       	brcc	.+8      	; 0x516 <__vector_1+0xe2>
			{
				I2C_SLAVE_recevedBits++;
 50e:	9f 5f       	subi	r25, 0xFF	; 255
 510:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <I2C_SLAVE_recevedBits>
 514:	9c c0       	rjmp	.+312    	; 0x64e <__vector_1+0x21a>
			}
			else if(I2C_SLAVE_recevedAddr == I2C_SLAVE_ADDR && I2C_SLAVE_recevedBits < (17))
 516:	91 31       	cpi	r25, 0x11	; 17
 518:	08 f0       	brcs	.+2      	; 0x51c <__vector_1+0xe8>
 51a:	99 c0       	rjmp	.+306    	; 0x64e <__vector_1+0x21a>
			{
				if(!I2C_SLAVE_shouldWrite)
 51c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <I2C_SLAVE_shouldWrite>
 520:	81 11       	cpse	r24, r1
 522:	31 c0       	rjmp	.+98     	; 0x586 <__vector_1+0x152>
				{
					I2C_SLAVE_recevedData = I2C_SLAVE_SET_BIT(I2C_SLAVE_recevedData,7-(I2C_SLAVE_recevedBits-8),I2C_SLAVE_PIN,I2C_SLAVE_SDA);
 524:	6f e0       	ldi	r22, 0x0F	; 15
 526:	70 e0       	ldi	r23, 0x00	; 0
 528:	69 1b       	sub	r22, r25
 52a:	71 09       	sbc	r23, r1
 52c:	21 e0       	ldi	r18, 0x01	; 1
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	a9 01       	movw	r20, r18
 532:	06 2e       	mov	r0, r22
 534:	02 c0       	rjmp	.+4      	; 0x53a <__vector_1+0x106>
 536:	44 0f       	add	r20, r20
 538:	55 1f       	adc	r21, r21
 53a:	0a 94       	dec	r0
 53c:	e2 f7       	brpl	.-8      	; 0x536 <__vector_1+0x102>
 53e:	39 b1       	in	r19, 0x09	; 9
 540:	24 2f       	mov	r18, r20
 542:	20 95       	com	r18
 544:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <I2C_SLAVE_recevedData>
 548:	82 23       	and	r24, r18
 54a:	32 95       	swap	r19
 54c:	3f 70       	andi	r19, 0x0F	; 15
 54e:	23 2f       	mov	r18, r19
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <__vector_1+0x124>
 554:	22 0f       	add	r18, r18
 556:	33 1f       	adc	r19, r19
 558:	6a 95       	dec	r22
 55a:	e2 f7       	brpl	.-8      	; 0x554 <__vector_1+0x120>
 55c:	24 23       	and	r18, r20
 55e:	82 0f       	add	r24, r18
 560:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <I2C_SLAVE_recevedData>
					I2C_SLAVE_recevedBits++;
 564:	9f 5f       	subi	r25, 0xFF	; 255
 566:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <I2C_SLAVE_recevedBits>
					if(I2C_SLAVE_recevedBits == 16)
 56a:	90 31       	cpi	r25, 0x10	; 16
 56c:	09 f0       	breq	.+2      	; 0x570 <__vector_1+0x13c>
 56e:	6f c0       	rjmp	.+222    	; 0x64e <__vector_1+0x21a>
					{
						I2C_SLAVE_addData(I2C_SLAVE_recevedData);
 570:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <I2C_SLAVE_addData>
						I2C_SLAVE_sendBit(0);
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	0e 94 9d 01 	call	0x33a	; 0x33a <I2C_SLAVE_sendBit>
						I2C_SLAVE_beginSend();
 57a:	0e 94 b5 01 	call	0x36a	; 0x36a <I2C_SLAVE_beginSend>
						I2C_SLAVE_recevedBits = 8;
 57e:	88 e0       	ldi	r24, 0x08	; 8
 580:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <I2C_SLAVE_recevedBits>
 584:	64 c0       	rjmp	.+200    	; 0x64e <__vector_1+0x21a>
					}
				}
				else if(I2C_SLAVE_shouldWrite && I2C_SLAVE_hold())
 586:	0e 94 c8 01 	call	0x390	; 0x390 <I2C_SLAVE_hold>
 58a:	89 2b       	or	r24, r25
 58c:	09 f4       	brne	.+2      	; 0x590 <__vector_1+0x15c>
 58e:	5f c0       	rjmp	.+190    	; 0x64e <__vector_1+0x21a>
				{
					I2C_SLAVE_beginSend();
 590:	0e 94 b5 01 	call	0x36a	; 0x36a <I2C_SLAVE_beginSend>
					I2C_SLAVE_recevedBits = 7;
 594:	87 e0       	ldi	r24, 0x07	; 7
 596:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <I2C_SLAVE_recevedBits>
 59a:	59 c0       	rjmp	.+178    	; 0x64e <__vector_1+0x21a>
				}
			}
		}
		else if(I2C_SLAVE_SCL_IS_FALLING())
 59c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 5a0:	83 70       	andi	r24, 0x03	; 3
 5a2:	82 30       	cpi	r24, 0x02	; 2
 5a4:	09 f0       	breq	.+2      	; 0x5a8 <__vector_1+0x174>
 5a6:	53 c0       	rjmp	.+166    	; 0x64e <__vector_1+0x21a>
		{
			//sendChar(I2C_SLAVE_haveSended);
			if(I2C_SLAVE_haveSended > 7)
 5a8:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <I2C_SLAVE_haveSended>
 5ac:	38 30       	cpi	r19, 0x08	; 8
 5ae:	90 f1       	brcs	.+100    	; 0x614 <__vector_1+0x1e0>
			{
				if(I2C_SLAVE_dataReady == 2 || I2C_SLAVE_dataReady == 3)
 5b0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <I2C_SLAVE_dataReady>
 5b4:	82 50       	subi	r24, 0x02	; 2
 5b6:	82 30       	cpi	r24, 0x02	; 2
 5b8:	e0 f4       	brcc	.+56     	; 0x5f2 <__vector_1+0x1be>
				{
					//sendChar(I2C_SLAVE_tempSave);
					I2C_SLAVE_dataReady = 1;
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <I2C_SLAVE_dataReady>
					I2C_SLAVE_haveSended = 1;
 5c0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <I2C_SLAVE_haveSended>
					I2C_SLAVE_toSend = I2C_SLAVE_tempSave;
 5c4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <I2C_SLAVE_tempSave>
 5c8:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <I2C_SLAVE_toSend>
					I2C_SLAVE_PORT = I2C_SLAVE_SET_BIT(I2C_SLAVE_PORT,I2C_SLAVE_SDA,I2C_SLAVE_toSend,7);
 5cc:	2b b1       	in	r18, 0x0b	; 11
 5ce:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <I2C_SLAVE_toSend>
 5d2:	88 1f       	adc	r24, r24
 5d4:	88 27       	eor	r24, r24
 5d6:	88 1f       	adc	r24, r24
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	82 95       	swap	r24
 5dc:	92 95       	swap	r25
 5de:	90 7f       	andi	r25, 0xF0	; 240
 5e0:	98 27       	eor	r25, r24
 5e2:	80 7f       	andi	r24, 0xF0	; 240
 5e4:	98 27       	eor	r25, r24
 5e6:	80 71       	andi	r24, 0x10	; 16
 5e8:	92 2f       	mov	r25, r18
 5ea:	9f 7e       	andi	r25, 0xEF	; 239
 5ec:	89 0f       	add	r24, r25
 5ee:	8b b9       	out	0x0b, r24	; 11
 5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <__vector_1+0x1c0>
				}
				else
				{
					//I2C_SLAVE_recevedBits += I2C_SLAVE_haveSended;
					I2C_SLAVE_PORT |= (1 << I2C_SLAVE_SDA);
 5f2:	5c 9a       	sbi	0x0b, 4	; 11
				}
				if(I2C_SLAVE_beginHold)
 5f4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <I2C_SLAVE_beginHold>
 5f8:	88 23       	and	r24, r24
 5fa:	19 f0       	breq	.+6      	; 0x602 <__vector_1+0x1ce>
				{
					I2C_SLAVE_hold();
 5fc:	0e 94 c8 01 	call	0x390	; 0x390 <I2C_SLAVE_hold>
 600:	26 c0       	rjmp	.+76     	; 0x64e <__vector_1+0x21a>
				}
				else
				{
					I2C_SLAVE_SCL_RISING();
 602:	e9 e6       	ldi	r30, 0x69	; 105
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
 608:	82 60       	ori	r24, 0x02	; 2
 60a:	80 83       	st	Z, r24
 60c:	80 81       	ld	r24, Z
 60e:	81 60       	ori	r24, 0x01	; 1
 610:	80 83       	st	Z, r24
 612:	1d c0       	rjmp	.+58     	; 0x64e <__vector_1+0x21a>
				}
			}
			else
			{
				
				I2C_SLAVE_PORT = I2C_SLAVE_SET_BIT(I2C_SLAVE_PORT,I2C_SLAVE_SDA,I2C_SLAVE_toSend,(7-I2C_SLAVE_haveSended));//&= ~(1 << I2C_SLAVE_SDA);
 614:	2b b1       	in	r18, 0x0b	; 11
 616:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <I2C_SLAVE_toSend>
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	47 e0       	ldi	r20, 0x07	; 7
 61e:	50 e0       	ldi	r21, 0x00	; 0
 620:	43 1b       	sub	r20, r19
 622:	51 09       	sbc	r21, r1
 624:	02 c0       	rjmp	.+4      	; 0x62a <__vector_1+0x1f6>
 626:	95 95       	asr	r25
 628:	87 95       	ror	r24
 62a:	4a 95       	dec	r20
 62c:	e2 f7       	brpl	.-8      	; 0x626 <__vector_1+0x1f2>
 62e:	82 95       	swap	r24
 630:	92 95       	swap	r25
 632:	90 7f       	andi	r25, 0xF0	; 240
 634:	98 27       	eor	r25, r24
 636:	80 7f       	andi	r24, 0xF0	; 240
 638:	98 27       	eor	r25, r24
 63a:	80 71       	andi	r24, 0x10	; 16
 63c:	92 2f       	mov	r25, r18
 63e:	9f 7e       	andi	r25, 0xEF	; 239
 640:	89 0f       	add	r24, r25
 642:	8b b9       	out	0x0b, r24	; 11
				
				I2C_SLAVE_haveSended++;
 644:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <I2C_SLAVE_haveSended>
 648:	8f 5f       	subi	r24, 0xFF	; 255
 64a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <I2C_SLAVE_haveSended>
			}
		}
	}
	
}
 64e:	ff 91       	pop	r31
 650:	ef 91       	pop	r30
 652:	bf 91       	pop	r27
 654:	af 91       	pop	r26
 656:	9f 91       	pop	r25
 658:	8f 91       	pop	r24
 65a:	7f 91       	pop	r23
 65c:	6f 91       	pop	r22
 65e:	5f 91       	pop	r21
 660:	4f 91       	pop	r20
 662:	3f 91       	pop	r19
 664:	2f 91       	pop	r18
 666:	0f 90       	pop	r0
 668:	0f be       	out	0x3f, r0	; 63
 66a:	0f 90       	pop	r0
 66c:	1f 90       	pop	r1
 66e:	18 95       	reti

00000670 <__vector_5>:


ISR(I2C_SLAVE_SDA_vect)
{
 670:	1f 92       	push	r1
 672:	0f 92       	push	r0
 674:	0f b6       	in	r0, 0x3f	; 63
 676:	0f 92       	push	r0
 678:	11 24       	eor	r1, r1
 67a:	8f 93       	push	r24
 67c:	ef 93       	push	r30
 67e:	ff 93       	push	r31
	if((I2C_SLAVE_PIN & 1 << I2C_SLAVE_SCL) ==(1 << I2C_SLAVE_SCL))
 680:	4a 9b       	sbis	0x09, 2	; 9
 682:	17 c0       	rjmp	.+46     	; 0x6b2 <__vector_5+0x42>
	{
		if(I2C_SLAVE_PIN & 1 << I2C_SLAVE_SDA)
 684:	4c 9b       	sbis	0x09, 4	; 9
 686:	12 c0       	rjmp	.+36     	; 0x6ac <__vector_5+0x3c>
		{
			I2C_SLAVE_startRecived = false;
 688:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <I2C_SLAVE_startRecived>
			I2C_SLAVE_startRecived = true;
		}
		if(I2C_SLAVE_startRecived == false)
		{
			//sendChar(0xDA);
			I2C_SLAVE_recevedAddr = 0;
 68c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <I2C_SLAVE_recevedAddr>
			I2C_SLAVE_recevedBits = 0;
 690:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <I2C_SLAVE_recevedBits>
			I2C_SLAVE_SCL_RISING();
 694:	e9 e6       	ldi	r30, 0x69	; 105
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	80 81       	ld	r24, Z
 69a:	82 60       	ori	r24, 0x02	; 2
 69c:	80 83       	st	Z, r24
 69e:	80 81       	ld	r24, Z
 6a0:	81 60       	ori	r24, 0x01	; 1
 6a2:	80 83       	st	Z, r24
			I2C_SLAVE_PORT |= (1 << I2C_SLAVE_SDA | 1 << I2C_SLAVE_SCL);
 6a4:	8b b1       	in	r24, 0x0b	; 11
 6a6:	84 61       	ori	r24, 0x14	; 20
 6a8:	8b b9       	out	0x0b, r24	; 11
 6aa:	03 c0       	rjmp	.+6      	; 0x6b2 <__vector_5+0x42>
		{
			I2C_SLAVE_startRecived = false;
		}
		else
		{
			I2C_SLAVE_startRecived = true;
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <I2C_SLAVE_startRecived>
			I2C_SLAVE_recevedBits = 0;
			I2C_SLAVE_SCL_RISING();
			I2C_SLAVE_PORT |= (1 << I2C_SLAVE_SDA | 1 << I2C_SLAVE_SCL);
		}
	}
}
 6b2:	ff 91       	pop	r31
 6b4:	ef 91       	pop	r30
 6b6:	8f 91       	pop	r24
 6b8:	0f 90       	pop	r0
 6ba:	0f be       	out	0x3f, r0	; 63
 6bc:	0f 90       	pop	r0
 6be:	1f 90       	pop	r1
 6c0:	18 95       	reti

000006c2 <startTimePan1>:
}

void startTimePan1(){
	
	//Set internal flag
	pan1_cooking_time = 0;
 6c2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <pan1_cooking_time+0x1>
 6c6:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <pan1_cooking_time>
	pan1Free = false;
 6ca:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <pan1Free>
 6ce:	08 95       	ret

000006d0 <startTimePan2>:
}

void startTimePan2(){
	
	//Set internal flag
	pan2_cooking_time = 0;
 6d0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 6d4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	pan2Free = false;
 6d8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 6dc:	08 95       	ret

000006de <setMotorPWM>:

static uint16_t curr_time = 0;	
static bool motor_flipping = MOTOR1;

void setMotorPWM(uint8_t PWM, bool motor) {
	if (motor == MOTOR1) {
 6de:	61 11       	cpse	r22, r1
 6e0:	1f c0       	rjmp	.+62     	; 0x720 <setMotorPWM+0x42>
		OCR0A = (TIMER0_TOP - ceil(((256/100) * (PWM > 100? 100 : PWM))));
 6e2:	85 36       	cpi	r24, 0x65	; 101
 6e4:	58 f4       	brcc	.+22     	; 0x6fc <setMotorPWM+0x1e>
 6e6:	68 2f       	mov	r22, r24
 6e8:	70 e0       	ldi	r23, 0x00	; 0
 6ea:	66 0f       	add	r22, r22
 6ec:	77 1f       	adc	r23, r23
 6ee:	07 2e       	mov	r0, r23
 6f0:	00 0c       	add	r0, r0
 6f2:	88 0b       	sbc	r24, r24
 6f4:	99 0b       	sbc	r25, r25
 6f6:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__floatsisf>
 6fa:	04 c0       	rjmp	.+8      	; 0x704 <setMotorPWM+0x26>
 6fc:	60 e0       	ldi	r22, 0x00	; 0
 6fe:	70 e0       	ldi	r23, 0x00	; 0
 700:	88 e4       	ldi	r24, 0x48	; 72
 702:	93 e4       	ldi	r25, 0x43	; 67
 704:	0e 94 8d 05 	call	0xb1a	; 0xb1a <ceil>
 708:	9b 01       	movw	r18, r22
 70a:	ac 01       	movw	r20, r24
 70c:	60 e0       	ldi	r22, 0x00	; 0
 70e:	70 e0       	ldi	r23, 0x00	; 0
 710:	8f e7       	ldi	r24, 0x7F	; 127
 712:	93 e4       	ldi	r25, 0x43	; 67
 714:	0e 94 20 05 	call	0xa40	; 0xa40 <__subsf3>
 718:	0e 94 a4 05 	call	0xb48	; 0xb48 <__fixunssfsi>
 71c:	67 bd       	out	0x27, r22	; 39
 71e:	08 95       	ret
	}
	else {
		OCR0B = (TIMER0_TOP - ceil(((256/100) * (PWM > 100? 100 : PWM))));
 720:	85 36       	cpi	r24, 0x65	; 101
 722:	58 f4       	brcc	.+22     	; 0x73a <setMotorPWM+0x5c>
 724:	68 2f       	mov	r22, r24
 726:	70 e0       	ldi	r23, 0x00	; 0
 728:	66 0f       	add	r22, r22
 72a:	77 1f       	adc	r23, r23
 72c:	07 2e       	mov	r0, r23
 72e:	00 0c       	add	r0, r0
 730:	88 0b       	sbc	r24, r24
 732:	99 0b       	sbc	r25, r25
 734:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__floatsisf>
 738:	04 c0       	rjmp	.+8      	; 0x742 <setMotorPWM+0x64>
 73a:	60 e0       	ldi	r22, 0x00	; 0
 73c:	70 e0       	ldi	r23, 0x00	; 0
 73e:	88 e4       	ldi	r24, 0x48	; 72
 740:	93 e4       	ldi	r25, 0x43	; 67
 742:	0e 94 8d 05 	call	0xb1a	; 0xb1a <ceil>
 746:	9b 01       	movw	r18, r22
 748:	ac 01       	movw	r20, r24
 74a:	60 e0       	ldi	r22, 0x00	; 0
 74c:	70 e0       	ldi	r23, 0x00	; 0
 74e:	8f e7       	ldi	r24, 0x7F	; 127
 750:	93 e4       	ldi	r25, 0x43	; 67
 752:	0e 94 20 05 	call	0xa40	; 0xa40 <__subsf3>
 756:	0e 94 a4 05 	call	0xb48	; 0xb48 <__fixunssfsi>
 75a:	68 bd       	out	0x28, r22	; 40
 75c:	08 95       	ret

0000075e <init_motors>:
#define TIMER2_TOP		250-1

void startTimer2();
void stopTimer2();

void init_motors(){
 75e:	cf 93       	push	r28
 760:	df 93       	push	r29
	
	//Set pins as output
	MOTOR1_DIR_PORT_DDR |= 0b11 << MOTOR1_DIR_PIN_LOCATION;
 762:	84 b1       	in	r24, 0x04	; 4
 764:	80 6c       	ori	r24, 0xC0	; 192
 766:	84 b9       	out	0x04, r24	; 4
	MOTOR2_DIR_PORT_DDR |= 0b11 << MOTOR2_DIR_PIN_LOCATION;
 768:	87 b1       	in	r24, 0x07	; 7
 76a:	80 63       	ori	r24, 0x30	; 48
 76c:	87 b9       	out	0x07, r24	; 7
	
	//Set motor to off
	MOTOR1_SETING(MOTOR_OFF);
 76e:	84 b1       	in	r24, 0x04	; 4
 770:	80 6c       	ori	r24, 0xC0	; 192
 772:	84 b9       	out	0x04, r24	; 4
	MOTOR2_SETING(MOTOR_OFF);
 774:	87 b1       	in	r24, 0x07	; 7
 776:	80 63       	ori	r24, 0x30	; 48
 778:	87 b9       	out	0x07, r24	; 7
	
	//Disable motors
	MOTOR1_DISABLE();
 77a:	55 98       	cbi	0x0a, 5	; 10
	MOTOR2_DISABLE();
 77c:	56 98       	cbi	0x0a, 6	; 10
	
		
	//Setup timer 0 PWMs for the motors
	PRR &= ~(1 << PRTIM0);
 77e:	c4 e6       	ldi	r28, 0x64	; 100
 780:	d0 e0       	ldi	r29, 0x00	; 0
 782:	88 81       	ld	r24, Y
 784:	8f 7d       	andi	r24, 0xDF	; 223
 786:	88 83       	st	Y, r24
	//OCRA/B set when counting up, duty depens on OCR0A/B, phase correct PWM mode, prescaler = 256, freq ~ 61,27451 Hz (8000000/(256*510)
	TCCR0A = (1 << COM0A1) | (1 << COM0A0) | (1 << COM0B1) | (1 << COM0B1) | (1 << WGM00);
 788:	81 ee       	ldi	r24, 0xE1	; 225
 78a:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS02);
 78c:	84 e0       	ldi	r24, 0x04	; 4
 78e:	85 bd       	out	0x25, r24	; 37
	
	//Set PWM for the motors
	setMotorPWM(0, MOTOR1);
 790:	60 e0       	ldi	r22, 0x00	; 0
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	0e 94 6f 03 	call	0x6de	; 0x6de <setMotorPWM>
	setMotorPWM(0, MOTOR2);
 798:	61 e0       	ldi	r22, 0x01	; 1
 79a:	80 e0       	ldi	r24, 0x00	; 0
 79c:	0e 94 6f 03 	call	0x6de	; 0x6de <setMotorPWM>
	
	//Setup timer 2 to 125 Hz and TOF interrupt, prescaler = 256, OCRA = 249 (8000000 Hz/(256*250) = 125 Hz (error = 125 +- 1Hz)
	PRR &= ~(1 << PRTIM2);
 7a0:	88 81       	ld	r24, Y
 7a2:	8f 7b       	andi	r24, 0xBF	; 191
 7a4:	88 83       	st	Y, r24
	TCCR2A = (1 << WGM21) | (1 << WGM20);
 7a6:	83 e0       	ldi	r24, 0x03	; 3
 7a8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
	TCCR2B = (1 << WGM22);
 7ac:	88 e0       	ldi	r24, 0x08	; 8
 7ae:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	OCR2A = TIMER2_TOP;
 7b2:	89 ef       	ldi	r24, 0xF9	; 249
 7b4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
	TIMSK2 = (1 << TOIE2);
 7b8:	81 e0       	ldi	r24, 0x01	; 1
 7ba:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
	
}
 7be:	df 91       	pop	r29
 7c0:	cf 91       	pop	r28
 7c2:	08 95       	ret

000007c4 <startTimer2>:
	startTimer2();
	
}

void startTimer2(){
	curr_time = 0;
 7c4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <curr_time+0x1>
 7c8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <curr_time>
	TCCR2B |= (1 << CS22) | (1 << CS20);
 7cc:	e1 eb       	ldi	r30, 0xB1	; 177
 7ce:	f0 e0       	ldi	r31, 0x00	; 0
 7d0:	80 81       	ld	r24, Z
 7d2:	85 60       	ori	r24, 0x05	; 5
 7d4:	80 83       	st	Z, r24
 7d6:	08 95       	ret

000007d8 <flipPan1>:
	}
}

void flipPan1(){
	
	motor_flipping = MOTOR1;
 7d8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <motor_flipping>
	setMotorPWM(MOTOR_OPTIMUM_PWM_FORWARD, motor_flipping);
 7dc:	60 e0       	ldi	r22, 0x00	; 0
 7de:	8f ef       	ldi	r24, 0xFF	; 255
 7e0:	0e 94 6f 03 	call	0x6de	; 0x6de <setMotorPWM>
	
	//Flip forward
	MOTOR1_SETING(MOTOR_FORWARD);
 7e4:	84 b1       	in	r24, 0x04	; 4
 7e6:	8f 73       	andi	r24, 0x3F	; 63
 7e8:	80 64       	ori	r24, 0x40	; 64
 7ea:	84 b9       	out	0x04, r24	; 4
	MOTOR1_ENABLE();
 7ec:	55 9a       	sbi	0x0a, 5	; 10
	
	startTimer2();
 7ee:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <startTimer2>
 7f2:	08 95       	ret

000007f4 <flipPan2>:
}

void flipPan2(){
	
	motor_flipping = MOTOR2;
 7f4:	81 e0       	ldi	r24, 0x01	; 1
 7f6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <motor_flipping>
	setMotorPWM(MOTOR_OPTIMUM_PWM_FORWARD, motor_flipping);
 7fa:	61 e0       	ldi	r22, 0x01	; 1
 7fc:	8f ef       	ldi	r24, 0xFF	; 255
 7fe:	0e 94 6f 03 	call	0x6de	; 0x6de <setMotorPWM>
	
	//Flip forward
	MOTOR2_SETING(MOTOR_FORWARD);
 802:	87 b1       	in	r24, 0x07	; 7
 804:	8f 7c       	andi	r24, 0xCF	; 207
 806:	80 61       	ori	r24, 0x10	; 16
 808:	87 b9       	out	0x07, r24	; 7
	MOTOR2_ENABLE();
 80a:	56 9a       	sbi	0x0a, 6	; 10
	
	startTimer2();
 80c:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <startTimer2>
 810:	08 95       	ret

00000812 <stopTimer2>:
	TCCR2B |= (1 << CS22) | (1 << CS20);
}

void stopTimer2(){
	//Stop clock
	TCCR2B &= ~((1 << CS22) | (1 << CS20));
 812:	e1 eb       	ldi	r30, 0xB1	; 177
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	80 81       	ld	r24, Z
 818:	8a 7f       	andi	r24, 0xFA	; 250
 81a:	80 83       	st	Z, r24
	
	//Reset count
	TCNT2 = 0x00;
 81c:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
 820:	08 95       	ret

00000822 <__vector_9>:
}

ISR(TIMER2_OVF_vect) {
 822:	1f 92       	push	r1
 824:	0f 92       	push	r0
 826:	0f b6       	in	r0, 0x3f	; 63
 828:	0f 92       	push	r0
 82a:	11 24       	eor	r1, r1
 82c:	2f 93       	push	r18
 82e:	3f 93       	push	r19
 830:	4f 93       	push	r20
 832:	5f 93       	push	r21
 834:	6f 93       	push	r22
 836:	7f 93       	push	r23
 838:	8f 93       	push	r24
 83a:	9f 93       	push	r25
 83c:	af 93       	push	r26
 83e:	bf 93       	push	r27
 840:	cf 93       	push	r28
 842:	ef 93       	push	r30
 844:	ff 93       	push	r31
	
	switch (curr_time++) {
 846:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <curr_time>
 84a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <curr_time+0x1>
 84e:	9c 01       	movw	r18, r24
 850:	2f 5f       	subi	r18, 0xFF	; 255
 852:	3f 4f       	sbci	r19, 0xFF	; 255
 854:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <curr_time+0x1>
 858:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <curr_time>
 85c:	8e 3e       	cpi	r24, 0xEE	; 238
 85e:	2f e7       	ldi	r18, 0x7F	; 127
 860:	92 07       	cpc	r25, r18
 862:	01 f1       	breq	.+64     	; 0x8a4 <__vector_9+0x82>
 864:	20 f4       	brcc	.+8      	; 0x86e <__vector_9+0x4c>
 866:	87 3f       	cpi	r24, 0xF7	; 247
 868:	9f 43       	sbci	r25, 0x3F	; 63
 86a:	41 f0       	breq	.+16     	; 0x87c <__vector_9+0x5a>
 86c:	4a c0       	rjmp	.+148    	; 0x902 <__stack+0x3>
 86e:	85 3e       	cpi	r24, 0xE5	; 229
 870:	2f eb       	ldi	r18, 0xBF	; 191
 872:	92 07       	cpc	r25, r18
 874:	19 f0       	breq	.+6      	; 0x87c <__vector_9+0x5a>
 876:	84 96       	adiw	r24, 0x24	; 36
 878:	69 f1       	breq	.+90     	; 0x8d4 <__vector_9+0xb2>
 87a:	43 c0       	rjmp	.+134    	; 0x902 <__stack+0x3>
		
		//Mid way time to break
		case MOTOR_FORWARD_TIME_S:
		case MOTOR_BACKWARD_TIME_S:
			setMotorPWM(MOTOR_OPTIMUM_PWM_BREAK, motor_flipping);
 87c:	c0 91 09 01 	lds	r28, 0x0109	; 0x800109 <motor_flipping>
 880:	6c 2f       	mov	r22, r28
 882:	8f ef       	ldi	r24, 0xFF	; 255
 884:	0e 94 6f 03 	call	0x6de	; 0x6de <setMotorPWM>
			if (motor_flipping == MOTOR1) {
 888:	c1 11       	cpse	r28, r1
 88a:	06 c0       	rjmp	.+12     	; 0x898 <__vector_9+0x76>
				MOTOR1_DISABLE();
 88c:	55 98       	cbi	0x0a, 5	; 10
				MOTOR1_SETING(MOTOR_BREAK);
 88e:	84 b1       	in	r24, 0x04	; 4
 890:	8f 73       	andi	r24, 0x3F	; 63
 892:	84 b9       	out	0x04, r24	; 4
				MOTOR1_ENABLE();
 894:	55 9a       	sbi	0x0a, 5	; 10
 896:	35 c0       	rjmp	.+106    	; 0x902 <__stack+0x3>
			}
			else {
				MOTOR2_DISABLE();
 898:	56 98       	cbi	0x0a, 6	; 10
				MOTOR2_SETING(MOTOR_BREAK);
 89a:	87 b1       	in	r24, 0x07	; 7
 89c:	8f 7c       	andi	r24, 0xCF	; 207
 89e:	87 b9       	out	0x07, r24	; 7
				MOTOR2_ENABLE();
 8a0:	56 9a       	sbi	0x0a, 6	; 10
 8a2:	2f c0       	rjmp	.+94     	; 0x902 <__stack+0x3>
			}
			break;
		
		//We have stopped the pan at pancake destination time to go back
		case MOTOR_BREAK_FORWARD_TIME_S:
			setMotorPWM(MOTOR_OPTIMUM_PWM_BACKWARD, motor_flipping);
 8a4:	c0 91 09 01 	lds	r28, 0x0109	; 0x800109 <motor_flipping>
 8a8:	6c 2f       	mov	r22, r28
 8aa:	8f ef       	ldi	r24, 0xFF	; 255
 8ac:	0e 94 6f 03 	call	0x6de	; 0x6de <setMotorPWM>
			if (motor_flipping == MOTOR1) {
 8b0:	c1 11       	cpse	r28, r1
 8b2:	09 c0       	rjmp	.+18     	; 0x8c6 <__vector_9+0xa4>
				MOTOR1_DISABLE();
 8b4:	55 98       	cbi	0x0a, 5	; 10
				MOTOR1_SETING(MOTOR_BACKWARD);
 8b6:	84 b1       	in	r24, 0x04	; 4
 8b8:	8f 73       	andi	r24, 0x3F	; 63
 8ba:	80 68       	ori	r24, 0x80	; 128
 8bc:	84 b9       	out	0x04, r24	; 4
				MOTOR1_ENABLE();
 8be:	55 9a       	sbi	0x0a, 5	; 10
				startTimePan2();
 8c0:	0e 94 68 03 	call	0x6d0	; 0x6d0 <startTimePan2>
 8c4:	1e c0       	rjmp	.+60     	; 0x902 <__stack+0x3>
			}
			else {
				MOTOR2_DISABLE();
 8c6:	56 98       	cbi	0x0a, 6	; 10
				MOTOR2_SETING(MOTOR_BACKWARD);
 8c8:	87 b1       	in	r24, 0x07	; 7
 8ca:	8f 7c       	andi	r24, 0xCF	; 207
 8cc:	80 62       	ori	r24, 0x20	; 32
 8ce:	87 b9       	out	0x07, r24	; 7
				MOTOR2_ENABLE();
 8d0:	56 9a       	sbi	0x0a, 6	; 10
 8d2:	17 c0       	rjmp	.+46     	; 0x902 <__stack+0x3>
			}
			break;
		
		//We have reached the starting position set flags
		case MOTOR_BREAK_BACKWARD_TIME_S:
			if (motor_flipping == MOTOR1) {
 8d4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <motor_flipping>
 8d8:	81 11       	cpse	r24, r1
 8da:	08 c0       	rjmp	.+16     	; 0x8ec <__vector_9+0xca>
				MOTOR1_DISABLE();
 8dc:	55 98       	cbi	0x0a, 5	; 10
				MOTOR1_SETING(MOTOR_OFF);
 8de:	84 b1       	in	r24, 0x04	; 4
 8e0:	80 6c       	ori	r24, 0xC0	; 192
 8e2:	84 b9       	out	0x04, r24	; 4
				pan1Free = true;
 8e4:	81 e0       	ldi	r24, 0x01	; 1
 8e6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pan1Free>
 8ea:	09 c0       	rjmp	.+18     	; 0x8fe <__vector_9+0xdc>
			}
			else {
				MOTOR2_DISABLE();
 8ec:	56 98       	cbi	0x0a, 6	; 10
				MOTOR2_SETING(MOTOR_OFF);
 8ee:	87 b1       	in	r24, 0x07	; 7
 8f0:	80 63       	ori	r24, 0x30	; 48
 8f2:	87 b9       	out	0x07, r24	; 7
				pancake_done = true;
 8f4:	81 e0       	ldi	r24, 0x01	; 1
 8f6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pancake_done>
				pan2Free = true;
 8fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			}
			//Stop the timer
			stopTimer2();
 8fe:	0e 94 09 04 	call	0x812	; 0x812 <stopTimer2>
			break;
	}
}
 902:	ff 91       	pop	r31
 904:	ef 91       	pop	r30
 906:	cf 91       	pop	r28
 908:	bf 91       	pop	r27
 90a:	af 91       	pop	r26
 90c:	9f 91       	pop	r25
 90e:	8f 91       	pop	r24
 910:	7f 91       	pop	r23
 912:	6f 91       	pop	r22
 914:	5f 91       	pop	r21
 916:	4f 91       	pop	r20
 918:	3f 91       	pop	r19
 91a:	2f 91       	pop	r18
 91c:	0f 90       	pop	r0
 91e:	0f be       	out	0x3f, r0	; 63
 920:	0f 90       	pop	r0
 922:	1f 90       	pop	r1
 924:	18 95       	reti

00000926 <init_1Hz_timer>:
    }
}

void init_1Hz_timer(){
	//Setup timer
	PRR &= ~(1 << PRTIM1);	//Enable timer 1
 926:	e4 e6       	ldi	r30, 0x64	; 100
 928:	f0 e0       	ldi	r31, 0x00	; 0
 92a:	80 81       	ld	r24, Z
 92c:	87 7f       	andi	r24, 0xF7	; 247
 92e:	80 83       	st	Z, r24
	
	 
	//Timer is in fast PWM mode, TOP is ICR1 and prescaler is 256
	TCCR1A = (1 << WGM11);
 930:	82 e0       	ldi	r24, 0x02	; 2
 932:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS12);
 936:	8c e1       	ldi	r24, 0x1C	; 28
 938:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	
	//Set TOP value
	ICR1 = TIMER_1HZ_TOP;
 93c:	81 e1       	ldi	r24, 0x11	; 17
 93e:	9a e7       	ldi	r25, 0x7A	; 122
 940:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 944:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	
	//Overflow interrupt enabled
	TIMSK1 = (1 << TOIE1);
 948:	81 e0       	ldi	r24, 0x01	; 1
 94a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 94e:	08 95       	ret

00000950 <main>:
void init_1Hz_timer();

int main(void)
{
	//Enable interrupts
	sei();
 950:	78 94       	sei
	init_1Hz_timer();
 952:	0e 94 93 04 	call	0x926	; 0x926 <init_1Hz_timer>
	
	init_digital_comm();		//Initialize the digital communication
 956:	0e 94 53 00 	call	0xa6	; 0xa6 <init_digital_comm>
	I2C_SLAVE_init();			//Initialize the I2C communication
 95a:	0e 94 82 01 	call	0x304	; 0x304 <I2C_SLAVE_init>
	init_regulation();			//Initialize the regulation
 95e:	0e 94 76 00 	call	0xec	; 0xec <init_regulation>
	init_motors();				//Initialize the motor pins and PWMs
 962:	0e 94 af 03 	call	0x75e	; 0x75e <init_motors>
	
    /* Replace with your application code */
    while (1) 
    {
		if (pan1_cooking_time == PANCAKE_COOKING_TIME1_S){
 966:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pan1_cooking_time>
 96a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pan1_cooking_time+0x1>
 96e:	84 3b       	cpi	r24, 0xB4	; 180
 970:	91 05       	cpc	r25, r1
 972:	11 f4       	brne	.+4      	; 0x978 <main+0x28>
			flipPan1();
 974:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <flipPan1>
		}
		
		if (pan2_cooking_time == PANCAKE_COOKING_TIME2_S){
 978:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 97c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 980:	88 37       	cpi	r24, 0x78	; 120
 982:	91 05       	cpc	r25, r1
 984:	11 f4       	brne	.+4      	; 0x98a <main+0x3a>
			flipPan2();
 986:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <flipPan2>
		}
		
		if (I2C_SLAVE_checkData()){
 98a:	0e 94 35 01 	call	0x26a	; 0x26a <I2C_SLAVE_checkData>
 98e:	88 23       	and	r24, r24
 990:	51 f3       	breq	.-44     	; 0x966 <main+0x16>
	I2C_SLAVE_PORT |= 1 << I2C_SLAVE_SCL;
}

I2C_commands_t I2C_SLAVE_getData()
{
	return (I2C_commands_t)I2C_SLAVE_readFirst();
 992:	0e 94 ff 01 	call	0x3fe	; 0x3fe <I2C_SLAVE_readFirst>
			I2C_commands_t temp = I2C_SLAVE_getData();
			switch (temp) {
 996:	81 30       	cpi	r24, 0x01	; 1
 998:	41 f0       	breq	.+16     	; 0x9aa <main+0x5a>
 99a:	18 f0       	brcs	.+6      	; 0x9a2 <main+0x52>
 99c:	82 30       	cpi	r24, 0x02	; 2
 99e:	69 f0       	breq	.+26     	; 0x9ba <main+0x6a>
 9a0:	e2 cf       	rjmp	.-60     	; 0x966 <main+0x16>
				
				case PING:
					I2C_SLAVE_sendData(temp);
 9a2:	80 e0       	ldi	r24, 0x00	; 0
 9a4:	0e 94 40 01 	call	0x280	; 0x280 <I2C_SLAVE_sendData>
					break;
 9a8:	de cf       	rjmp	.-68     	; 0x966 <main+0x16>
				case GET_FIRST_PAN_STATUS:
					I2C_SLAVE_sendData(pan1Free & heat_ok);
 9aa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <pan1Free>
 9ae:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <heat_ok>
 9b2:	89 23       	and	r24, r25
 9b4:	0e 94 40 01 	call	0x280	; 0x280 <I2C_SLAVE_sendData>
					break;
 9b8:	d6 cf       	rjmp	.-84     	; 0x966 <main+0x16>
				case BEGIN_COOCKING:
					startTimePan1();
 9ba:	0e 94 61 03 	call	0x6c2	; 0x6c2 <startTimePan1>
					break;
 9be:	d3 cf       	rjmp	.-90     	; 0x966 <main+0x16>

000009c0 <__vector_13>:
	
	//Overflow interrupt enabled
	TIMSK1 = (1 << TOIE1);
}

ISR(TIMER1_OVF_vect){
 9c0:	1f 92       	push	r1
 9c2:	0f 92       	push	r0
 9c4:	0f b6       	in	r0, 0x3f	; 63
 9c6:	0f 92       	push	r0
 9c8:	11 24       	eor	r1, r1
 9ca:	2f 93       	push	r18
 9cc:	3f 93       	push	r19
 9ce:	4f 93       	push	r20
 9d0:	5f 93       	push	r21
 9d2:	6f 93       	push	r22
 9d4:	7f 93       	push	r23
 9d6:	8f 93       	push	r24
 9d8:	9f 93       	push	r25
 9da:	af 93       	push	r26
 9dc:	bf 93       	push	r27
 9de:	ef 93       	push	r30
 9e0:	ff 93       	push	r31
	
	//Control cooking time
	pan1_cooking_time += (pan1Free ? 0 : 1);
 9e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <pan1Free>
 9e6:	81 e0       	ldi	r24, 0x01	; 1
 9e8:	98 27       	eor	r25, r24
 9ea:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <pan1_cooking_time>
 9ee:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <pan1_cooking_time+0x1>
 9f2:	29 0f       	add	r18, r25
 9f4:	31 1d       	adc	r19, r1
 9f6:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <pan1_cooking_time+0x1>
 9fa:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <pan1_cooking_time>
	pan2_cooking_time += (pan2Free ? 0 : 1);
 9fe:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 a02:	89 27       	eor	r24, r25
 a04:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 a08:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
 a0c:	a9 01       	movw	r20, r18
 a0e:	48 0f       	add	r20, r24
 a10:	51 1d       	adc	r21, r1
 a12:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <__data_end+0x1>
 a16:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <__data_end>
	
	//Pancake Done
	pancakeDone();
 a1a:	0e 94 62 00 	call	0xc4	; 0xc4 <pancakeDone>
	
}
 a1e:	ff 91       	pop	r31
 a20:	ef 91       	pop	r30
 a22:	bf 91       	pop	r27
 a24:	af 91       	pop	r26
 a26:	9f 91       	pop	r25
 a28:	8f 91       	pop	r24
 a2a:	7f 91       	pop	r23
 a2c:	6f 91       	pop	r22
 a2e:	5f 91       	pop	r21
 a30:	4f 91       	pop	r20
 a32:	3f 91       	pop	r19
 a34:	2f 91       	pop	r18
 a36:	0f 90       	pop	r0
 a38:	0f be       	out	0x3f, r0	; 63
 a3a:	0f 90       	pop	r0
 a3c:	1f 90       	pop	r1
 a3e:	18 95       	reti

00000a40 <__subsf3>:
 a40:	50 58       	subi	r21, 0x80	; 128

00000a42 <__addsf3>:
 a42:	bb 27       	eor	r27, r27
 a44:	aa 27       	eor	r26, r26
 a46:	0e 94 38 05 	call	0xa70	; 0xa70 <__addsf3x>
 a4a:	0c 94 50 06 	jmp	0xca0	; 0xca0 <__fp_round>
 a4e:	0e 94 42 06 	call	0xc84	; 0xc84 <__fp_pscA>
 a52:	38 f0       	brcs	.+14     	; 0xa62 <__addsf3+0x20>
 a54:	0e 94 49 06 	call	0xc92	; 0xc92 <__fp_pscB>
 a58:	20 f0       	brcs	.+8      	; 0xa62 <__addsf3+0x20>
 a5a:	39 f4       	brne	.+14     	; 0xa6a <__addsf3+0x28>
 a5c:	9f 3f       	cpi	r25, 0xFF	; 255
 a5e:	19 f4       	brne	.+6      	; 0xa66 <__addsf3+0x24>
 a60:	26 f4       	brtc	.+8      	; 0xa6a <__addsf3+0x28>
 a62:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <__fp_nan>
 a66:	0e f4       	brtc	.+2      	; 0xa6a <__addsf3+0x28>
 a68:	e0 95       	com	r30
 a6a:	e7 fb       	bst	r30, 7
 a6c:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__fp_inf>

00000a70 <__addsf3x>:
 a70:	e9 2f       	mov	r30, r25
 a72:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__fp_split3>
 a76:	58 f3       	brcs	.-42     	; 0xa4e <__addsf3+0xc>
 a78:	ba 17       	cp	r27, r26
 a7a:	62 07       	cpc	r22, r18
 a7c:	73 07       	cpc	r23, r19
 a7e:	84 07       	cpc	r24, r20
 a80:	95 07       	cpc	r25, r21
 a82:	20 f0       	brcs	.+8      	; 0xa8c <__addsf3x+0x1c>
 a84:	79 f4       	brne	.+30     	; 0xaa4 <__addsf3x+0x34>
 a86:	a6 f5       	brtc	.+104    	; 0xaf0 <__addsf3x+0x80>
 a88:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_zero>
 a8c:	0e f4       	brtc	.+2      	; 0xa90 <__addsf3x+0x20>
 a8e:	e0 95       	com	r30
 a90:	0b 2e       	mov	r0, r27
 a92:	ba 2f       	mov	r27, r26
 a94:	a0 2d       	mov	r26, r0
 a96:	0b 01       	movw	r0, r22
 a98:	b9 01       	movw	r22, r18
 a9a:	90 01       	movw	r18, r0
 a9c:	0c 01       	movw	r0, r24
 a9e:	ca 01       	movw	r24, r20
 aa0:	a0 01       	movw	r20, r0
 aa2:	11 24       	eor	r1, r1
 aa4:	ff 27       	eor	r31, r31
 aa6:	59 1b       	sub	r21, r25
 aa8:	99 f0       	breq	.+38     	; 0xad0 <__addsf3x+0x60>
 aaa:	59 3f       	cpi	r21, 0xF9	; 249
 aac:	50 f4       	brcc	.+20     	; 0xac2 <__addsf3x+0x52>
 aae:	50 3e       	cpi	r21, 0xE0	; 224
 ab0:	68 f1       	brcs	.+90     	; 0xb0c <__addsf3x+0x9c>
 ab2:	1a 16       	cp	r1, r26
 ab4:	f0 40       	sbci	r31, 0x00	; 0
 ab6:	a2 2f       	mov	r26, r18
 ab8:	23 2f       	mov	r18, r19
 aba:	34 2f       	mov	r19, r20
 abc:	44 27       	eor	r20, r20
 abe:	58 5f       	subi	r21, 0xF8	; 248
 ac0:	f3 cf       	rjmp	.-26     	; 0xaa8 <__addsf3x+0x38>
 ac2:	46 95       	lsr	r20
 ac4:	37 95       	ror	r19
 ac6:	27 95       	ror	r18
 ac8:	a7 95       	ror	r26
 aca:	f0 40       	sbci	r31, 0x00	; 0
 acc:	53 95       	inc	r21
 ace:	c9 f7       	brne	.-14     	; 0xac2 <__addsf3x+0x52>
 ad0:	7e f4       	brtc	.+30     	; 0xaf0 <__addsf3x+0x80>
 ad2:	1f 16       	cp	r1, r31
 ad4:	ba 0b       	sbc	r27, r26
 ad6:	62 0b       	sbc	r22, r18
 ad8:	73 0b       	sbc	r23, r19
 ada:	84 0b       	sbc	r24, r20
 adc:	ba f0       	brmi	.+46     	; 0xb0c <__addsf3x+0x9c>
 ade:	91 50       	subi	r25, 0x01	; 1
 ae0:	a1 f0       	breq	.+40     	; 0xb0a <__addsf3x+0x9a>
 ae2:	ff 0f       	add	r31, r31
 ae4:	bb 1f       	adc	r27, r27
 ae6:	66 1f       	adc	r22, r22
 ae8:	77 1f       	adc	r23, r23
 aea:	88 1f       	adc	r24, r24
 aec:	c2 f7       	brpl	.-16     	; 0xade <__addsf3x+0x6e>
 aee:	0e c0       	rjmp	.+28     	; 0xb0c <__addsf3x+0x9c>
 af0:	ba 0f       	add	r27, r26
 af2:	62 1f       	adc	r22, r18
 af4:	73 1f       	adc	r23, r19
 af6:	84 1f       	adc	r24, r20
 af8:	48 f4       	brcc	.+18     	; 0xb0c <__addsf3x+0x9c>
 afa:	87 95       	ror	r24
 afc:	77 95       	ror	r23
 afe:	67 95       	ror	r22
 b00:	b7 95       	ror	r27
 b02:	f7 95       	ror	r31
 b04:	9e 3f       	cpi	r25, 0xFE	; 254
 b06:	08 f0       	brcs	.+2      	; 0xb0a <__addsf3x+0x9a>
 b08:	b0 cf       	rjmp	.-160    	; 0xa6a <__addsf3+0x28>
 b0a:	93 95       	inc	r25
 b0c:	88 0f       	add	r24, r24
 b0e:	08 f0       	brcs	.+2      	; 0xb12 <__addsf3x+0xa2>
 b10:	99 27       	eor	r25, r25
 b12:	ee 0f       	add	r30, r30
 b14:	97 95       	ror	r25
 b16:	87 95       	ror	r24
 b18:	08 95       	ret

00000b1a <ceil>:
 b1a:	0e 94 83 06 	call	0xd06	; 0xd06 <__fp_trunc>
 b1e:	90 f0       	brcs	.+36     	; 0xb44 <ceil+0x2a>
 b20:	9f 37       	cpi	r25, 0x7F	; 127
 b22:	48 f4       	brcc	.+18     	; 0xb36 <ceil+0x1c>
 b24:	91 11       	cpse	r25, r1
 b26:	16 f4       	brtc	.+4      	; 0xb2c <ceil+0x12>
 b28:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__fp_szero>
 b2c:	60 e0       	ldi	r22, 0x00	; 0
 b2e:	70 e0       	ldi	r23, 0x00	; 0
 b30:	80 e8       	ldi	r24, 0x80	; 128
 b32:	9f e3       	ldi	r25, 0x3F	; 63
 b34:	08 95       	ret
 b36:	26 f0       	brts	.+8      	; 0xb40 <ceil+0x26>
 b38:	1b 16       	cp	r1, r27
 b3a:	61 1d       	adc	r22, r1
 b3c:	71 1d       	adc	r23, r1
 b3e:	81 1d       	adc	r24, r1
 b40:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__fp_mintl>
 b44:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__fp_mpack>

00000b48 <__fixunssfsi>:
 b48:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__fp_splitA>
 b4c:	88 f0       	brcs	.+34     	; 0xb70 <__fixunssfsi+0x28>
 b4e:	9f 57       	subi	r25, 0x7F	; 127
 b50:	98 f0       	brcs	.+38     	; 0xb78 <__fixunssfsi+0x30>
 b52:	b9 2f       	mov	r27, r25
 b54:	99 27       	eor	r25, r25
 b56:	b7 51       	subi	r27, 0x17	; 23
 b58:	b0 f0       	brcs	.+44     	; 0xb86 <__fixunssfsi+0x3e>
 b5a:	e1 f0       	breq	.+56     	; 0xb94 <__fixunssfsi+0x4c>
 b5c:	66 0f       	add	r22, r22
 b5e:	77 1f       	adc	r23, r23
 b60:	88 1f       	adc	r24, r24
 b62:	99 1f       	adc	r25, r25
 b64:	1a f0       	brmi	.+6      	; 0xb6c <__fixunssfsi+0x24>
 b66:	ba 95       	dec	r27
 b68:	c9 f7       	brne	.-14     	; 0xb5c <__fixunssfsi+0x14>
 b6a:	14 c0       	rjmp	.+40     	; 0xb94 <__fixunssfsi+0x4c>
 b6c:	b1 30       	cpi	r27, 0x01	; 1
 b6e:	91 f0       	breq	.+36     	; 0xb94 <__fixunssfsi+0x4c>
 b70:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fp_zero>
 b74:	b1 e0       	ldi	r27, 0x01	; 1
 b76:	08 95       	ret
 b78:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_zero>
 b7c:	67 2f       	mov	r22, r23
 b7e:	78 2f       	mov	r23, r24
 b80:	88 27       	eor	r24, r24
 b82:	b8 5f       	subi	r27, 0xF8	; 248
 b84:	39 f0       	breq	.+14     	; 0xb94 <__fixunssfsi+0x4c>
 b86:	b9 3f       	cpi	r27, 0xF9	; 249
 b88:	cc f3       	brlt	.-14     	; 0xb7c <__fixunssfsi+0x34>
 b8a:	86 95       	lsr	r24
 b8c:	77 95       	ror	r23
 b8e:	67 95       	ror	r22
 b90:	b3 95       	inc	r27
 b92:	d9 f7       	brne	.-10     	; 0xb8a <__fixunssfsi+0x42>
 b94:	3e f4       	brtc	.+14     	; 0xba4 <__fixunssfsi+0x5c>
 b96:	90 95       	com	r25
 b98:	80 95       	com	r24
 b9a:	70 95       	com	r23
 b9c:	61 95       	neg	r22
 b9e:	7f 4f       	sbci	r23, 0xFF	; 255
 ba0:	8f 4f       	sbci	r24, 0xFF	; 255
 ba2:	9f 4f       	sbci	r25, 0xFF	; 255
 ba4:	08 95       	ret

00000ba6 <__floatunsisf>:
 ba6:	e8 94       	clt
 ba8:	09 c0       	rjmp	.+18     	; 0xbbc <__floatsisf+0x12>

00000baa <__floatsisf>:
 baa:	97 fb       	bst	r25, 7
 bac:	3e f4       	brtc	.+14     	; 0xbbc <__floatsisf+0x12>
 bae:	90 95       	com	r25
 bb0:	80 95       	com	r24
 bb2:	70 95       	com	r23
 bb4:	61 95       	neg	r22
 bb6:	7f 4f       	sbci	r23, 0xFF	; 255
 bb8:	8f 4f       	sbci	r24, 0xFF	; 255
 bba:	9f 4f       	sbci	r25, 0xFF	; 255
 bbc:	99 23       	and	r25, r25
 bbe:	a9 f0       	breq	.+42     	; 0xbea <__floatsisf+0x40>
 bc0:	f9 2f       	mov	r31, r25
 bc2:	96 e9       	ldi	r25, 0x96	; 150
 bc4:	bb 27       	eor	r27, r27
 bc6:	93 95       	inc	r25
 bc8:	f6 95       	lsr	r31
 bca:	87 95       	ror	r24
 bcc:	77 95       	ror	r23
 bce:	67 95       	ror	r22
 bd0:	b7 95       	ror	r27
 bd2:	f1 11       	cpse	r31, r1
 bd4:	f8 cf       	rjmp	.-16     	; 0xbc6 <__floatsisf+0x1c>
 bd6:	fa f4       	brpl	.+62     	; 0xc16 <__floatsisf+0x6c>
 bd8:	bb 0f       	add	r27, r27
 bda:	11 f4       	brne	.+4      	; 0xbe0 <__floatsisf+0x36>
 bdc:	60 ff       	sbrs	r22, 0
 bde:	1b c0       	rjmp	.+54     	; 0xc16 <__floatsisf+0x6c>
 be0:	6f 5f       	subi	r22, 0xFF	; 255
 be2:	7f 4f       	sbci	r23, 0xFF	; 255
 be4:	8f 4f       	sbci	r24, 0xFF	; 255
 be6:	9f 4f       	sbci	r25, 0xFF	; 255
 be8:	16 c0       	rjmp	.+44     	; 0xc16 <__floatsisf+0x6c>
 bea:	88 23       	and	r24, r24
 bec:	11 f0       	breq	.+4      	; 0xbf2 <__floatsisf+0x48>
 bee:	96 e9       	ldi	r25, 0x96	; 150
 bf0:	11 c0       	rjmp	.+34     	; 0xc14 <__floatsisf+0x6a>
 bf2:	77 23       	and	r23, r23
 bf4:	21 f0       	breq	.+8      	; 0xbfe <__floatsisf+0x54>
 bf6:	9e e8       	ldi	r25, 0x8E	; 142
 bf8:	87 2f       	mov	r24, r23
 bfa:	76 2f       	mov	r23, r22
 bfc:	05 c0       	rjmp	.+10     	; 0xc08 <__floatsisf+0x5e>
 bfe:	66 23       	and	r22, r22
 c00:	71 f0       	breq	.+28     	; 0xc1e <__floatsisf+0x74>
 c02:	96 e8       	ldi	r25, 0x86	; 134
 c04:	86 2f       	mov	r24, r22
 c06:	70 e0       	ldi	r23, 0x00	; 0
 c08:	60 e0       	ldi	r22, 0x00	; 0
 c0a:	2a f0       	brmi	.+10     	; 0xc16 <__floatsisf+0x6c>
 c0c:	9a 95       	dec	r25
 c0e:	66 0f       	add	r22, r22
 c10:	77 1f       	adc	r23, r23
 c12:	88 1f       	adc	r24, r24
 c14:	da f7       	brpl	.-10     	; 0xc0c <__floatsisf+0x62>
 c16:	88 0f       	add	r24, r24
 c18:	96 95       	lsr	r25
 c1a:	87 95       	ror	r24
 c1c:	97 f9       	bld	r25, 7
 c1e:	08 95       	ret

00000c20 <__fp_inf>:
 c20:	97 f9       	bld	r25, 7
 c22:	9f 67       	ori	r25, 0x7F	; 127
 c24:	80 e8       	ldi	r24, 0x80	; 128
 c26:	70 e0       	ldi	r23, 0x00	; 0
 c28:	60 e0       	ldi	r22, 0x00	; 0
 c2a:	08 95       	ret

00000c2c <__fp_mintl>:
 c2c:	88 23       	and	r24, r24
 c2e:	71 f4       	brne	.+28     	; 0xc4c <__fp_mintl+0x20>
 c30:	77 23       	and	r23, r23
 c32:	21 f0       	breq	.+8      	; 0xc3c <__fp_mintl+0x10>
 c34:	98 50       	subi	r25, 0x08	; 8
 c36:	87 2b       	or	r24, r23
 c38:	76 2f       	mov	r23, r22
 c3a:	07 c0       	rjmp	.+14     	; 0xc4a <__fp_mintl+0x1e>
 c3c:	66 23       	and	r22, r22
 c3e:	11 f4       	brne	.+4      	; 0xc44 <__fp_mintl+0x18>
 c40:	99 27       	eor	r25, r25
 c42:	0d c0       	rjmp	.+26     	; 0xc5e <__fp_mintl+0x32>
 c44:	90 51       	subi	r25, 0x10	; 16
 c46:	86 2b       	or	r24, r22
 c48:	70 e0       	ldi	r23, 0x00	; 0
 c4a:	60 e0       	ldi	r22, 0x00	; 0
 c4c:	2a f0       	brmi	.+10     	; 0xc58 <__fp_mintl+0x2c>
 c4e:	9a 95       	dec	r25
 c50:	66 0f       	add	r22, r22
 c52:	77 1f       	adc	r23, r23
 c54:	88 1f       	adc	r24, r24
 c56:	da f7       	brpl	.-10     	; 0xc4e <__fp_mintl+0x22>
 c58:	88 0f       	add	r24, r24
 c5a:	96 95       	lsr	r25
 c5c:	87 95       	ror	r24
 c5e:	97 f9       	bld	r25, 7
 c60:	08 95       	ret

00000c62 <__fp_mpack>:
 c62:	9f 3f       	cpi	r25, 0xFF	; 255
 c64:	31 f0       	breq	.+12     	; 0xc72 <__fp_mpack_finite+0xc>

00000c66 <__fp_mpack_finite>:
 c66:	91 50       	subi	r25, 0x01	; 1
 c68:	20 f4       	brcc	.+8      	; 0xc72 <__fp_mpack_finite+0xc>
 c6a:	87 95       	ror	r24
 c6c:	77 95       	ror	r23
 c6e:	67 95       	ror	r22
 c70:	b7 95       	ror	r27
 c72:	88 0f       	add	r24, r24
 c74:	91 1d       	adc	r25, r1
 c76:	96 95       	lsr	r25
 c78:	87 95       	ror	r24
 c7a:	97 f9       	bld	r25, 7
 c7c:	08 95       	ret

00000c7e <__fp_nan>:
 c7e:	9f ef       	ldi	r25, 0xFF	; 255
 c80:	80 ec       	ldi	r24, 0xC0	; 192
 c82:	08 95       	ret

00000c84 <__fp_pscA>:
 c84:	00 24       	eor	r0, r0
 c86:	0a 94       	dec	r0
 c88:	16 16       	cp	r1, r22
 c8a:	17 06       	cpc	r1, r23
 c8c:	18 06       	cpc	r1, r24
 c8e:	09 06       	cpc	r0, r25
 c90:	08 95       	ret

00000c92 <__fp_pscB>:
 c92:	00 24       	eor	r0, r0
 c94:	0a 94       	dec	r0
 c96:	12 16       	cp	r1, r18
 c98:	13 06       	cpc	r1, r19
 c9a:	14 06       	cpc	r1, r20
 c9c:	05 06       	cpc	r0, r21
 c9e:	08 95       	ret

00000ca0 <__fp_round>:
 ca0:	09 2e       	mov	r0, r25
 ca2:	03 94       	inc	r0
 ca4:	00 0c       	add	r0, r0
 ca6:	11 f4       	brne	.+4      	; 0xcac <__fp_round+0xc>
 ca8:	88 23       	and	r24, r24
 caa:	52 f0       	brmi	.+20     	; 0xcc0 <__fp_round+0x20>
 cac:	bb 0f       	add	r27, r27
 cae:	40 f4       	brcc	.+16     	; 0xcc0 <__fp_round+0x20>
 cb0:	bf 2b       	or	r27, r31
 cb2:	11 f4       	brne	.+4      	; 0xcb8 <__fp_round+0x18>
 cb4:	60 ff       	sbrs	r22, 0
 cb6:	04 c0       	rjmp	.+8      	; 0xcc0 <__fp_round+0x20>
 cb8:	6f 5f       	subi	r22, 0xFF	; 255
 cba:	7f 4f       	sbci	r23, 0xFF	; 255
 cbc:	8f 4f       	sbci	r24, 0xFF	; 255
 cbe:	9f 4f       	sbci	r25, 0xFF	; 255
 cc0:	08 95       	ret

00000cc2 <__fp_split3>:
 cc2:	57 fd       	sbrc	r21, 7
 cc4:	90 58       	subi	r25, 0x80	; 128
 cc6:	44 0f       	add	r20, r20
 cc8:	55 1f       	adc	r21, r21
 cca:	59 f0       	breq	.+22     	; 0xce2 <__fp_splitA+0x10>
 ccc:	5f 3f       	cpi	r21, 0xFF	; 255
 cce:	71 f0       	breq	.+28     	; 0xcec <__fp_splitA+0x1a>
 cd0:	47 95       	ror	r20

00000cd2 <__fp_splitA>:
 cd2:	88 0f       	add	r24, r24
 cd4:	97 fb       	bst	r25, 7
 cd6:	99 1f       	adc	r25, r25
 cd8:	61 f0       	breq	.+24     	; 0xcf2 <__fp_splitA+0x20>
 cda:	9f 3f       	cpi	r25, 0xFF	; 255
 cdc:	79 f0       	breq	.+30     	; 0xcfc <__fp_splitA+0x2a>
 cde:	87 95       	ror	r24
 ce0:	08 95       	ret
 ce2:	12 16       	cp	r1, r18
 ce4:	13 06       	cpc	r1, r19
 ce6:	14 06       	cpc	r1, r20
 ce8:	55 1f       	adc	r21, r21
 cea:	f2 cf       	rjmp	.-28     	; 0xcd0 <__fp_split3+0xe>
 cec:	46 95       	lsr	r20
 cee:	f1 df       	rcall	.-30     	; 0xcd2 <__fp_splitA>
 cf0:	08 c0       	rjmp	.+16     	; 0xd02 <__fp_splitA+0x30>
 cf2:	16 16       	cp	r1, r22
 cf4:	17 06       	cpc	r1, r23
 cf6:	18 06       	cpc	r1, r24
 cf8:	99 1f       	adc	r25, r25
 cfa:	f1 cf       	rjmp	.-30     	; 0xcde <__fp_splitA+0xc>
 cfc:	86 95       	lsr	r24
 cfe:	71 05       	cpc	r23, r1
 d00:	61 05       	cpc	r22, r1
 d02:	08 94       	sec
 d04:	08 95       	ret

00000d06 <__fp_trunc>:
 d06:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__fp_splitA>
 d0a:	a0 f0       	brcs	.+40     	; 0xd34 <__fp_trunc+0x2e>
 d0c:	be e7       	ldi	r27, 0x7E	; 126
 d0e:	b9 17       	cp	r27, r25
 d10:	88 f4       	brcc	.+34     	; 0xd34 <__fp_trunc+0x2e>
 d12:	bb 27       	eor	r27, r27
 d14:	9f 38       	cpi	r25, 0x8F	; 143
 d16:	60 f4       	brcc	.+24     	; 0xd30 <__fp_trunc+0x2a>
 d18:	16 16       	cp	r1, r22
 d1a:	b1 1d       	adc	r27, r1
 d1c:	67 2f       	mov	r22, r23
 d1e:	78 2f       	mov	r23, r24
 d20:	88 27       	eor	r24, r24
 d22:	98 5f       	subi	r25, 0xF8	; 248
 d24:	f7 cf       	rjmp	.-18     	; 0xd14 <__fp_trunc+0xe>
 d26:	86 95       	lsr	r24
 d28:	77 95       	ror	r23
 d2a:	67 95       	ror	r22
 d2c:	b1 1d       	adc	r27, r1
 d2e:	93 95       	inc	r25
 d30:	96 39       	cpi	r25, 0x96	; 150
 d32:	c8 f3       	brcs	.-14     	; 0xd26 <__fp_trunc+0x20>
 d34:	08 95       	ret

00000d36 <__fp_zero>:
 d36:	e8 94       	clt

00000d38 <__fp_szero>:
 d38:	bb 27       	eor	r27, r27
 d3a:	66 27       	eor	r22, r22
 d3c:	77 27       	eor	r23, r23
 d3e:	cb 01       	movw	r24, r22
 d40:	97 f9       	bld	r25, 7
 d42:	08 95       	ret

00000d44 <_exit>:
 d44:	f8 94       	cli

00000d46 <__stop_program>:
 d46:	ff cf       	rjmp	.-2      	; 0xd46 <__stop_program>
