
ProtocolTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000936  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800100  00800100  00000936  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000936  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000968  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fbd  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5c  00000000  00000000  00001a45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a0e  00000000  00000000  000024a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  00002eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000082a  00000000  00000000  00003100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000548  00000000  00000000  0000392a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003e72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 97 02 	jmp	0x52e	; 0x52e <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 62 03 	jmp	0x6c4	; 0x6c4 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 31       	cpi	r26, 0x13	; 19
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 84 03 	call	0x708	; 0x708 <main>
  88:	0c 94 5f 04 	jmp	0x8be	; 0x8be <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_SLAVE_checkData>:
void I2C_MASTER_init(char bitRate, I2C_MASTER_prescale_t pre)
{
	TWBR = bitRate;	//Set bitRate
	TWSR = (char)pre;	//Set prescaler
	
	TWCR = (1 << TWEN);	//Setup TWI to send NACK when data is recieved and enable HW
  90:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <I2C_SLAVE_first>
  94:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <I2C_SLAVE_last>
  98:	98 13       	cpse	r25, r24
  9a:	03 c0       	rjmp	.+6      	; 0xa2 <I2C_SLAVE_checkData+0x12>
  9c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <I2C_SLAVE_full>
  a0:	08 95       	ret
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	08 95       	ret

000000a6 <I2C_SLAVE_sendData>:
  a6:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <I2C_SLAVE_startRecived>
  aa:	99 23       	and	r25, r25
  ac:	21 f0       	breq	.+8      	; 0xb6 <I2C_SLAVE_sendData+0x10>
  ae:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <I2C_SLAVE_canSend>
  b2:	99 23       	and	r25, r25
  b4:	c1 f3       	breq	.-16     	; 0xa6 <I2C_SLAVE_sendData>
  b6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <I2C_SLAVE_canSend>
  ba:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <I2C_SLAVE_toSend>
  be:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <I2C_SLAVE_haveSended>
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <I2C_SLAVE_dataReady>
  c8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <I2C_SLAVE_beginHold>
  cc:	88 23       	and	r24, r24
  ce:	09 f4       	brne	.+2      	; 0xd2 <I2C_SLAVE_sendData+0x2c>
  d0:	4a c0       	rjmp	.+148    	; 0x166 <I2C_SLAVE_sendData+0xc0>
  d2:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <I2C_SLAVE_beginHold>
  d6:	e8 e6       	ldi	r30, 0x68	; 104
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	8b 7f       	andi	r24, 0xFB	; 251
  de:	80 83       	st	Z, r24
  e0:	2b b1       	in	r18, 0x0b	; 11
  e2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <I2C_SLAVE_toSend>
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	80 95       	com	r24
  ea:	90 95       	com	r25
  ec:	88 0f       	add	r24, r24
  ee:	89 2f       	mov	r24, r25
  f0:	88 1f       	adc	r24, r24
  f2:	99 0b       	sbc	r25, r25
  f4:	82 95       	swap	r24
  f6:	92 95       	swap	r25
  f8:	90 7f       	andi	r25, 0xF0	; 240
  fa:	98 27       	eor	r25, r24
  fc:	80 7f       	andi	r24, 0xF0	; 240
  fe:	98 27       	eor	r25, r24
 100:	80 71       	andi	r24, 0x10	; 16
 102:	92 2f       	mov	r25, r18
 104:	9f 7e       	andi	r25, 0xEF	; 239
 106:	89 0f       	add	r24, r25
 108:	8a b9       	out	0x0a, r24	; 10
 10a:	2b b1       	in	r18, 0x0b	; 11
 10c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <I2C_SLAVE_toSend>
 110:	88 1f       	adc	r24, r24
 112:	88 27       	eor	r24, r24
 114:	88 1f       	adc	r24, r24
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	82 95       	swap	r24
 11a:	92 95       	swap	r25
 11c:	90 7f       	andi	r25, 0xF0	; 240
 11e:	98 27       	eor	r25, r24
 120:	80 7f       	andi	r24, 0xF0	; 240
 122:	98 27       	eor	r25, r24
 124:	80 71       	andi	r24, 0x10	; 16
 126:	92 2f       	mov	r25, r18
 128:	9f 7e       	andi	r25, 0xEF	; 239
 12a:	89 0f       	add	r24, r25
 12c:	8b b9       	out	0x0b, r24	; 11
 12e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <I2C_SLAVE_haveSended>
 132:	8f 5f       	subi	r24, 0xFF	; 255
 134:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <I2C_SLAVE_haveSended>
 138:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <I2C_SLAVE_toSend>
 13c:	29 b1       	in	r18, 0x09	; 9
 13e:	88 1f       	adc	r24, r24
 140:	88 27       	eor	r24, r24
 142:	88 1f       	adc	r24, r24
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	82 95       	swap	r24
 148:	92 95       	swap	r25
 14a:	90 7f       	andi	r25, 0xF0	; 240
 14c:	98 27       	eor	r25, r24
 14e:	80 7f       	andi	r24, 0xF0	; 240
 150:	98 27       	eor	r25, r24
 152:	20 71       	andi	r18, 0x10	; 16
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	82 17       	cp	r24, r18
 158:	93 07       	cpc	r25, r19
 15a:	71 f7       	brne	.-36     	; 0x138 <I2C_SLAVE_sendData+0x92>
 15c:	e8 e6       	ldi	r30, 0x68	; 104
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	84 60       	ori	r24, 0x04	; 4
 164:	80 83       	st	Z, r24
 166:	52 98       	cbi	0x0a, 2	; 10
 168:	5a 9a       	sbi	0x0b, 2	; 11
 16a:	08 95       	ret

0000016c <I2C_SLAVE_getData>:
 16c:	0e 94 48 00 	call	0x90	; 0x90 <I2C_SLAVE_checkData>
 170:	88 23       	and	r24, r24
 172:	e1 f3       	breq	.-8      	; 0x16c <I2C_SLAVE_getData>
 174:	0e 94 48 00 	call	0x90	; 0x90 <I2C_SLAVE_checkData>
 178:	88 23       	and	r24, r24
 17a:	b9 f0       	breq	.+46     	; 0x1aa <I2C_SLAVE_getData+0x3e>
 17c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <I2C_SLAVE_full>
 180:	81 11       	cpse	r24, r1
 182:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <I2C_SLAVE_full>
 186:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <I2C_SLAVE_first>
 18a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <I2C_SLAVE_first>
 18e:	8f 5f       	subi	r24, 0xFF	; 255
 190:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <I2C_SLAVE_first>
 194:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <I2C_SLAVE_first>
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	10 f0       	brcs	.+4      	; 0x1a0 <I2C_SLAVE_getData+0x34>
 19c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <I2C_SLAVE_first>
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	e2 5f       	subi	r30, 0xF2	; 242
 1a4:	fe 4f       	sbci	r31, 0xFE	; 254
 1a6:	80 81       	ld	r24, Z
 1a8:	08 95       	ret
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	08 95       	ret

000001ae <I2C_SLAVE_init>:
 1ae:	e9 e6       	ldi	r30, 0x69	; 105
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	82 60       	ori	r24, 0x02	; 2
 1b6:	80 83       	st	Z, r24
 1b8:	80 81       	ld	r24, Z
 1ba:	81 60       	ori	r24, 0x01	; 1
 1bc:	80 83       	st	Z, r24
 1be:	e8 e6       	ldi	r30, 0x68	; 104
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	80 61       	ori	r24, 0x10	; 16
 1c6:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
 1ca:	80 81       	ld	r24, Z
 1cc:	84 60       	ori	r24, 0x04	; 4
 1ce:	80 83       	st	Z, r24
 1d0:	e8 9a       	sbi	0x1d, 0	; 29
 1d2:	8a b1       	in	r24, 0x0a	; 10
 1d4:	8b 7e       	andi	r24, 0xEB	; 235
 1d6:	8a b9       	out	0x0a, r24	; 10
 1d8:	8b b1       	in	r24, 0x0b	; 11
 1da:	84 61       	ori	r24, 0x14	; 20
 1dc:	8b b9       	out	0x0b, r24	; 11
 1de:	08 95       	ret

000001e0 <I2C_SLAVE_sendBit>:
 1e0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <I2C_SLAVE_dataReady>
 1e4:	91 30       	cpi	r25, 0x01	; 1
 1e6:	41 f4       	brne	.+16     	; 0x1f8 <I2C_SLAVE_sendBit+0x18>
 1e8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <I2C_SLAVE_toSend>
 1ec:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <I2C_SLAVE_tempSave>
 1f0:	92 e0       	ldi	r25, 0x02	; 2
 1f2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <I2C_SLAVE_dataReady>
 1f6:	03 c0       	rjmp	.+6      	; 0x1fe <I2C_SLAVE_sendBit+0x1e>
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <I2C_SLAVE_dataReady>
 1fe:	87 95       	ror	r24
 200:	88 27       	eor	r24, r24
 202:	87 95       	ror	r24
 204:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <I2C_SLAVE_toSend>
 208:	87 e0       	ldi	r24, 0x07	; 7
 20a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <I2C_SLAVE_haveSended>
 20e:	08 95       	ret

00000210 <I2C_SLAVE_beginSend>:
 210:	e9 e6       	ldi	r30, 0x69	; 105
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	82 60       	ori	r24, 0x02	; 2
 218:	80 83       	st	Z, r24
 21a:	80 81       	ld	r24, Z
 21c:	8e 7f       	andi	r24, 0xFE	; 254
 21e:	80 83       	st	Z, r24
 220:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <I2C_SLAVE_dataReady>
 224:	82 30       	cpi	r24, 0x02	; 2
 226:	21 f4       	brne	.+8      	; 0x230 <I2C_SLAVE_beginSend+0x20>
 228:	83 e0       	ldi	r24, 0x03	; 3
 22a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <I2C_SLAVE_dataReady>
 22e:	08 95       	ret
 230:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <I2C_SLAVE_dataReady>
 234:	08 95       	ret

00000236 <__vector_1>:
 236:	1f 92       	push	r1
 238:	0f 92       	push	r0
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
 240:	2f 93       	push	r18
 242:	3f 93       	push	r19
 244:	4f 93       	push	r20
 246:	5f 93       	push	r21
 248:	6f 93       	push	r22
 24a:	7f 93       	push	r23
 24c:	8f 93       	push	r24
 24e:	9f 93       	push	r25
 250:	af 93       	push	r26
 252:	bf 93       	push	r27
 254:	ef 93       	push	r30
 256:	ff 93       	push	r31
 258:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <I2C_SLAVE_startRecived>
 25c:	88 23       	and	r24, r24
 25e:	09 f4       	brne	.+2      	; 0x262 <__vector_1+0x2c>
 260:	55 c1       	rjmp	.+682    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 262:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 266:	83 70       	andi	r24, 0x03	; 3
 268:	83 30       	cpi	r24, 0x03	; 3
 26a:	09 f0       	breq	.+2      	; 0x26e <__vector_1+0x38>
 26c:	af c0       	rjmp	.+350    	; 0x3cc <__vector_1+0x196>
 26e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <I2C_SLAVE_haveSended>
 272:	88 30       	cpi	r24, 0x08	; 8
 274:	40 f0       	brcs	.+16     	; 0x286 <__vector_1+0x50>
 276:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <I2C_SLAVE_haveSended>
 27a:	8a b1       	in	r24, 0x0a	; 10
 27c:	8b 7e       	andi	r24, 0xEB	; 235
 27e:	8a b9       	out	0x0a, r24	; 10
 280:	8b b1       	in	r24, 0x0b	; 11
 282:	84 61       	ori	r24, 0x14	; 20
 284:	8b b9       	out	0x0b, r24	; 11
 286:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <I2C_SLAVE_recevedBits>
 28a:	87 30       	cpi	r24, 0x07	; 7
 28c:	20 f5       	brcc	.+72     	; 0x2d6 <__vector_1+0xa0>
 28e:	66 e0       	ldi	r22, 0x06	; 6
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	68 1b       	sub	r22, r24
 294:	71 09       	sbc	r23, r1
 296:	21 e0       	ldi	r18, 0x01	; 1
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	a9 01       	movw	r20, r18
 29c:	06 2e       	mov	r0, r22
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <__vector_1+0x6e>
 2a0:	44 0f       	add	r20, r20
 2a2:	55 1f       	adc	r21, r21
 2a4:	0a 94       	dec	r0
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <__vector_1+0x6a>
 2a8:	99 b1       	in	r25, 0x09	; 9
 2aa:	54 2f       	mov	r21, r20
 2ac:	50 95       	com	r21
 2ae:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <I2C_SLAVE_recevedAddr>
 2b2:	52 23       	and	r21, r18
 2b4:	92 95       	swap	r25
 2b6:	9f 70       	andi	r25, 0x0F	; 15
 2b8:	29 2f       	mov	r18, r25
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <__vector_1+0x8c>
 2be:	22 0f       	add	r18, r18
 2c0:	33 1f       	adc	r19, r19
 2c2:	6a 95       	dec	r22
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <__vector_1+0x88>
 2c6:	24 23       	and	r18, r20
 2c8:	25 0f       	add	r18, r21
 2ca:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <I2C_SLAVE_recevedAddr>
 2ce:	8f 5f       	subi	r24, 0xFF	; 255
 2d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <I2C_SLAVE_recevedBits>
 2d4:	1b c1       	rjmp	.+566    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 2d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <I2C_SLAVE_recevedAddr>
 2da:	90 37       	cpi	r25, 0x70	; 112
 2dc:	09 f0       	breq	.+2      	; 0x2e0 <__vector_1+0xaa>
 2de:	16 c1       	rjmp	.+556    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 2e0:	88 30       	cpi	r24, 0x08	; 8
 2e2:	b8 f4       	brcc	.+46     	; 0x312 <__vector_1+0xdc>
 2e4:	8f 5f       	subi	r24, 0xFF	; 255
 2e6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <I2C_SLAVE_recevedBits>
 2ea:	89 b1       	in	r24, 0x09	; 9
 2ec:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 2f0:	9e 7f       	andi	r25, 0xFE	; 254
 2f2:	82 95       	swap	r24
 2f4:	81 70       	andi	r24, 0x01	; 1
 2f6:	89 0f       	add	r24, r25
 2f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 2fc:	88 23       	and	r24, r24
 2fe:	19 f0       	breq	.+6      	; 0x306 <__vector_1+0xd0>
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <I2C_SLAVE_beginHold>
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <I2C_SLAVE_sendBit>
 30c:	0e 94 08 01 	call	0x210	; 0x210 <I2C_SLAVE_beginSend>
 310:	fd c0       	rjmp	.+506    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 312:	81 31       	cpi	r24, 0x11	; 17
 314:	08 f0       	brcs	.+2      	; 0x318 <__vector_1+0xe2>
 316:	fa c0       	rjmp	.+500    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 318:	6f e0       	ldi	r22, 0x0F	; 15
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	68 1b       	sub	r22, r24
 31e:	71 09       	sbc	r23, r1
 320:	21 e0       	ldi	r18, 0x01	; 1
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	a9 01       	movw	r20, r18
 326:	06 2e       	mov	r0, r22
 328:	02 c0       	rjmp	.+4      	; 0x32e <__vector_1+0xf8>
 32a:	44 0f       	add	r20, r20
 32c:	55 1f       	adc	r21, r21
 32e:	0a 94       	dec	r0
 330:	e2 f7       	brpl	.-8      	; 0x32a <__vector_1+0xf4>
 332:	99 b1       	in	r25, 0x09	; 9
 334:	54 2f       	mov	r21, r20
 336:	50 95       	com	r21
 338:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <I2C_SLAVE_recevedData>
 33c:	52 23       	and	r21, r18
 33e:	92 95       	swap	r25
 340:	9f 70       	andi	r25, 0x0F	; 15
 342:	29 2f       	mov	r18, r25
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	02 c0       	rjmp	.+4      	; 0x34c <__vector_1+0x116>
 348:	22 0f       	add	r18, r18
 34a:	33 1f       	adc	r19, r19
 34c:	6a 95       	dec	r22
 34e:	e2 f7       	brpl	.-8      	; 0x348 <__vector_1+0x112>
 350:	24 23       	and	r18, r20
 352:	25 0f       	add	r18, r21
 354:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <I2C_SLAVE_recevedData>
 358:	8f 5f       	subi	r24, 0xFF	; 255
 35a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <I2C_SLAVE_recevedBits>
 35e:	80 31       	cpi	r24, 0x10	; 16
 360:	09 f0       	breq	.+2      	; 0x364 <__vector_1+0x12e>
 362:	d4 c0       	rjmp	.+424    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 364:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <I2C_SLAVE_full>
 368:	88 23       	and	r24, r24
 36a:	69 f0       	breq	.+26     	; 0x386 <__vector_1+0x150>
 36c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <I2C_SLAVE_first>
 370:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <I2C_SLAVE_first>
 374:	8f 5f       	subi	r24, 0xFF	; 255
 376:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <I2C_SLAVE_first>
 37a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <I2C_SLAVE_first>
 37e:	82 30       	cpi	r24, 0x02	; 2
 380:	10 f0       	brcs	.+4      	; 0x386 <__vector_1+0x150>
 382:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <I2C_SLAVE_first>
 386:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <I2C_SLAVE_last>
 38a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <I2C_SLAVE_last>
 38e:	8f 5f       	subi	r24, 0xFF	; 255
 390:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <I2C_SLAVE_last>
 394:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <I2C_SLAVE_last>
 398:	82 30       	cpi	r24, 0x02	; 2
 39a:	10 f0       	brcs	.+4      	; 0x3a0 <__vector_1+0x16a>
 39c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <I2C_SLAVE_last>
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	e2 5f       	subi	r30, 0xF2	; 242
 3a4:	fe 4f       	sbci	r31, 0xFE	; 254
 3a6:	20 83       	st	Z, r18
 3a8:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <I2C_SLAVE_last>
 3ac:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <I2C_SLAVE_first>
 3b0:	98 13       	cpse	r25, r24
 3b2:	03 c0       	rjmp	.+6      	; 0x3ba <__vector_1+0x184>
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <I2C_SLAVE_full>
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <I2C_SLAVE_sendBit>
 3c0:	0e 94 08 01 	call	0x210	; 0x210 <I2C_SLAVE_beginSend>
 3c4:	88 e0       	ldi	r24, 0x08	; 8
 3c6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <I2C_SLAVE_recevedBits>
 3ca:	a0 c0       	rjmp	.+320    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 3cc:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 3d0:	83 70       	andi	r24, 0x03	; 3
 3d2:	82 30       	cpi	r24, 0x02	; 2
 3d4:	09 f0       	breq	.+2      	; 0x3d8 <__vector_1+0x1a2>
 3d6:	9a c0       	rjmp	.+308    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 3d8:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <I2C_SLAVE_haveSended>
 3dc:	38 30       	cpi	r19, 0x08	; 8
 3de:	08 f4       	brcc	.+2      	; 0x3e2 <__vector_1+0x1ac>
 3e0:	5d c0       	rjmp	.+186    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 3e2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <I2C_SLAVE_dataReady>
 3e6:	82 50       	subi	r24, 0x02	; 2
 3e8:	82 30       	cpi	r24, 0x02	; 2
 3ea:	c8 f5       	brcc	.+114    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <I2C_SLAVE_dataReady>
 3f2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_SLAVE_tempSave>
 3f6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <I2C_SLAVE_toSend>
 3fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 3fe:	88 23       	and	r24, r24
 400:	59 f1       	breq	.+86     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <I2C_SLAVE_haveSended>
 408:	2a b1       	in	r18, 0x0a	; 10
 40a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <I2C_SLAVE_toSend>
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	80 95       	com	r24
 412:	90 95       	com	r25
 414:	88 0f       	add	r24, r24
 416:	89 2f       	mov	r24, r25
 418:	88 1f       	adc	r24, r24
 41a:	99 0b       	sbc	r25, r25
 41c:	82 95       	swap	r24
 41e:	92 95       	swap	r25
 420:	90 7f       	andi	r25, 0xF0	; 240
 422:	98 27       	eor	r25, r24
 424:	80 7f       	andi	r24, 0xF0	; 240
 426:	98 27       	eor	r25, r24
 428:	80 71       	andi	r24, 0x10	; 16
 42a:	92 2f       	mov	r25, r18
 42c:	9f 7e       	andi	r25, 0xEF	; 239
 42e:	89 0f       	add	r24, r25
 430:	8a b9       	out	0x0a, r24	; 10
 432:	2b b1       	in	r18, 0x0b	; 11
 434:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <I2C_SLAVE_toSend>
 438:	88 1f       	adc	r24, r24
 43a:	88 27       	eor	r24, r24
 43c:	88 1f       	adc	r24, r24
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	82 95       	swap	r24
 442:	92 95       	swap	r25
 444:	90 7f       	andi	r25, 0xF0	; 240
 446:	98 27       	eor	r25, r24
 448:	80 7f       	andi	r24, 0xF0	; 240
 44a:	98 27       	eor	r25, r24
 44c:	80 71       	andi	r24, 0x10	; 16
 44e:	92 2f       	mov	r25, r18
 450:	9f 7e       	andi	r25, 0xEF	; 239
 452:	89 0f       	add	r24, r25
 454:	8b b9       	out	0x0b, r24	; 11
 456:	07 c0       	rjmp	.+14     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 458:	54 98       	cbi	0x0a, 4	; 10
 45a:	5c 9a       	sbi	0x0b, 4	; 11
 45c:	04 c0       	rjmp	.+8      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 45e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <I2C_SLAVE_dataReady>
 462:	54 98       	cbi	0x0a, 4	; 10
 464:	5c 9a       	sbi	0x0b, 4	; 11
 466:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <I2C_SLAVE_beginHold>
 46a:	88 23       	and	r24, r24
 46c:	71 f0       	breq	.+28     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 46e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <I2C_SLAVE_dataReady>
 472:	81 50       	subi	r24, 0x01	; 1
 474:	82 30       	cpi	r24, 0x02	; 2
 476:	18 f4       	brcc	.+6      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 478:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <I2C_SLAVE_beginHold>
 47c:	47 c0       	rjmp	.+142    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <I2C_SLAVE_canSend>
 484:	52 9a       	sbi	0x0a, 2	; 10
 486:	5a 98       	cbi	0x0b, 2	; 11
 488:	41 c0       	rjmp	.+130    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 48a:	e9 e6       	ldi	r30, 0x69	; 105
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	80 81       	ld	r24, Z
 490:	82 60       	ori	r24, 0x02	; 2
 492:	80 83       	st	Z, r24
 494:	80 81       	ld	r24, Z
 496:	81 60       	ori	r24, 0x01	; 1
 498:	80 83       	st	Z, r24
 49a:	38 c0       	rjmp	.+112    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 49c:	2a b1       	in	r18, 0x0a	; 10
 49e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <I2C_SLAVE_toSend>
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	80 95       	com	r24
 4a6:	90 95       	com	r25
 4a8:	47 e0       	ldi	r20, 0x07	; 7
 4aa:	50 e0       	ldi	r21, 0x00	; 0
 4ac:	ba 01       	movw	r22, r20
 4ae:	63 1b       	sub	r22, r19
 4b0:	71 09       	sbc	r23, r1
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b4:	95 95       	asr	r25
 4b6:	87 95       	ror	r24
 4b8:	6a 95       	dec	r22
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4bc:	82 95       	swap	r24
 4be:	92 95       	swap	r25
 4c0:	90 7f       	andi	r25, 0xF0	; 240
 4c2:	98 27       	eor	r25, r24
 4c4:	80 7f       	andi	r24, 0xF0	; 240
 4c6:	98 27       	eor	r25, r24
 4c8:	80 71       	andi	r24, 0x10	; 16
 4ca:	92 2f       	mov	r25, r18
 4cc:	9f 7e       	andi	r25, 0xEF	; 239
 4ce:	89 0f       	add	r24, r25
 4d0:	8a b9       	out	0x0a, r24	; 10
 4d2:	2b b1       	in	r18, 0x0b	; 11
 4d4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <I2C_SLAVE_toSend>
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <I2C_SLAVE_haveSended>
 4de:	43 1b       	sub	r20, r19
 4e0:	51 09       	sbc	r21, r1
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4e4:	95 95       	asr	r25
 4e6:	87 95       	ror	r24
 4e8:	4a 95       	dec	r20
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4ec:	82 95       	swap	r24
 4ee:	92 95       	swap	r25
 4f0:	90 7f       	andi	r25, 0xF0	; 240
 4f2:	98 27       	eor	r25, r24
 4f4:	80 7f       	andi	r24, 0xF0	; 240
 4f6:	98 27       	eor	r25, r24
 4f8:	80 71       	andi	r24, 0x10	; 16
 4fa:	92 2f       	mov	r25, r18
 4fc:	9f 7e       	andi	r25, 0xEF	; 239
 4fe:	89 0f       	add	r24, r25
 500:	8b b9       	out	0x0b, r24	; 11
 502:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <I2C_SLAVE_haveSended>
 506:	8f 5f       	subi	r24, 0xFF	; 255
 508:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <I2C_SLAVE_haveSended>
 50c:	ff 91       	pop	r31
 50e:	ef 91       	pop	r30
 510:	bf 91       	pop	r27
 512:	af 91       	pop	r26
 514:	9f 91       	pop	r25
 516:	8f 91       	pop	r24
 518:	7f 91       	pop	r23
 51a:	6f 91       	pop	r22
 51c:	5f 91       	pop	r21
 51e:	4f 91       	pop	r20
 520:	3f 91       	pop	r19
 522:	2f 91       	pop	r18
 524:	0f 90       	pop	r0
 526:	0f be       	out	0x3f, r0	; 63
 528:	0f 90       	pop	r0
 52a:	1f 90       	pop	r1
 52c:	18 95       	reti

0000052e <__vector_5>:
 52e:	1f 92       	push	r1
 530:	0f 92       	push	r0
 532:	0f b6       	in	r0, 0x3f	; 63
 534:	0f 92       	push	r0
 536:	11 24       	eor	r1, r1
 538:	8f 93       	push	r24
 53a:	ef 93       	push	r30
 53c:	ff 93       	push	r31
 53e:	4a 9b       	sbis	0x09, 2	; 9
 540:	1e c0       	rjmp	.+60     	; 0x57e <__vector_5+0x50>
 542:	4c 9b       	sbis	0x09, 4	; 9
 544:	03 c0       	rjmp	.+6      	; 0x54c <__vector_5+0x1e>
 546:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <I2C_SLAVE_startRecived>
 54a:	03 c0       	rjmp	.+6      	; 0x552 <__vector_5+0x24>
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <I2C_SLAVE_startRecived>
 552:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <I2C_SLAVE_startRecived>
 556:	81 11       	cpse	r24, r1
 558:	12 c0       	rjmp	.+36     	; 0x57e <__vector_5+0x50>
 55a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <I2C_SLAVE_beginHold>
 55e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <I2C_SLAVE_canSend>
 562:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <I2C_SLAVE_recevedAddr>
 566:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 56a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <I2C_SLAVE_recevedBits>
 56e:	e9 e6       	ldi	r30, 0x69	; 105
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	80 81       	ld	r24, Z
 574:	82 60       	ori	r24, 0x02	; 2
 576:	80 83       	st	Z, r24
 578:	80 81       	ld	r24, Z
 57a:	81 60       	ori	r24, 0x01	; 1
 57c:	80 83       	st	Z, r24
 57e:	ff 91       	pop	r31
 580:	ef 91       	pop	r30
 582:	8f 91       	pop	r24
 584:	0f 90       	pop	r0
 586:	0f be       	out	0x3f, r0	; 63
 588:	0f 90       	pop	r0
 58a:	1f 90       	pop	r1
 58c:	18 95       	reti

0000058e <I2C_MASTER_sendData>:

I2C_err_t I2C_MASTER_sendData(char addr, I2C_commands_t cmd)
{

	//Check and lock mutex
	if (I2C_MASTER_hw_mutex)
 58e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <I2C_MASTER_hw_mutex>
 592:	91 11       	cpse	r25, r1
 594:	4c c0       	rjmp	.+152    	; 0x62e <I2C_MASTER_sendData+0xa0>
	return I2C_NOT_EXCLUSIVE;
	
	I2C_MASTER_hw_mutex = true;
 596:	91 e0       	ldi	r25, 0x01	; 1
 598:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <I2C_MASTER_hw_mutex>
	
	//Start by sending a start condition
	TWCR = (1 << TWEN) | (1 << TWSTA) | (1 << TWINT);
 59c:	94 ea       	ldi	r25, 0xA4	; 164
 59e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	//Wait for start to transmit
	while (!(TWCR & (1<<TWINT)));
 5a2:	ec eb       	ldi	r30, 0xBC	; 188
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	90 81       	ld	r25, Z
 5a8:	99 23       	and	r25, r25
 5aa:	ec f7       	brge	.-6      	; 0x5a6 <I2C_MASTER_sendData+0x18>
	if ((TWSR & 0xF8) != 0x08)
 5ac:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 5b0:	98 7f       	andi	r25, 0xF8	; 248
 5b2:	98 30       	cpi	r25, 0x08	; 8
 5b4:	59 f5       	brne	.+86     	; 0x60c <I2C_MASTER_sendData+0x7e>
	goto I2C_write_fail;
	
	//Insert slave ADDR and write bit to data register
	TWDR = (addr << 1) + I2C_write;
 5b6:	88 0f       	add	r24, r24
 5b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	
	//Send addr and W
	TWCR = (1 << TWEN) | (1 << TWINT);
 5bc:	84 e8       	ldi	r24, 0x84	; 132
 5be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	//Wait for status
	while (!(TWCR & (1 << TWINT)));
 5c2:	ec eb       	ldi	r30, 0xBC	; 188
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	80 81       	ld	r24, Z
 5c8:	88 23       	and	r24, r24
 5ca:	ec f7       	brge	.-6      	; 0x5c6 <I2C_MASTER_sendData+0x38>
	if ((TWSR & 0xF8) == 0x20)
 5cc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 5d0:	88 7f       	andi	r24, 0xF8	; 248
 5d2:	80 32       	cpi	r24, 0x20	; 32
 5d4:	d9 f0       	breq	.+54     	; 0x60c <I2C_MASTER_sendData+0x7e>
	goto I2C_write_fail;
	
	//Write data
	TWDR = cmd;
 5d6:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
 5da:	84 e8       	ldi	r24, 0x84	; 132
 5dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	//Wait for status
	while (!(TWCR & (1 << TWINT)));
 5e0:	ec eb       	ldi	r30, 0xBC	; 188
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	80 81       	ld	r24, Z
 5e6:	88 23       	and	r24, r24
 5e8:	ec f7       	brge	.-6      	; 0x5e4 <I2C_MASTER_sendData+0x56>
	if ((TWSR & 0xF8) == 0x30)
 5ea:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 5ee:	88 7f       	andi	r24, 0xF8	; 248
 5f0:	80 33       	cpi	r24, 0x30	; 48
 5f2:	61 f0       	breq	.+24     	; 0x60c <I2C_MASTER_sendData+0x7e>
	goto I2C_write_fail;
	
	//Send stop
	TWCR = (1 << TWEN) | (1 << TWSTO) | (1 << TWINT);
 5f4:	84 e9       	ldi	r24, 0x94	; 148
 5f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	//Wait for stop-bit send
	while(TWCR & (1 << TWSTO));
 5fa:	ec eb       	ldi	r30, 0xBC	; 188
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	80 81       	ld	r24, Z
 600:	84 fd       	sbrc	r24, 4
 602:	fd cf       	rjmp	.-6      	; 0x5fe <I2C_MASTER_sendData+0x70>
	//Unlock mutex
	I2C_MASTER_hw_mutex = false;
 604:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <I2C_MASTER_hw_mutex>
	return I2C_OK;
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	08 95       	ret
	
	
	I2C_write_fail:
	//Send stop and stop interrupts
	TWCR = (1 << TWEN) | (1 << TWSTO) | (1 << TWINT);
 60c:	84 e9       	ldi	r24, 0x94	; 148
 60e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	//Wait for stop-bit send
	while(TWCR & (1 << TWSTO));
 612:	ec eb       	ldi	r30, 0xBC	; 188
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	80 81       	ld	r24, Z
 618:	84 fd       	sbrc	r24, 4
 61a:	fd cf       	rjmp	.-6      	; 0x616 <I2C_MASTER_sendData+0x88>
	
	//Reset I2C module
	TWCR &= ~(1 << TWEN);
 61c:	ec eb       	ldi	r30, 0xBC	; 188
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	80 81       	ld	r24, Z
 622:	8b 7f       	andi	r24, 0xFB	; 251
 624:	80 83       	st	Z, r24

	I2C_MASTER_hw_mutex = false;
 626:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <I2C_MASTER_hw_mutex>
	return 	I2C_SEND_FAIL;
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	08 95       	ret
I2C_err_t I2C_MASTER_sendData(char addr, I2C_commands_t cmd)
{

	//Check and lock mutex
	if (I2C_MASTER_hw_mutex)
	return I2C_NOT_EXCLUSIVE;
 62e:	83 e0       	ldi	r24, 0x03	; 3
	//Reset I2C module
	TWCR &= ~(1 << TWEN);

	I2C_MASTER_hw_mutex = false;
	return 	I2C_SEND_FAIL;
}
 630:	08 95       	ret

00000632 <I2C_MASTER_readData>:

I2C_err_t I2C_MASTER_readData(char addr) {

	//Lock mutex
	if (I2C_MASTER_hw_mutex)
 632:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <I2C_MASTER_hw_mutex>
 636:	91 11       	cpse	r25, r1
 638:	37 c0       	rjmp	.+110    	; 0x6a8 <I2C_MASTER_readData+0x76>
	return I2C_NOT_EXCLUSIVE;
	
	I2C_MASTER_hw_mutex = true;
 63a:	91 e0       	ldi	r25, 0x01	; 1
 63c:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <I2C_MASTER_hw_mutex>

	//Start by sending a start condition
	TWCR = (1 << TWEN) | (1 << TWSTA) | (1 << TWINT);
 640:	94 ea       	ldi	r25, 0xA4	; 164
 642:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	//Wait for start to transmit
	while (!(TWCR & (1<<TWINT)));
 646:	ec eb       	ldi	r30, 0xBC	; 188
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	90 81       	ld	r25, Z
 64c:	99 23       	and	r25, r25
 64e:	ec f7       	brge	.-6      	; 0x64a <I2C_MASTER_readData+0x18>
	if ((TWSR & 0xF8) != 0x08)
 650:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 654:	98 7f       	andi	r25, 0xF8	; 248
 656:	98 30       	cpi	r25, 0x08	; 8
 658:	b1 f4       	brne	.+44     	; 0x686 <I2C_MASTER_readData+0x54>
	goto I2C_read_fail;
	
	
	//Insert slave ADDR and read bit to data register
	TWDR = (addr << 1) + I2C_read;
 65a:	88 0f       	add	r24, r24
 65c:	8f 5f       	subi	r24, 0xFF	; 255
 65e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	
	//Send addr and R
	TWCR = (1 << TWEN) | (1 << TWINT);
 662:	84 e8       	ldi	r24, 0x84	; 132
 664:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	//Wait for status
	while (!(TWCR & (1 << TWINT))){}
 668:	ec eb       	ldi	r30, 0xBC	; 188
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	80 81       	ld	r24, Z
 66e:	88 23       	and	r24, r24
 670:	ec f7       	brge	.-6      	; 0x66c <I2C_MASTER_readData+0x3a>
	if ((TWSR & 0xF8) == 0x48)
 672:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 676:	88 7f       	andi	r24, 0xF8	; 248
 678:	88 34       	cpi	r24, 0x48	; 72
 67a:	29 f0       	breq	.+10     	; 0x686 <I2C_MASTER_readData+0x54>
	goto I2C_read_fail;
	//Enable read interrupt, so CPU can do other stuff
	TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT);
 67c:	85 e8       	ldi	r24, 0x85	; 133
 67e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	return I2C_OK;
 682:	80 e0       	ldi	r24, 0x00	; 0
 684:	08 95       	ret
	//Do NOT unlock mutex before data is read
	
	I2C_read_fail:
	//Send stop and stop interrupts
	TWCR = (1 << TWEN) | (1 << TWSTO) | (1 << TWINT);
 686:	84 e9       	ldi	r24, 0x94	; 148
 688:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	//Wait for stop-bit send
	while(TWCR & (1 << TWSTO));
 68c:	ec eb       	ldi	r30, 0xBC	; 188
 68e:	f0 e0       	ldi	r31, 0x00	; 0
 690:	80 81       	ld	r24, Z
 692:	84 fd       	sbrc	r24, 4
 694:	fd cf       	rjmp	.-6      	; 0x690 <I2C_MASTER_readData+0x5e>

	//Reset I2C module
	TWCR &= ~(1 << TWEN);
 696:	ec eb       	ldi	r30, 0xBC	; 188
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	80 81       	ld	r24, Z
 69c:	8b 7f       	andi	r24, 0xFB	; 251
 69e:	80 83       	st	Z, r24

	I2C_MASTER_hw_mutex = false;
 6a0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <I2C_MASTER_hw_mutex>
	return I2C_READ_FAIL;
 6a4:	82 e0       	ldi	r24, 0x02	; 2
 6a6:	08 95       	ret

I2C_err_t I2C_MASTER_readData(char addr) {

	//Lock mutex
	if (I2C_MASTER_hw_mutex)
	return I2C_NOT_EXCLUSIVE;
 6a8:	83 e0       	ldi	r24, 0x03	; 3
	//Reset I2C module
	TWCR &= ~(1 << TWEN);

	I2C_MASTER_hw_mutex = false;
	return I2C_READ_FAIL;
}
 6aa:	08 95       	ret

000006ac <I2C_MASTER_checkData>:

volatile bool I2C_MASTER_checkData() {
	return data_ready_flag;
 6ac:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <data_ready_flag>
}
 6b0:	08 95       	ret

000006b2 <I2C_MASTER_getData>:

char I2C_MASTER_getData() {
	
	//Block if no data
	while(!I2C_MASTER_checkData());
 6b2:	0e 94 56 03 	call	0x6ac	; 0x6ac <I2C_MASTER_checkData>
 6b6:	88 23       	and	r24, r24
 6b8:	e1 f3       	breq	.-8      	; 0x6b2 <I2C_MASTER_getData>
	
	//Update status
	data_ready_flag = false;
 6ba:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <data_ready_flag>
	
	//Return data
	return local_read_data;
 6be:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <local_read_data>
}
 6c2:	08 95       	ret

000006c4 <__vector_24>:

//Read data from TWI
ISR(TWI_vect) {
 6c4:	1f 92       	push	r1
 6c6:	0f 92       	push	r0
 6c8:	0f b6       	in	r0, 0x3f	; 63
 6ca:	0f 92       	push	r0
 6cc:	11 24       	eor	r1, r1
 6ce:	8f 93       	push	r24
 6d0:	ef 93       	push	r30
 6d2:	ff 93       	push	r31

	//Save data
	local_read_data = TWDR;
 6d4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 6d8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <local_read_data>
	
	//Set flag
	data_ready_flag = true;
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <data_ready_flag>
	
	//Send stop and stop interrupts
	TWCR = (1 << TWEN) | (1 << TWSTO) | (1 << TWINT);
 6e2:	84 e9       	ldi	r24, 0x94	; 148
 6e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	//Enable interrupt nesting
	sei();
 6e8:	78 94       	sei
	
	//Wait for stop-bit send
	while(TWCR & (1 << TWSTO));
 6ea:	ec eb       	ldi	r30, 0xBC	; 188
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	80 81       	ld	r24, Z
 6f0:	84 fd       	sbrc	r24, 4
 6f2:	fd cf       	rjmp	.-6      	; 0x6ee <__vector_24+0x2a>

	//Unlock mutex from read
	I2C_MASTER_hw_mutex = false;
 6f4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <I2C_MASTER_hw_mutex>
	
}
 6f8:	ff 91       	pop	r31
 6fa:	ef 91       	pop	r30
 6fc:	8f 91       	pop	r24
 6fe:	0f 90       	pop	r0
 700:	0f be       	out	0x3f, r0	; 63
 702:	0f 90       	pop	r0
 704:	1f 90       	pop	r1
 706:	18 95       	reti

00000708 <main>:

void wait();

int main(void)
{
	DDRB|= 1<<5 ;
 708:	25 9a       	sbi	0x04, 5	; 4
	PORTB = 0 << 5;
 70a:	15 b8       	out	0x05, r1	; 5
	uint8_t c = 0;
	I2C_SLAVE_init();
 70c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <I2C_SLAVE_init>
static volatile uint8_t local_read_data = 0;
static volatile bool data_ready_flag = false;

void I2C_MASTER_init(char bitRate, I2C_MASTER_prescale_t pre)
{
	TWBR = bitRate;	//Set bitRate
 710:	8f ef       	ldi	r24, 0xFF	; 255
 712:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWSR = (char)pre;	//Set prescaler
 716:	83 e0       	ldi	r24, 0x03	; 3
 718:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	
	TWCR = (1 << TWEN);	//Setup TWI to send NACK when data is recieved and enable HW
 71c:	84 e0       	ldi	r24, 0x04	; 4
 71e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	I2C_MASTER_init(255,I2C_MASTER_PRESCALE_64);
	I2C_SLAVE_SCL_INT_ENAB(1);
 722:	e8 9a       	sbi	0x1d, 0	; 29
	sei();
 724:	78 94       	sei
	initUART(9600, 8, 1, 0);
 726:	00 e0       	ldi	r16, 0x00	; 0
 728:	21 e0       	ldi	r18, 0x01	; 1
 72a:	48 e0       	ldi	r20, 0x08	; 8
 72c:	60 e8       	ldi	r22, 0x80	; 128
 72e:	75 e2       	ldi	r23, 0x25	; 37
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	0e 94 c6 03 	call	0x78c	; 0x78c <initUART>
	//DDRB = 0x1<<5;
	//sendChar('A');
	
	I2C_MASTER_sendData(0x70, 0x05);
 738:	65 e0       	ldi	r22, 0x05	; 5
 73a:	80 e7       	ldi	r24, 0x70	; 112
 73c:	0e 94 c7 02 	call	0x58e	; 0x58e <I2C_MASTER_sendData>
	c = (uint8_t) I2C_SLAVE_getData();
 740:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_SLAVE_getData>
 744:	c8 2f       	mov	r28, r24
	
    while (1) 
    {
		I2C_SLAVE_sendData(c);
 746:	8c 2f       	mov	r24, r28
 748:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_SLAVE_sendData>
		I2C_MASTER_readData(0x70);
 74c:	80 e7       	ldi	r24, 0x70	; 112
 74e:	0e 94 19 03 	call	0x632	; 0x632 <I2C_MASTER_readData>
		PORTB = 0 << 5;
 752:	15 b8       	out	0x05, r1	; 5
		if(c == 255)
 754:	cf 3f       	cpi	r28, 0xFF	; 255
 756:	11 f0       	breq	.+4      	; 0x75c <main+0x54>
		{
			c = 0;
		}
		else
		{
			c++;
 758:	cf 5f       	subi	r28, 0xFF	; 255
 75a:	01 c0       	rjmp	.+2      	; 0x75e <main+0x56>
		I2C_SLAVE_sendData(c);
		I2C_MASTER_readData(0x70);
		PORTB = 0 << 5;
		if(c == 255)
		{
			c = 0;
 75c:	c0 e0       	ldi	r28, 0x00	; 0
		}
		else
		{
			c++;
		}
		wait();
 75e:	0e 94 b6 03 	call	0x76c	; 0x76c <wait>
		sendChar(I2C_MASTER_getData());
 762:	0e 94 59 03 	call	0x6b2	; 0x6b2 <I2C_MASTER_getData>
 766:	0e 94 35 04 	call	0x86a	; 0x86a <sendChar>
		
		
    }
 76a:	ed cf       	rjmp	.-38     	; 0x746 <main+0x3e>

0000076c <wait>:
}

#pragma GCC optimize 0
void wait()
{
 76c:	cf 93       	push	r28
 76e:	df 93       	push	r29
 770:	cd b7       	in	r28, 0x3d	; 61
 772:	de b7       	in	r29, 0x3e	; 62
	while(!I2C_MASTER_checkData())
 774:	00 00       	nop
 776:	0e 94 56 03 	call	0x6ac	; 0x6ac <I2C_MASTER_checkData>
 77a:	98 2f       	mov	r25, r24
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	89 27       	eor	r24, r25
 780:	88 23       	and	r24, r24
 782:	c9 f7       	brne	.-14     	; 0x776 <wait+0xa>
	{
	}
}
 784:	00 00       	nop
 786:	df 91       	pop	r29
 788:	cf 91       	pop	r28
 78a:	08 95       	ret

0000078c <initUART>:
char readChar()
{
	while(!(UCSR0A & (1<<7)))
	{}
	return UDR0;
}
 78c:	cf 92       	push	r12
 78e:	df 92       	push	r13
 790:	ef 92       	push	r14
 792:	ff 92       	push	r15
 794:	0f 93       	push	r16
 796:	6b 01       	movw	r12, r22
 798:	7c 01       	movw	r14, r24
 79a:	3c e2       	ldi	r19, 0x2C	; 44
 79c:	c3 1a       	sub	r12, r19
 79e:	31 e0       	ldi	r19, 0x01	; 1
 7a0:	d3 0a       	sbc	r13, r19
 7a2:	e1 08       	sbc	r14, r1
 7a4:	f1 08       	sbc	r15, r1
 7a6:	35 ed       	ldi	r19, 0xD5	; 213
 7a8:	c3 16       	cp	r12, r19
 7aa:	30 ec       	ldi	r19, 0xC0	; 192
 7ac:	d3 06       	cpc	r13, r19
 7ae:	31 e0       	ldi	r19, 0x01	; 1
 7b0:	e3 06       	cpc	r14, r19
 7b2:	f1 04       	cpc	r15, r1
 7b4:	08 f0       	brcs	.+2      	; 0x7b8 <initUART+0x2c>
 7b6:	53 c0       	rjmp	.+166    	; 0x85e <initUART+0xd2>
 7b8:	45 50       	subi	r20, 0x05	; 5
 7ba:	44 30       	cpi	r20, 0x04	; 4
 7bc:	08 f0       	brcs	.+2      	; 0x7c0 <initUART+0x34>
 7be:	4f c0       	rjmp	.+158    	; 0x85e <initUART+0xd2>
 7c0:	38 e1       	ldi	r19, 0x18	; 24
 7c2:	30 93 c1 00 	sts	0x00C1, r19	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 7c6:	44 0f       	add	r20, r20
 7c8:	40 93 c2 00 	sts	0x00C2, r20	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 7cc:	22 23       	and	r18, r18
 7ce:	29 f0       	breq	.+10     	; 0x7da <initUART+0x4e>
 7d0:	e1 ec       	ldi	r30, 0xC1	; 193
 7d2:	f0 e0       	ldi	r31, 0x00	; 0
 7d4:	20 81       	ld	r18, Z
 7d6:	20 68       	ori	r18, 0x80	; 128
 7d8:	20 83       	st	Z, r18
 7da:	05 34       	cpi	r16, 0x45	; 69
 7dc:	31 f4       	brne	.+12     	; 0x7ea <initUART+0x5e>
 7de:	e2 ec       	ldi	r30, 0xC2	; 194
 7e0:	f0 e0       	ldi	r31, 0x00	; 0
 7e2:	20 81       	ld	r18, Z
 7e4:	20 62       	ori	r18, 0x20	; 32
 7e6:	20 83       	st	Z, r18
 7e8:	07 c0       	rjmp	.+14     	; 0x7f8 <initUART+0x6c>
 7ea:	0f 34       	cpi	r16, 0x4F	; 79
 7ec:	29 f4       	brne	.+10     	; 0x7f8 <initUART+0x6c>
 7ee:	e2 ec       	ldi	r30, 0xC2	; 194
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	20 81       	ld	r18, Z
 7f4:	20 63       	ori	r18, 0x30	; 48
 7f6:	20 83       	st	Z, r18
 7f8:	6b 01       	movw	r12, r22
 7fa:	7c 01       	movw	r14, r24
 7fc:	20 e8       	ldi	r18, 0x80	; 128
 7fe:	c2 0e       	add	r12, r18
 800:	24 e8       	ldi	r18, 0x84	; 132
 802:	d2 1e       	adc	r13, r18
 804:	2e e1       	ldi	r18, 0x1E	; 30
 806:	e2 1e       	adc	r14, r18
 808:	f1 1c       	adc	r15, r1
 80a:	cc 0c       	add	r12, r12
 80c:	dd 1c       	adc	r13, r13
 80e:	ee 1c       	adc	r14, r14
 810:	ff 1c       	adc	r15, r15
 812:	cc 0c       	add	r12, r12
 814:	dd 1c       	adc	r13, r13
 816:	ee 1c       	adc	r14, r14
 818:	ff 1c       	adc	r15, r15
 81a:	cc 0c       	add	r12, r12
 81c:	dd 1c       	adc	r13, r13
 81e:	ee 1c       	adc	r14, r14
 820:	ff 1c       	adc	r15, r15
 822:	dc 01       	movw	r26, r24
 824:	cb 01       	movw	r24, r22
 826:	88 0f       	add	r24, r24
 828:	99 1f       	adc	r25, r25
 82a:	aa 1f       	adc	r26, r26
 82c:	bb 1f       	adc	r27, r27
 82e:	88 0f       	add	r24, r24
 830:	99 1f       	adc	r25, r25
 832:	aa 1f       	adc	r26, r26
 834:	bb 1f       	adc	r27, r27
 836:	9c 01       	movw	r18, r24
 838:	ad 01       	movw	r20, r26
 83a:	22 0f       	add	r18, r18
 83c:	33 1f       	adc	r19, r19
 83e:	44 1f       	adc	r20, r20
 840:	55 1f       	adc	r21, r21
 842:	22 0f       	add	r18, r18
 844:	33 1f       	adc	r19, r19
 846:	44 1f       	adc	r20, r20
 848:	55 1f       	adc	r21, r21
 84a:	c7 01       	movw	r24, r14
 84c:	b6 01       	movw	r22, r12
 84e:	0e 94 3d 04 	call	0x87a	; 0x87a <__udivmodsi4>
 852:	21 50       	subi	r18, 0x01	; 1
 854:	31 09       	sbc	r19, r1
 856:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 85a:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 85e:	0f 91       	pop	r16
 860:	ff 90       	pop	r15
 862:	ef 90       	pop	r14
 864:	df 90       	pop	r13
 866:	cf 90       	pop	r12
 868:	08 95       	ret

0000086a <sendChar>:
void sendChar(char sChar)
{
	while(!(UCSR0A & (1<<5)))
 86a:	e0 ec       	ldi	r30, 0xC0	; 192
 86c:	f0 e0       	ldi	r31, 0x00	; 0
 86e:	90 81       	ld	r25, Z
 870:	95 ff       	sbrs	r25, 5
 872:	fd cf       	rjmp	.-6      	; 0x86e <sendChar+0x4>
	{}
	UDR0 = sChar;
 874:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 878:	08 95       	ret

0000087a <__udivmodsi4>:
 87a:	a1 e2       	ldi	r26, 0x21	; 33
 87c:	1a 2e       	mov	r1, r26
 87e:	aa 1b       	sub	r26, r26
 880:	bb 1b       	sub	r27, r27
 882:	fd 01       	movw	r30, r26
 884:	0d c0       	rjmp	.+26     	; 0x8a0 <__udivmodsi4_ep>

00000886 <__udivmodsi4_loop>:
 886:	aa 1f       	adc	r26, r26
 888:	bb 1f       	adc	r27, r27
 88a:	ee 1f       	adc	r30, r30
 88c:	ff 1f       	adc	r31, r31
 88e:	a2 17       	cp	r26, r18
 890:	b3 07       	cpc	r27, r19
 892:	e4 07       	cpc	r30, r20
 894:	f5 07       	cpc	r31, r21
 896:	20 f0       	brcs	.+8      	; 0x8a0 <__udivmodsi4_ep>
 898:	a2 1b       	sub	r26, r18
 89a:	b3 0b       	sbc	r27, r19
 89c:	e4 0b       	sbc	r30, r20
 89e:	f5 0b       	sbc	r31, r21

000008a0 <__udivmodsi4_ep>:
 8a0:	66 1f       	adc	r22, r22
 8a2:	77 1f       	adc	r23, r23
 8a4:	88 1f       	adc	r24, r24
 8a6:	99 1f       	adc	r25, r25
 8a8:	1a 94       	dec	r1
 8aa:	69 f7       	brne	.-38     	; 0x886 <__udivmodsi4_loop>
 8ac:	60 95       	com	r22
 8ae:	70 95       	com	r23
 8b0:	80 95       	com	r24
 8b2:	90 95       	com	r25
 8b4:	9b 01       	movw	r18, r22
 8b6:	ac 01       	movw	r20, r24
 8b8:	bd 01       	movw	r22, r26
 8ba:	cf 01       	movw	r24, r30
 8bc:	08 95       	ret

000008be <_exit>:
 8be:	f8 94       	cli

000008c0 <__stop_program>:
 8c0:	ff cf       	rjmp	.-2      	; 0x8c0 <__stop_program>
