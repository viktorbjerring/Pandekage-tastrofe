
BatterController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000e24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000db0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800100  00800100  00000e24  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000171d  00000000  00000000  0000103c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e44  00000000  00000000  00002759  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000109d  00000000  00000000  0000359d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000398  00000000  00000000  0000463c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000be1  00000000  00000000  000049d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000666  00000000  00000000  000055b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00005c1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 ba 04 	jmp	0x974	; 0x974 <__vector_4>
  14:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 7f 04 	jmp	0x8fe	; 0x8fe <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 32       	cpi	r26, 0x2A	; 42
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ca 03 	call	0x794	; 0x794 <main>
  88:	0c 94 d6 06 	jmp	0xdac	; 0xdac <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z22beginCoolingRegulationv>:
	while (!isReady) {
		_delay_ms(10);
	}
	isReady = false;
	return temp;
}
  90:	21 9a       	sbi	0x04, 1	; 4
  92:	3b 98       	cbi	0x07, 3	; 7
  94:	e0 e8       	ldi	r30, 0x80	; 128
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	82 68       	ori	r24, 0x82	; 130
  9c:	80 83       	st	Z, r24
  9e:	e1 e8       	ldi	r30, 0x81	; 129
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	8a 61       	ori	r24, 0x1A	; 26
  a6:	80 83       	st	Z, r24
  a8:	8f e3       	ldi	r24, 0x3F	; 63
  aa:	9c e9       	ldi	r25, 0x9C	; 156
  ac:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
  b0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
  b4:	80 e2       	ldi	r24, 0x20	; 32
  b6:	9e e4       	ldi	r25, 0x4E	; 78
  b8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  bc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
  c0:	16 bc       	out	0x26, r1	; 38
  c2:	84 b5       	in	r24, 0x24	; 36
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	84 bd       	out	0x24, r24	; 36
  c8:	85 b5       	in	r24, 0x25	; 37
  ca:	85 60       	ori	r24, 0x05	; 5
  cc:	85 bd       	out	0x25, r24	; 37
  ce:	83 e4       	ldi	r24, 0x43	; 67
  d0:	87 bd       	out	0x27, r24	; 39
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	80 83       	st	Z, r24
  dc:	ac e7       	ldi	r26, 0x7C	; 124
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	8c 91       	ld	r24, X
  e2:	83 62       	ori	r24, 0x23	; 35
  e4:	8c 93       	st	X, r24
  e6:	80 81       	ld	r24, Z
  e8:	88 6a       	ori	r24, 0xA8	; 168
  ea:	80 83       	st	Z, r24
  ec:	eb e7       	ldi	r30, 0x7B	; 123
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	83 60       	ori	r24, 0x03	; 3
  f4:	80 83       	st	Z, r24
  f6:	08 95       	ret

000000f8 <_Z20endCoolingRegulationv>:
  f8:	15 bc       	out	0x25, r1	; 37
  fa:	e0 e8       	ldi	r30, 0x80	; 128
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	8f 77       	andi	r24, 0x7F	; 127
 102:	80 83       	st	Z, r24
 104:	ea e7       	ldi	r30, 0x7A	; 122
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	8f 77       	andi	r24, 0x7F	; 127
 10c:	80 83       	st	Z, r24
 10e:	08 95       	ret

00000110 <__vector_21>:

ISR(ADC_vect) {
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
	TIFR0 |= (1 << OCF0A);
 11e:	a9 9a       	sbi	0x15, 1	; 21
	temp = ADC >> 6; // Read ADC
 120:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 124:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 128:	00 24       	eor	r0, r0
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	00 1c       	adc	r0, r0
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	00 1c       	adc	r0, r0
 136:	89 2f       	mov	r24, r25
 138:	90 2d       	mov	r25, r0
 13a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <temp+0x1>
 13e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <temp>
	isReady = true;
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	// Set OCR1A for PWM.
	//ADCSRA |= (1 << ADIF); //Clear interrupt
}
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <_Z19initBatterDispenserv>:
	_delay_ms(moveTime);
	servoBottom = retracted;
	_delay_ms(moveTime);
	servoBottom = extended;
	_delay_ms(moveTime);
	servoTop = retracted;
 156:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <cycle+0x1>
 15a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <cycle>
 15e:	84 b1       	in	r24, 0x04	; 4
 160:	8c 60       	ori	r24, 0x0C	; 12
 162:	84 b9       	out	0x04, r24	; 4
 164:	e0 e8       	ldi	r30, 0x80	; 128
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	82 62       	ori	r24, 0x22	; 34
 16c:	80 83       	st	Z, r24
 16e:	e1 e8       	ldi	r30, 0x81	; 129
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	8a 61       	ori	r24, 0x1A	; 26
 176:	80 83       	st	Z, r24
 178:	8f e3       	ldi	r24, 0x3F	; 63
 17a:	9c e9       	ldi	r25, 0x9C	; 156
 17c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 180:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
 184:	8f e9       	ldi	r24, 0x9F	; 159
 186:	9f e0       	ldi	r25, 0x0F	; 15
 188:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <extended+0x1>
 18c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <extended>
 190:	8f ec       	ldi	r24, 0xCF	; 207
 192:	97 e0       	ldi	r25, 0x07	; 7
 194:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <retracted+0x1>
 198:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <retracted>
 19c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <extended>
 1a0:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <extended+0x1>
 1a4:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <servoBottom+0x1>
 1a8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <servoBottom>
 1ac:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <retracted>
 1b0:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <retracted+0x1>
 1b4:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <servoTop+0x1>
 1b8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <servoTop>
 1bc:	ef e6       	ldi	r30, 0x6F	; 111
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	81 60       	ori	r24, 0x01	; 1
 1c4:	80 83       	st	Z, r24
 1c6:	08 95       	ret

000001c8 <__vector_13>:
	return;
}

ISR(TIMER1_OVF_vect) {
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
	cycle++;
 1d6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <cycle>
 1da:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <cycle+0x1>
 1de:	01 96       	adiw	r24, 0x01	; 1
 1e0:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <cycle+0x1>
 1e4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <cycle>
	if (cycle == cycleCount - 1) {
 1e8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <cycle>
 1ec:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <cycle+0x1>
 1f0:	04 97       	sbiw	r24, 0x04	; 4
 1f2:	49 f4       	brne	.+18     	; 0x206 <__vector_13+0x3e>
		OCR1B = servoBottom;
 1f4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <servoBottom>
 1f8:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <servoBottom+0x1>
 1fc:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 200:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 204:	22 c0       	rjmp	.+68     	; 0x24a <__vector_13+0x82>
	} else if (cycle == cycleCount) {
 206:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <cycle>
 20a:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <cycle+0x1>
 20e:	05 97       	sbiw	r24, 0x05	; 5
 210:	11 f4       	brne	.+4      	; 0x216 <__vector_13+0x4e>
		PORTB |= (1 << PORTB3);		
 212:	2b 9a       	sbi	0x05, 3	; 5
 214:	1a c0       	rjmp	.+52     	; 0x24a <__vector_13+0x82>
	} else if (cycle == cycleCount * 2 - 1) {
 216:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <cycle>
 21a:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <cycle+0x1>
 21e:	09 97       	sbiw	r24, 0x09	; 9
 220:	49 f4       	brne	.+18     	; 0x234 <__vector_13+0x6c>
		OCR1B = servoTop;	
 222:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <servoTop>
 226:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <servoTop+0x1>
 22a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 22e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 232:	0b c0       	rjmp	.+22     	; 0x24a <__vector_13+0x82>
	} else if (cycle == cycleCount * 2) {
 234:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <cycle>
 238:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <cycle+0x1>
 23c:	0a 97       	sbiw	r24, 0x0a	; 10
 23e:	29 f4       	brne	.+10     	; 0x24a <__vector_13+0x82>
		cycle = 0;	
 240:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <cycle+0x1>
 244:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <cycle>
		PORTB &= ~(1 << PORTB3);
 248:	2b 98       	cbi	0x05, 3	; 5
	}
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	0f 90       	pop	r0
 250:	0f be       	out	0x3f, r0	; 63
 252:	0f 90       	pop	r0
 254:	1f 90       	pop	r1
 256:	18 95       	reti

00000258 <I2C_SLAVE_sendBit>:

static void I2C_SLAVE_sendBit(char bit)
{
	//Workaround implementer so ack-bit can be send without the toSend buffer is lost.
	//If data buffer is already updated the toSend buffer is temporarily stored.
	if(I2C_SLAVE_dataReady == 1)
 258:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <_ZL19I2C_SLAVE_dataReady>
 25c:	91 30       	cpi	r25, 0x01	; 1
 25e:	41 f4       	brne	.+16     	; 0x270 <I2C_SLAVE_sendBit+0x18>
	{
		//Saves  toSend in temporary buffer.
		I2C_SLAVE_tempSave = I2C_SLAVE_toSend;
 260:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <_ZL16I2C_SLAVE_toSend>
 264:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <_ZL18I2C_SLAVE_tempSave>
		//Sets data ready to 2 to indicate that the send buffer should be reverted back to the temporary buffer after sending.
		I2C_SLAVE_dataReady = 2;
 268:	92 e0       	ldi	r25, 0x02	; 2
 26a:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <_ZL19I2C_SLAVE_dataReady>
 26e:	03 c0       	rjmp	.+6      	; 0x276 <I2C_SLAVE_sendBit+0x1e>
	}
	else
	{
		//If the data buffer isn't set, then there is no need to store anything in the temporary buffer.
		I2C_SLAVE_dataReady = 1;
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <_ZL19I2C_SLAVE_dataReady>
	}
	//Only one bit should be send, therefore bit number 7 is set high and have sended
	//is set to 7, so the byte sending functionality can be utilized for sending only one bit.
	I2C_SLAVE_toSend = bit << 7;
 276:	87 95       	ror	r24
 278:	88 27       	eor	r24, r24
 27a:	87 95       	ror	r24
 27c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <_ZL16I2C_SLAVE_toSend>
	I2C_SLAVE_haveSended = 7;
 280:	87 e0       	ldi	r24, 0x07	; 7
 282:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZL20I2C_SLAVE_haveSended>
 286:	08 95       	ret

00000288 <I2C_SLAVE_beginSend>:
}

static void I2C_SLAVE_beginSend()
{
	//sending bits should be updated on a falling edge. SCL int trigger is changed accordingly.
	I2C_SLAVE_SCL_FALLING();
 288:	e9 e6       	ldi	r30, 0x69	; 105
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	82 60       	ori	r24, 0x02	; 2
 290:	80 83       	st	Z, r24
 292:	80 81       	ld	r24, Z
 294:	8e 7f       	andi	r24, 0xFE	; 254
 296:	80 83       	st	Z, r24
	//If the temporary buffer is used dataReady is set to 3, to indicate that sending has begun and
	//that the buffer should be updated.
	if(I2C_SLAVE_dataReady == 2)
 298:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <_ZL19I2C_SLAVE_dataReady>
 29c:	82 30       	cpi	r24, 0x02	; 2
 29e:	21 f4       	brne	.+8      	; 0x2a8 <I2C_SLAVE_beginSend+0x20>
		I2C_SLAVE_dataReady = 3;
 2a0:	83 e0       	ldi	r24, 0x03	; 3
 2a2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <_ZL19I2C_SLAVE_dataReady>
 2a6:	08 95       	ret
	else
	//If the temporary buffer isn't used, then it is reverted to show that there is no new data in the toSend buffer. 
		I2C_SLAVE_dataReady = 0;
 2a8:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <_ZL19I2C_SLAVE_dataReady>
 2ac:	08 95       	ret

000002ae <I2C_SLAVE_checkData>:
// ## Definitions bellow ##

volatile bool I2C_SLAVE_checkData()
{
	//Checks if all data has been read.
	if(I2C_SLAVE_first != I2C_SLAVE_last || I2C_SLAVE_full)
 2ae:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <_ZL15I2C_SLAVE_first>
 2b2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <_ZL14I2C_SLAVE_last>
 2b6:	98 13       	cpse	r25, r24
 2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <I2C_SLAVE_checkData+0x12>
 2ba:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <_ZL14I2C_SLAVE_full>
 2be:	08 95       	ret
 2c0:	81 e0       	ldi	r24, 0x01	; 1
	{
		return true;
	}
	return false;
}
 2c2:	08 95       	ret

000002c4 <I2C_SLAVE_sendData>:

void I2C_SLAVE_sendData(char data)
{
	//Sets send data to send.
	I2C_SLAVE_toSend = data;
 2c4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <_ZL16I2C_SLAVE_toSend>
	//Sets number of bits sended to 0.
	I2C_SLAVE_haveSended = 0;
 2c8:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <_ZL20I2C_SLAVE_haveSended>
	//Indicates that data is needed to be send.
	I2C_SLAVE_dataReady = 1;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <_ZL19I2C_SLAVE_dataReady>
	
	
	
	//If begin hold is sat, then sending will begin imidiatly.
	if(I2C_SLAVE_beginHold)
 2d2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_ZL19I2C_SLAVE_beginHold>
 2d6:	88 23       	and	r24, r24
 2d8:	09 f4       	brne	.+2      	; 0x2dc <I2C_SLAVE_sendData+0x18>
 2da:	4c c0       	rjmp	.+152    	; 0x374 <I2C_SLAVE_sendData+0xb0>
	{
		//Resets begin hold
		I2C_SLAVE_beginHold = false;
 2dc:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <_ZL19I2C_SLAVE_beginHold>
		//Disables SDA interrupt to avoid stop bit triggering if toSind most significant is 1.
		I2C_SLAVE_SDA_INT_ENAB(0);
 2e0:	e8 e6       	ldi	r30, 0x68	; 104
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	8b 7f       	andi	r24, 0xFB	; 251
 2e8:	80 83       	st	Z, r24
		//Sets the line to most significant bit.
		I2C_SLAVE_DDR = I2C_SLAVE_SET_BIT(I2C_SLAVE_PORT, I2C_SLAVE_SDA, ~I2C_SLAVE_toSend, 7);
 2ea:	2b b1       	in	r18, 0x0b	; 11
 2ec:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <_ZL16I2C_SLAVE_toSend>
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	80 95       	com	r24
 2f4:	90 95       	com	r25
 2f6:	88 0f       	add	r24, r24
 2f8:	89 2f       	mov	r24, r25
 2fa:	88 1f       	adc	r24, r24
 2fc:	99 0b       	sbc	r25, r25
 2fe:	82 95       	swap	r24
 300:	92 95       	swap	r25
 302:	90 7f       	andi	r25, 0xF0	; 240
 304:	98 27       	eor	r25, r24
 306:	80 7f       	andi	r24, 0xF0	; 240
 308:	98 27       	eor	r25, r24
 30a:	80 71       	andi	r24, 0x10	; 16
 30c:	92 2f       	mov	r25, r18
 30e:	9f 7e       	andi	r25, 0xEF	; 239
 310:	89 0f       	add	r24, r25
 312:	8a b9       	out	0x0a, r24	; 10
		I2C_SLAVE_PORT = I2C_SLAVE_SET_BIT(I2C_SLAVE_PORT, I2C_SLAVE_SDA, I2C_SLAVE_toSend, 7);
 314:	2b b1       	in	r18, 0x0b	; 11
 316:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <_ZL16I2C_SLAVE_toSend>
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	88 0f       	add	r24, r24
 31e:	89 2f       	mov	r24, r25
 320:	88 1f       	adc	r24, r24
 322:	99 0b       	sbc	r25, r25
 324:	82 95       	swap	r24
 326:	92 95       	swap	r25
 328:	90 7f       	andi	r25, 0xF0	; 240
 32a:	98 27       	eor	r25, r24
 32c:	80 7f       	andi	r24, 0xF0	; 240
 32e:	98 27       	eor	r25, r24
 330:	80 71       	andi	r24, 0x10	; 16
 332:	92 2f       	mov	r25, r18
 334:	9f 7e       	andi	r25, 0xEF	; 239
 336:	89 0f       	add	r24, r25
 338:	8b b9       	out	0x0b, r24	; 11
		//Sets that first bit is sended.
		I2C_SLAVE_haveSended++;
 33a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL20I2C_SLAVE_haveSended>
 33e:	8f 5f       	subi	r24, 0xFF	; 255
 340:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZL20I2C_SLAVE_haveSended>
		//Waits until SDA reads the correct bit before enabling interrupt agian.
		while(((I2C_SLAVE_toSend>>7)<<I2C_SLAVE_SDA) != (I2C_SLAVE_PIN & 1 << I2C_SLAVE_SDA)){}
 344:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <_ZL16I2C_SLAVE_toSend>
 348:	29 b1       	in	r18, 0x09	; 9
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	88 0f       	add	r24, r24
 34e:	89 2f       	mov	r24, r25
 350:	88 1f       	adc	r24, r24
 352:	99 0b       	sbc	r25, r25
 354:	82 95       	swap	r24
 356:	92 95       	swap	r25
 358:	90 7f       	andi	r25, 0xF0	; 240
 35a:	98 27       	eor	r25, r24
 35c:	80 7f       	andi	r24, 0xF0	; 240
 35e:	98 27       	eor	r25, r24
 360:	20 71       	andi	r18, 0x10	; 16
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	82 17       	cp	r24, r18
 366:	93 07       	cpc	r25, r19
 368:	69 f7       	brne	.-38     	; 0x344 <I2C_SLAVE_sendData+0x80>
		//enables interrupt.
		I2C_SLAVE_SDA_INT_ENAB(1);
 36a:	e8 e6       	ldi	r30, 0x68	; 104
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	84 60       	ori	r24, 0x04	; 4
 372:	80 83       	st	Z, r24
	}
	I2C_SLAVE_DDR &= ~(1 << I2C_SLAVE_SCL);
 374:	52 98       	cbi	0x0a, 2	; 10
	I2C_SLAVE_PORT |= 1 << I2C_SLAVE_SCL;
 376:	5a 9a       	sbi	0x0b, 2	; 11
 378:	08 95       	ret

0000037a <I2C_SLAVE_getData>:
}

I2C_commands_t I2C_SLAVE_getData()
{
	//Waits for data to have arrived.
	while(!I2C_SLAVE_checkData());
 37a:	0e 94 57 01 	call	0x2ae	; 0x2ae <I2C_SLAVE_checkData>
 37e:	88 23       	and	r24, r24
 380:	e1 f3       	breq	.-8      	; 0x37a <I2C_SLAVE_getData>
}

static char I2C_SLAVE_readFirst()
{
	//If buffer is not empty then it will read the buffer.
	if(I2C_SLAVE_checkData())
 382:	0e 94 57 01 	call	0x2ae	; 0x2ae <I2C_SLAVE_checkData>
 386:	88 23       	and	r24, r24
 388:	b9 f0       	breq	.+46     	; 0x3b8 <I2C_SLAVE_getData+0x3e>
	{
		//After the first is read, then the buffer isn't full anymore.
		if(I2C_SLAVE_full)
 38a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <_ZL14I2C_SLAVE_full>
 38e:	81 11       	cpse	r24, r1
		{
			I2C_SLAVE_full = false;
 390:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <_ZL14I2C_SLAVE_full>
}

static unsigned char I2C_SLAVE_inc(volatile unsigned char * num)
{
	//Save return value.
	unsigned char temp = *num;
 394:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <_ZL15I2C_SLAVE_first>

	//Incrementing number 
	(*num)++;
 398:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_ZL15I2C_SLAVE_first>
 39c:	8f 5f       	subi	r24, 0xFF	; 255
 39e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <_ZL15I2C_SLAVE_first>
	
	//If number is higher than receive buffer length then its reset to 0.
	if(*num >= I2C_SLAVE_BUFFER_LENGTH)
 3a2:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_ZL15I2C_SLAVE_first>
 3a6:	8a 30       	cpi	r24, 0x0A	; 10
 3a8:	10 f0       	brcs	.+4      	; 0x3ae <I2C_SLAVE_getData+0x34>
	{
		*num = 0;
 3aa:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <_ZL15I2C_SLAVE_first>
		if(I2C_SLAVE_full)
		{
			I2C_SLAVE_full = false;
		}
		//Returns the buffer en increments first by 1.
		return I2C_SLAVE_Buffer[I2C_SLAVE_inc(&I2C_SLAVE_first)];
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	e3 5f       	subi	r30, 0xF3	; 243
 3b2:	fe 4f       	sbci	r31, 0xFE	; 254
 3b4:	80 81       	ld	r24, Z
 3b6:	08 95       	ret
	}
	return 0;
 3b8:	80 e0       	ldi	r24, 0x00	; 0
{
	//Waits for data to have arrived.
	while(!I2C_SLAVE_checkData());
	//Returns first data.
	return (I2C_commands_t)I2C_SLAVE_readFirst();
}
 3ba:	08 95       	ret

000003bc <I2C_SLAVE_init>:

void I2C_SLAVE_init()
{
	//Sets SCL interrupt to rising edge trigger.
	I2C_SLAVE_SCL_RISING();
 3bc:	e9 e6       	ldi	r30, 0x69	; 105
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	80 81       	ld	r24, Z
 3c2:	82 60       	ori	r24, 0x02	; 2
 3c4:	80 83       	st	Z, r24
 3c6:	80 81       	ld	r24, Z
 3c8:	81 60       	ori	r24, 0x01	; 1
 3ca:	80 83       	st	Z, r24

	//Sets SDA interrupt up.
	I2C_SLAVE_SDA_INT_INIT();
 3cc:	e8 e6       	ldi	r30, 0x68	; 104
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	80 81       	ld	r24, Z
 3d2:	80 61       	ori	r24, 0x10	; 16
 3d4:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>
	
	//Enables both interrupts.
	I2C_SLAVE_SDA_INT_ENAB(1);
 3d8:	80 81       	ld	r24, Z
 3da:	84 60       	ori	r24, 0x04	; 4
 3dc:	80 83       	st	Z, r24
	I2C_SLAVE_SCL_INT_ENAB(1);
 3de:	e8 9a       	sbi	0x1d, 0	; 29
	
	//Sets up ports to inputs with pull up.
	I2C_SLAVE_DDR &= ~(1 << I2C_SLAVE_SDA | 1 << I2C_SLAVE_SCL);
 3e0:	8a b1       	in	r24, 0x0a	; 10
 3e2:	8b 7e       	andi	r24, 0xEB	; 235
 3e4:	8a b9       	out	0x0a, r24	; 10
	I2C_SLAVE_PORT |= (1 << I2C_SLAVE_SDA | 1 << I2C_SLAVE_SCL);
 3e6:	8b b1       	in	r24, 0x0b	; 11
 3e8:	84 61       	ori	r24, 0x14	; 20
 3ea:	8b b9       	out	0x0b, r24	; 11
 3ec:	08 95       	ret

000003ee <__vector_1>:
	return 0;
}

//SCL interrupt for handling data transfer.
ISR(I2C_SLAVE_SCL_vect)
{
 3ee:	1f 92       	push	r1
 3f0:	0f 92       	push	r0
 3f2:	0f b6       	in	r0, 0x3f	; 63
 3f4:	0f 92       	push	r0
 3f6:	11 24       	eor	r1, r1
 3f8:	2f 93       	push	r18
 3fa:	3f 93       	push	r19
 3fc:	4f 93       	push	r20
 3fe:	5f 93       	push	r21
 400:	6f 93       	push	r22
 402:	7f 93       	push	r23
 404:	8f 93       	push	r24
 406:	9f 93       	push	r25
 408:	af 93       	push	r26
 40a:	bf 93       	push	r27
 40c:	ef 93       	push	r30
 40e:	ff 93       	push	r31
	//If start-bit received:
	if(I2C_SLAVE_startRecived)
 410:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <_ZL22I2C_SLAVE_startRecived>
 414:	88 23       	and	r24, r24
 416:	09 f4       	brne	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 418:	57 c1       	rjmp	.+686    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
	{
		//If SCL is triggering on rising edge i.e. it's currently reading from SDA.
		if(I2C_SLAVE_SCL_IS_RISING())
 41a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 41e:	83 70       	andi	r24, 0x03	; 3
 420:	83 30       	cpi	r24, 0x03	; 3
 422:	09 f0       	breq	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 424:	bb c0       	rjmp	.+374    	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
		{
			//If it just have been writing to SDA reset pull up to high.
			if(I2C_SLAVE_haveSended > 7)
 426:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL20I2C_SLAVE_haveSended>
 42a:	88 30       	cpi	r24, 0x08	; 8
 42c:	40 f0       	brcs	.+16     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
			{
				I2C_SLAVE_haveSended = 0;
 42e:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <_ZL20I2C_SLAVE_haveSended>
				I2C_SLAVE_DDR &= ~(1 << I2C_SLAVE_SDA | 1 << I2C_SLAVE_SCL);
 432:	8a b1       	in	r24, 0x0a	; 10
 434:	8b 7e       	andi	r24, 0xEB	; 235
 436:	8a b9       	out	0x0a, r24	; 10
				I2C_SLAVE_PORT |= (1 << I2C_SLAVE_SDA | 1 << I2C_SLAVE_SCL);
 438:	8b b1       	in	r24, 0x0b	; 11
 43a:	84 61       	ori	r24, 0x14	; 20
 43c:	8b b9       	out	0x0b, r24	; 11
			}
			//First 7 bits read Address.
			if(I2C_SLAVE_recevedBits < 7)
 43e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <_ZL21I2C_SLAVE_recevedBits>
 442:	87 30       	cpi	r24, 0x07	; 7
 444:	50 f5       	brcc	.+84     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
			{
				I2C_SLAVE_recevedAddr = I2C_SLAVE_SET_BIT(I2C_SLAVE_recevedAddr,6-I2C_SLAVE_recevedBits,I2C_SLAVE_PIN,I2C_SLAVE_SDA);
 446:	66 e0       	ldi	r22, 0x06	; 6
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	68 1b       	sub	r22, r24
 44c:	71 09       	sbc	r23, r1
 44e:	21 e0       	ldi	r18, 0x01	; 1
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	a9 01       	movw	r20, r18
 454:	06 2e       	mov	r0, r22
 456:	02 c0       	rjmp	.+4      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 458:	44 0f       	add	r20, r20
 45a:	55 1f       	adc	r21, r21
 45c:	0a 94       	dec	r0
 45e:	e2 f7       	brpl	.-8      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 460:	99 b1       	in	r25, 0x09	; 9
 462:	54 2f       	mov	r21, r20
 464:	50 95       	com	r21
 466:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <_ZL21I2C_SLAVE_recevedAddr>
 46a:	52 23       	and	r21, r18
 46c:	29 2f       	mov	r18, r25
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	35 95       	asr	r19
 472:	27 95       	ror	r18
 474:	35 95       	asr	r19
 476:	27 95       	ror	r18
 478:	35 95       	asr	r19
 47a:	27 95       	ror	r18
 47c:	35 95       	asr	r19
 47e:	27 95       	ror	r18
 480:	02 c0       	rjmp	.+4      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 482:	22 0f       	add	r18, r18
 484:	33 1f       	adc	r19, r19
 486:	6a 95       	dec	r22
 488:	e2 f7       	brpl	.-8      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 48a:	24 23       	and	r18, r20
 48c:	25 0f       	add	r18, r21
 48e:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <_ZL21I2C_SLAVE_recevedAddr>
				I2C_SLAVE_recevedBits++;
 492:	8f 5f       	subi	r24, 0xFF	; 255
 494:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_ZL21I2C_SLAVE_recevedBits>
 498:	17 c1       	rjmp	.+558    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			}
			//If address matching:
			else if(I2C_SLAVE_recevedAddr == I2C_SLAVE_ADDR && I2C_SLAVE_recevedBits < 8)
 49a:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <_ZL21I2C_SLAVE_recevedAddr>
 49e:	90 37       	cpi	r25, 0x70	; 112
 4a0:	09 f0       	breq	.+2      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4a2:	12 c1       	rjmp	.+548    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
 4a4:	88 30       	cpi	r24, 0x08	; 8
 4a6:	b8 f4       	brcc	.+46     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
			{
				
				I2C_SLAVE_recevedBits++;
 4a8:	8f 5f       	subi	r24, 0xFF	; 255
 4aa:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_ZL21I2C_SLAVE_recevedBits>
				//Read the readWrite bit.
				I2C_SLAVE_shouldWrite = I2C_SLAVE_SET_BIT(I2C_SLAVE_shouldWrite,0,I2C_SLAVE_PIN,I2C_SLAVE_SDA);
 4ae:	89 b1       	in	r24, 0x09	; 9
 4b0:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <_ZL21I2C_SLAVE_shouldWrite>
 4b4:	9e 7f       	andi	r25, 0xFE	; 254
 4b6:	82 95       	swap	r24
 4b8:	81 70       	andi	r24, 0x01	; 1
 4ba:	89 0f       	add	r24, r25
 4bc:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <_ZL21I2C_SLAVE_shouldWrite>
				//If it should write, begin hold is set to true.
				if(I2C_SLAVE_shouldWrite)
 4c0:	88 23       	and	r24, r24
 4c2:	19 f0       	breq	.+6      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
				{
					//This indicates that the line should be hold right after ack i send.
					I2C_SLAVE_beginHold = true;
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_ZL19I2C_SLAVE_beginHold>
				}
				//Set buffer to ack-bit and begin sending.
				I2C_SLAVE_sendBit(0);
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	0e 94 2c 01 	call	0x258	; 0x258 <I2C_SLAVE_sendBit>
				I2C_SLAVE_beginSend();
 4d0:	0e 94 44 01 	call	0x288	; 0x288 <I2C_SLAVE_beginSend>
 4d4:	f9 c0       	rjmp	.+498    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			}
			else if(I2C_SLAVE_recevedAddr == I2C_SLAVE_ADDR && I2C_SLAVE_recevedBits < (17))
 4d6:	81 31       	cpi	r24, 0x11	; 17
 4d8:	08 f0       	brcs	.+2      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4da:	f6 c0       	rjmp	.+492    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			{
				//If read from master after ack-send if I2C_SLAVE_shouldWrite is false.
				I2C_SLAVE_recevedData = I2C_SLAVE_SET_BIT(I2C_SLAVE_recevedData,7-(I2C_SLAVE_recevedBits-8),I2C_SLAVE_PIN,I2C_SLAVE_SDA);
 4dc:	6f e0       	ldi	r22, 0x0F	; 15
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	68 1b       	sub	r22, r24
 4e2:	71 09       	sbc	r23, r1
 4e4:	21 e0       	ldi	r18, 0x01	; 1
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	a9 01       	movw	r20, r18
 4ea:	06 2e       	mov	r0, r22
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4ee:	44 0f       	add	r20, r20
 4f0:	55 1f       	adc	r21, r21
 4f2:	0a 94       	dec	r0
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4f6:	99 b1       	in	r25, 0x09	; 9
 4f8:	54 2f       	mov	r21, r20
 4fa:	50 95       	com	r21
 4fc:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <_ZL21I2C_SLAVE_recevedData>
 500:	52 23       	and	r21, r18
 502:	29 2f       	mov	r18, r25
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	35 95       	asr	r19
 508:	27 95       	ror	r18
 50a:	35 95       	asr	r19
 50c:	27 95       	ror	r18
 50e:	35 95       	asr	r19
 510:	27 95       	ror	r18
 512:	35 95       	asr	r19
 514:	27 95       	ror	r18
 516:	02 c0       	rjmp	.+4      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 518:	22 0f       	add	r18, r18
 51a:	33 1f       	adc	r19, r19
 51c:	6a 95       	dec	r22
 51e:	e2 f7       	brpl	.-8      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 520:	24 23       	and	r18, r20
 522:	25 0f       	add	r18, r21
 524:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <_ZL21I2C_SLAVE_recevedData>
				I2C_SLAVE_recevedBits++;
 528:	8f 5f       	subi	r24, 0xFF	; 255
 52a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_ZL21I2C_SLAVE_recevedBits>
				if(I2C_SLAVE_recevedBits == 16)
 52e:	80 31       	cpi	r24, 0x10	; 16
 530:	09 f0       	breq	.+2      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 532:	ca c0       	rjmp	.+404    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
}

static void I2C_SLAVE_addData(char data)
{
	//If the buffer is full, then the oldest data will be overwritten moving first data one.
	if(I2C_SLAVE_full)
 534:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <_ZL14I2C_SLAVE_full>
 538:	88 23       	and	r24, r24
 53a:	69 f0       	breq	.+26     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
}

static unsigned char I2C_SLAVE_inc(volatile unsigned char * num)
{
	//Save return value.
	unsigned char temp = *num;
 53c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_ZL15I2C_SLAVE_first>

	//Incrementing number 
	(*num)++;
 540:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_ZL15I2C_SLAVE_first>
 544:	8f 5f       	subi	r24, 0xFF	; 255
 546:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <_ZL15I2C_SLAVE_first>
	
	//If number is higher than receive buffer length then its reset to 0.
	if(*num >= I2C_SLAVE_BUFFER_LENGTH)
 54a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_ZL15I2C_SLAVE_first>
 54e:	8a 30       	cpi	r24, 0x0A	; 10
 550:	10 f0       	brcs	.+4      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
	{
		*num = 0;
 552:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <_ZL15I2C_SLAVE_first>
}

static unsigned char I2C_SLAVE_inc(volatile unsigned char * num)
{
	//Save return value.
	unsigned char temp = *num;
 556:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <_ZL14I2C_SLAVE_last>

	//Incrementing number 
	(*num)++;
 55a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <_ZL14I2C_SLAVE_last>
 55e:	8f 5f       	subi	r24, 0xFF	; 255
 560:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_ZL14I2C_SLAVE_last>
	
	//If number is higher than receive buffer length then its reset to 0.
	if(*num >= I2C_SLAVE_BUFFER_LENGTH)
 564:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <_ZL14I2C_SLAVE_last>
 568:	8a 30       	cpi	r24, 0x0A	; 10
 56a:	10 f0       	brcs	.+4      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
	{
		*num = 0;
 56c:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <_ZL14I2C_SLAVE_last>
	if(I2C_SLAVE_full)
	{
		I2C_SLAVE_inc(&I2C_SLAVE_first);
	}
	//Sets last data and increments last. (Hence last will always be the length of the data in the buffer)
	I2C_SLAVE_Buffer[I2C_SLAVE_inc(&I2C_SLAVE_last)] = data;
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	e3 5f       	subi	r30, 0xF3	; 243
 574:	fe 4f       	sbci	r31, 0xFE	; 254
 576:	20 83       	st	Z, r18
	//If last position is the same as first the buffer is either full or empty. Therefor at boolean is sat if its full.
	if(I2C_SLAVE_last == I2C_SLAVE_first)
 578:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <_ZL14I2C_SLAVE_last>
 57c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_ZL15I2C_SLAVE_first>
 580:	98 13       	cpse	r25, r24
 582:	03 c0       	rjmp	.+6      	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
	{
		I2C_SLAVE_full = true;
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <_ZL14I2C_SLAVE_full>
				I2C_SLAVE_recevedBits++;
				if(I2C_SLAVE_recevedBits == 16)
				{
					//When all bits send add data and ack.
					I2C_SLAVE_addData(I2C_SLAVE_recevedData);
					I2C_SLAVE_sendBit(0);
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	0e 94 2c 01 	call	0x258	; 0x258 <I2C_SLAVE_sendBit>
					I2C_SLAVE_beginSend();
 590:	0e 94 44 01 	call	0x288	; 0x288 <I2C_SLAVE_beginSend>
					//Return to bit 8 to continue reading. (Only reading more bytes in one header is not implemented yet.)
					I2C_SLAVE_recevedBits = 8;
 594:	88 e0       	ldi	r24, 0x08	; 8
 596:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_ZL21I2C_SLAVE_recevedBits>
 59a:	96 c0       	rjmp	.+300    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
				}
			}
		}
		//If SCL is triggering on falling edge i.e. it's currently writing on SDA.
		else if(I2C_SLAVE_SCL_IS_FALLING())
 59c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 5a0:	83 70       	andi	r24, 0x03	; 3
 5a2:	82 30       	cpi	r24, 0x02	; 2
 5a4:	09 f0       	breq	.+2      	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
 5a6:	90 c0       	rjmp	.+288    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
		{
			//Checks if all data is send.
			if(I2C_SLAVE_haveSended > 7)
 5a8:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <_ZL20I2C_SLAVE_haveSended>
 5ac:	38 30       	cpi	r19, 0x08	; 8
 5ae:	08 f4       	brcc	.+2      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 5b0:	53 c0       	rjmp	.+166    	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
			{
				//Updates buffer with temporary buffer if I2C_SLAVE_dataReady is 2 or 3.
				if(I2C_SLAVE_dataReady == 2 || I2C_SLAVE_dataReady == 3)
 5b2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <_ZL19I2C_SLAVE_dataReady>
 5b6:	82 50       	subi	r24, 0x02	; 2
 5b8:	82 30       	cpi	r24, 0x02	; 2
 5ba:	90 f5       	brcc	.+100    	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
				{
					I2C_SLAVE_dataReady = 1;
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <_ZL19I2C_SLAVE_dataReady>
					I2C_SLAVE_haveSended = 1;
 5c2:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZL20I2C_SLAVE_haveSended>
					I2C_SLAVE_toSend = I2C_SLAVE_tempSave;
 5c6:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <_ZL18I2C_SLAVE_tempSave>
 5ca:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <_ZL16I2C_SLAVE_toSend>
					I2C_SLAVE_DDR = I2C_SLAVE_SET_BIT(I2C_SLAVE_DDR,I2C_SLAVE_SDA,(~I2C_SLAVE_toSend),7);
 5ce:	2a b1       	in	r18, 0x0a	; 10
 5d0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <_ZL16I2C_SLAVE_toSend>
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	80 95       	com	r24
 5d8:	90 95       	com	r25
 5da:	88 0f       	add	r24, r24
 5dc:	89 2f       	mov	r24, r25
 5de:	88 1f       	adc	r24, r24
 5e0:	99 0b       	sbc	r25, r25
 5e2:	82 95       	swap	r24
 5e4:	92 95       	swap	r25
 5e6:	90 7f       	andi	r25, 0xF0	; 240
 5e8:	98 27       	eor	r25, r24
 5ea:	80 7f       	andi	r24, 0xF0	; 240
 5ec:	98 27       	eor	r25, r24
 5ee:	80 71       	andi	r24, 0x10	; 16
 5f0:	92 2f       	mov	r25, r18
 5f2:	9f 7e       	andi	r25, 0xEF	; 239
 5f4:	89 0f       	add	r24, r25
 5f6:	8a b9       	out	0x0a, r24	; 10
					I2C_SLAVE_PORT = I2C_SLAVE_SET_BIT(I2C_SLAVE_PORT,I2C_SLAVE_SDA,I2C_SLAVE_toSend,7);
 5f8:	2b b1       	in	r18, 0x0b	; 11
 5fa:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <_ZL16I2C_SLAVE_toSend>
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	88 0f       	add	r24, r24
 602:	89 2f       	mov	r24, r25
 604:	88 1f       	adc	r24, r24
 606:	99 0b       	sbc	r25, r25
 608:	82 95       	swap	r24
 60a:	92 95       	swap	r25
 60c:	90 7f       	andi	r25, 0xF0	; 240
 60e:	98 27       	eor	r25, r24
 610:	80 7f       	andi	r24, 0xF0	; 240
 612:	98 27       	eor	r25, r24
 614:	80 71       	andi	r24, 0x10	; 16
 616:	92 2f       	mov	r25, r18
 618:	9f 7e       	andi	r25, 0xEF	; 239
 61a:	89 0f       	add	r24, r25
 61c:	8b b9       	out	0x0b, r24	; 11
 61e:	04 c0       	rjmp	.+8      	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
				}
				else
				{
					I2C_SLAVE_dataReady = 0;
 620:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <_ZL19I2C_SLAVE_dataReady>
					//Frees SDA if done sending.
					I2C_SLAVE_dataReady = 0;
					I2C_SLAVE_DDR &= ~(1 << I2C_SLAVE_SDA);
 624:	54 98       	cbi	0x0a, 4	; 10
					I2C_SLAVE_PORT |= (1 << I2C_SLAVE_SDA);	
 626:	5c 9a       	sbi	0x0b, 4	; 11
				}
				if(I2C_SLAVE_beginHold)
 628:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_ZL19I2C_SLAVE_beginHold>
 62c:	88 23       	and	r24, r24
 62e:	59 f0       	breq	.+22     	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
}

static int I2C_SLAVE_hold()
{
	//If data is ready then it sets beginHold false and returns true.
	if(I2C_SLAVE_dataReady == 1 || I2C_SLAVE_dataReady == 2)
 630:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <_ZL19I2C_SLAVE_dataReady>
 634:	81 50       	subi	r24, 0x01	; 1
 636:	82 30       	cpi	r24, 0x02	; 2
 638:	18 f4       	brcc	.+6      	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
	{
		I2C_SLAVE_beginHold = false;
 63a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <_ZL19I2C_SLAVE_beginHold>
 63e:	44 c0       	rjmp	.+136    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
		return 1;
	}
	else
	{
		//If no data is ready, then SCL is pulled low.
		I2C_SLAVE_DDR  |=  1 << I2C_SLAVE_SCL;
 640:	52 9a       	sbi	0x0a, 2	; 10
		I2C_SLAVE_PORT &=  ~(1 << I2C_SLAVE_SCL);
 642:	5a 98       	cbi	0x0b, 2	; 11
 644:	41 c0       	rjmp	.+130    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
				}
				else
				{
					//More work here needs to be done in order to be able to write multiple bytes.
					//Returns the line to reading
					I2C_SLAVE_SCL_RISING();
 646:	e9 e6       	ldi	r30, 0x69	; 105
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	80 81       	ld	r24, Z
 64c:	82 60       	ori	r24, 0x02	; 2
 64e:	80 83       	st	Z, r24
 650:	80 81       	ld	r24, Z
 652:	81 60       	ori	r24, 0x01	; 1
 654:	80 83       	st	Z, r24
 656:	38 c0       	rjmp	.+112    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
				}
			}
			else
			{
				I2C_SLAVE_DDR = I2C_SLAVE_SET_BIT(I2C_SLAVE_DDR,I2C_SLAVE_SDA,~I2C_SLAVE_toSend,(7-I2C_SLAVE_haveSended));
 658:	2a b1       	in	r18, 0x0a	; 10
 65a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <_ZL16I2C_SLAVE_toSend>
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	80 95       	com	r24
 662:	90 95       	com	r25
 664:	47 e0       	ldi	r20, 0x07	; 7
 666:	50 e0       	ldi	r21, 0x00	; 0
 668:	ba 01       	movw	r22, r20
 66a:	63 1b       	sub	r22, r19
 66c:	71 09       	sbc	r23, r1
 66e:	02 c0       	rjmp	.+4      	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
 670:	95 95       	asr	r25
 672:	87 95       	ror	r24
 674:	6a 95       	dec	r22
 676:	e2 f7       	brpl	.-8      	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 678:	82 95       	swap	r24
 67a:	92 95       	swap	r25
 67c:	90 7f       	andi	r25, 0xF0	; 240
 67e:	98 27       	eor	r25, r24
 680:	80 7f       	andi	r24, 0xF0	; 240
 682:	98 27       	eor	r25, r24
 684:	80 71       	andi	r24, 0x10	; 16
 686:	92 2f       	mov	r25, r18
 688:	9f 7e       	andi	r25, 0xEF	; 239
 68a:	89 0f       	add	r24, r25
 68c:	8a b9       	out	0x0a, r24	; 10
				I2C_SLAVE_PORT = I2C_SLAVE_SET_BIT(I2C_SLAVE_PORT,I2C_SLAVE_SDA,I2C_SLAVE_toSend,(7-I2C_SLAVE_haveSended));
 68e:	2b b1       	in	r18, 0x0b	; 11
 690:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <_ZL16I2C_SLAVE_toSend>
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <_ZL20I2C_SLAVE_haveSended>
 69a:	43 1b       	sub	r20, r19
 69c:	51 09       	sbc	r21, r1
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
 6a0:	95 95       	asr	r25
 6a2:	87 95       	ror	r24
 6a4:	4a 95       	dec	r20
 6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
 6a8:	82 95       	swap	r24
 6aa:	92 95       	swap	r25
 6ac:	90 7f       	andi	r25, 0xF0	; 240
 6ae:	98 27       	eor	r25, r24
 6b0:	80 7f       	andi	r24, 0xF0	; 240
 6b2:	98 27       	eor	r25, r24
 6b4:	80 71       	andi	r24, 0x10	; 16
 6b6:	92 2f       	mov	r25, r18
 6b8:	9f 7e       	andi	r25, 0xEF	; 239
 6ba:	89 0f       	add	r24, r25
 6bc:	8b b9       	out	0x0b, r24	; 11
				
				I2C_SLAVE_haveSended++;
 6be:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL20I2C_SLAVE_haveSended>
 6c2:	8f 5f       	subi	r24, 0xFF	; 255
 6c4:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZL20I2C_SLAVE_haveSended>
			}
		}
	}
	
}
 6c8:	ff 91       	pop	r31
 6ca:	ef 91       	pop	r30
 6cc:	bf 91       	pop	r27
 6ce:	af 91       	pop	r26
 6d0:	9f 91       	pop	r25
 6d2:	8f 91       	pop	r24
 6d4:	7f 91       	pop	r23
 6d6:	6f 91       	pop	r22
 6d8:	5f 91       	pop	r21
 6da:	4f 91       	pop	r20
 6dc:	3f 91       	pop	r19
 6de:	2f 91       	pop	r18
 6e0:	0f 90       	pop	r0
 6e2:	0f be       	out	0x3f, r0	; 63
 6e4:	0f 90       	pop	r0
 6e6:	1f 90       	pop	r1
 6e8:	18 95       	reti

000006ea <__vector_5>:

//SDA interrupt for handling stop and start bit.
ISR(I2C_SLAVE_SDA_vect)
{
 6ea:	1f 92       	push	r1
 6ec:	0f 92       	push	r0
 6ee:	0f b6       	in	r0, 0x3f	; 63
 6f0:	0f 92       	push	r0
 6f2:	11 24       	eor	r1, r1
 6f4:	8f 93       	push	r24
 6f6:	ef 93       	push	r30
 6f8:	ff 93       	push	r31
	//Both stop and start bit is triggered while SCL is high.
	if((I2C_SLAVE_PIN & (1 << I2C_SLAVE_SCL)) ==(1 << I2C_SLAVE_SCL))
 6fa:	4a 9b       	sbis	0x09, 2	; 9
 6fc:	16 c0       	rjmp	.+44     	; 0x72a <__vector_5+0x40>
	{
		//If SDA is high then the interrupt was triggered on a rising edge and therefore it's a stop-bit.
		if(I2C_SLAVE_PIN & (1 << I2C_SLAVE_SDA))
 6fe:	4c 9b       	sbis	0x09, 4	; 9
 700:	11 c0       	rjmp	.+34     	; 0x724 <__vector_5+0x3a>
		{
			I2C_SLAVE_startRecived = false;
 702:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <_ZL22I2C_SLAVE_startRecived>
			I2C_SLAVE_startRecived = true;
		}
		//If it was a stop-bit reset received data, and set SCL trigger to rising.
		if(I2C_SLAVE_startRecived == false)
		{
			I2C_SLAVE_beginHold = false;
 706:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <_ZL19I2C_SLAVE_beginHold>
			I2C_SLAVE_recevedAddr = 0;
 70a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <_ZL21I2C_SLAVE_recevedAddr>
			I2C_SLAVE_recevedBits = 0;
 70e:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <_ZL21I2C_SLAVE_recevedBits>
			I2C_SLAVE_SCL_RISING();
 712:	e9 e6       	ldi	r30, 0x69	; 105
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	80 81       	ld	r24, Z
 718:	82 60       	ori	r24, 0x02	; 2
 71a:	80 83       	st	Z, r24
 71c:	80 81       	ld	r24, Z
 71e:	81 60       	ori	r24, 0x01	; 1
 720:	80 83       	st	Z, r24
 722:	03 c0       	rjmp	.+6      	; 0x72a <__vector_5+0x40>
			I2C_SLAVE_startRecived = false;
		}
		//Else it is a start-bit.
		else
		{
			I2C_SLAVE_startRecived = true;
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <_ZL22I2C_SLAVE_startRecived>
			I2C_SLAVE_recevedAddr = 0;
			I2C_SLAVE_recevedBits = 0;
			I2C_SLAVE_SCL_RISING();
		}
	}
}
 72a:	ff 91       	pop	r31
 72c:	ef 91       	pop	r30
 72e:	8f 91       	pop	r24
 730:	0f 90       	pop	r0
 732:	0f be       	out	0x3f, r0	; 63
 734:	0f 90       	pop	r0
 736:	1f 90       	pop	r1
 738:	18 95       	reti

0000073a <_Z15initControlUnitv>:
#include "../main.h"
#include "../I2C/I2C_SLAVE.h"

void initControlUnit()
{
	I2C_SLAVE_init();
 73a:	0e 94 de 01 	call	0x3bc	; 0x3bc <I2C_SLAVE_init>
 73e:	08 95       	ret

00000740 <_Z9slavePollv>:
}

void slavePoll() {
	if (I2C_SLAVE_checkData()) {
 740:	0e 94 57 01 	call	0x2ae	; 0x2ae <I2C_SLAVE_checkData>
 744:	88 23       	and	r24, r24
 746:	29 f1       	breq	.+74     	; 0x792 <_Z9slavePollv+0x52>
		I2C_commands_t cmd = I2C_SLAVE_getData();
 748:	0e 94 bd 01 	call	0x37a	; 0x37a <I2C_SLAVE_getData>

		switch (cmd) {
 74c:	85 30       	cpi	r24, 0x05	; 5
 74e:	71 f0       	breq	.+28     	; 0x76c <_Z9slavePollv+0x2c>
 750:	28 f4       	brcc	.+10     	; 0x75c <_Z9slavePollv+0x1c>
 752:	83 30       	cpi	r24, 0x03	; 3
 754:	41 f0       	breq	.+16     	; 0x766 <_Z9slavePollv+0x26>
 756:	84 30       	cpi	r24, 0x04	; 4
 758:	91 f0       	breq	.+36     	; 0x77e <_Z9slavePollv+0x3e>
 75a:	08 95       	ret
 75c:	86 30       	cpi	r24, 0x06	; 6
 75e:	49 f0       	breq	.+18     	; 0x772 <_Z9slavePollv+0x32>
 760:	87 30       	cpi	r24, 0x07	; 7
 762:	51 f0       	breq	.+20     	; 0x778 <_Z9slavePollv+0x38>
 764:	08 95       	ret
			default:
				break;
			
			case MAKE_PANCAKE:
				pancakeBegin();
 766:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z12pancakeBeginv>
				break;
 76a:	08 95       	ret
				
			case TURN_ON_COOLING:
				turnOnCooling();
 76c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z13turnOnCoolingv>
				break;
 770:	08 95       	ret
				
			case TURN_OFF_COOLING:
				turnOffCooling();
 772:	0e 94 e6 03 	call	0x7cc	; 0x7cc <_Z14turnOffCoolingv>
				break;
 776:	08 95       	ret
				
			case TURN_OFF_ALARM:
				turnOffAlarm();
 778:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <_Z12turnOffAlarmv>
				break;
 77c:	08 95       	ret
			
			case GET_BATTER_AMOUNT:
				int level = getBatterAmount();
 77e:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_Z15getBatterAmountv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 782:	e9 ef       	ldi	r30, 0xF9	; 249
 784:	f0 e0       	ldi	r31, 0x00	; 0
 786:	31 97       	sbiw	r30, 0x01	; 1
 788:	f1 f7       	brne	.-4      	; 0x786 <_Z9slavePollv+0x46>
 78a:	00 c0       	rjmp	.+0      	; 0x78c <_Z9slavePollv+0x4c>
 78c:	00 00       	nop
				_delay_ms(1);
				I2C_SLAVE_sendData((uint8_t)level);
 78e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <I2C_SLAVE_sendData>
 792:	08 95       	ret

00000794 <main>:
#include "PanController/PanController.h"


int main()
{
	sei();
 794:	78 94       	sei
	initControlUnit();
 796:	0e 94 9d 03 	call	0x73a	; 0x73a <_Z15initControlUnitv>
	initPanController();
 79a:	0e 94 a1 04 	call	0x942	; 0x942 <_Z17initPanControllerv>
	initUltrasonic();
 79e:	0e 94 1b 05 	call	0xa36	; 0xa36 <_Z14initUltrasonicv>
	initBatterDispenser();
 7a2:	0e 94 ab 00 	call	0x156	; 0x156 <_Z19initBatterDispenserv>
	
	/* Initialize indicator */ 
	INDCTR_DDR |= (1<<INDCTR_PORT_NUM);
 7a6:	20 9a       	sbi	0x04, 0	; 4
    while (1) 
    {
		slavePoll();
 7a8:	0e 94 a0 03 	call	0x740	; 0x740 <_Z9slavePollv>
 7ac:	fd cf       	rjmp	.-6      	; 0x7a8 <main+0x14>

000007ae <_Z12pancakeBeginv>:
    }
}

void pancakeBegin() {
	waitForFreePan();
 7ae:	0e 94 ab 04 	call	0x956	; 0x956 <_Z14waitForFreePanv>
	//addDough();
	cookingBegin();
 7b2:	0e 94 b5 04 	call	0x96a	; 0x96a <_Z12cookingBeginv>
 7b6:	08 95       	ret

000007b8 <_Z15getBatterAmountv>:
}

int getBatterAmount() {
	int level = readBatterAmount();
 7b8:	0e 94 25 05 	call	0xa4a	; 0xa4a <_Z16readBatterAmountv>
	
	if (level > MIN_BATTER_LEVEL)
 7bc:	86 30       	cpi	r24, 0x06	; 6
 7be:	91 05       	cpc	r25, r1
 7c0:	0c f0       	brlt	.+2      	; 0x7c4 <_Z15getBatterAmountv+0xc>
		INDCTR_PORT |=  (1<<INDCTR_PORT_NUM); // Turn on indicator LED
 7c2:	28 9a       	sbi	0x05, 0	; 5
	
	return level;
}
 7c4:	08 95       	ret

000007c6 <_Z13turnOnCoolingv>:

void turnOnCooling() {
	beginCoolingRegulation();
 7c6:	0e 94 48 00 	call	0x90	; 0x90 <_Z22beginCoolingRegulationv>
 7ca:	08 95       	ret

000007cc <_Z14turnOffCoolingv>:
}

void turnOffCooling() {
	endCoolingRegulation();
 7cc:	0e 94 7c 00 	call	0xf8	; 0xf8 <_Z20endCoolingRegulationv>
 7d0:	08 95       	ret

000007d2 <_Z12turnOffAlarmv>:
}

void turnOffAlarm() {
	INDCTR_PORT &= ~(1<<INDCTR_PORT_NUM); // Turn off indicator LED
 7d2:	28 98       	cbi	0x05, 0	; 5
 7d4:	08 95       	ret

000007d6 <_Z19I2C_MASTER_sendDatac14I2C_commands_t>:
	//Update status
	data_ready_flag = false;
	
	//Return data
	return local_read_data;
}
 7d6:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <_ZL19I2C_MASTER_hw_mutex>
 7da:	91 11       	cpse	r25, r1
 7dc:	51 c0       	rjmp	.+162    	; 0x880 <_Z19I2C_MASTER_sendDatac14I2C_commands_t+0xaa>
 7de:	91 e0       	ldi	r25, 0x01	; 1
 7e0:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <_ZL19I2C_MASTER_hw_mutex>
 7e4:	94 ea       	ldi	r25, 0xA4	; 164
 7e6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 7ea:	ec eb       	ldi	r30, 0xBC	; 188
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	90 81       	ld	r25, Z
 7f0:	99 23       	and	r25, r25
 7f2:	ec f7       	brge	.-6      	; 0x7ee <_Z19I2C_MASTER_sendDatac14I2C_commands_t+0x18>
 7f4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 7f8:	98 7f       	andi	r25, 0xF8	; 248
 7fa:	98 30       	cpi	r25, 0x08	; 8
 7fc:	81 f5       	brne	.+96     	; 0x85e <_Z19I2C_MASTER_sendDatac14I2C_commands_t+0x88>
 7fe:	88 0f       	add	r24, r24
 800:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 804:	84 e8       	ldi	r24, 0x84	; 132
 806:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 80a:	ec eb       	ldi	r30, 0xBC	; 188
 80c:	f0 e0       	ldi	r31, 0x00	; 0
 80e:	80 81       	ld	r24, Z
 810:	88 23       	and	r24, r24
 812:	ec f7       	brge	.-6      	; 0x80e <_Z19I2C_MASTER_sendDatac14I2C_commands_t+0x38>
 814:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 818:	88 7f       	andi	r24, 0xF8	; 248
 81a:	80 32       	cpi	r24, 0x20	; 32
 81c:	01 f1       	breq	.+64     	; 0x85e <_Z19I2C_MASTER_sendDatac14I2C_commands_t+0x88>
 81e:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 822:	84 e8       	ldi	r24, 0x84	; 132
 824:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 828:	ec eb       	ldi	r30, 0xBC	; 188
 82a:	f0 e0       	ldi	r31, 0x00	; 0
 82c:	80 81       	ld	r24, Z
 82e:	88 23       	and	r24, r24
 830:	ec f7       	brge	.-6      	; 0x82c <_Z19I2C_MASTER_sendDatac14I2C_commands_t+0x56>
 832:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 836:	88 7f       	andi	r24, 0xF8	; 248
 838:	80 33       	cpi	r24, 0x30	; 48
 83a:	89 f0       	breq	.+34     	; 0x85e <_Z19I2C_MASTER_sendDatac14I2C_commands_t+0x88>
 83c:	ec eb       	ldi	r30, 0xBC	; 188
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	84 e9       	ldi	r24, 0x94	; 148
 842:	80 83       	st	Z, r24
 844:	24 9a       	sbi	0x04, 4	; 4
 846:	80 81       	ld	r24, Z
 848:	84 ff       	sbrs	r24, 4
 84a:	04 c0       	rjmp	.+8      	; 0x854 <_Z19I2C_MASTER_sendDatac14I2C_commands_t+0x7e>
 84c:	2c 9a       	sbi	0x05, 4	; 5
 84e:	80 81       	ld	r24, Z
 850:	84 fd       	sbrc	r24, 4
 852:	fc cf       	rjmp	.-8      	; 0x84c <_Z19I2C_MASTER_sendDatac14I2C_commands_t+0x76>
 854:	2c 98       	cbi	0x05, 4	; 5
 856:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <_ZL19I2C_MASTER_hw_mutex>
 85a:	80 e0       	ldi	r24, 0x00	; 0
 85c:	08 95       	ret
 85e:	84 e9       	ldi	r24, 0x94	; 148
 860:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 864:	ec eb       	ldi	r30, 0xBC	; 188
 866:	f0 e0       	ldi	r31, 0x00	; 0
 868:	80 81       	ld	r24, Z
 86a:	84 fd       	sbrc	r24, 4
 86c:	fd cf       	rjmp	.-6      	; 0x868 <_Z19I2C_MASTER_sendDatac14I2C_commands_t+0x92>
 86e:	ec eb       	ldi	r30, 0xBC	; 188
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	80 81       	ld	r24, Z
 874:	8b 7f       	andi	r24, 0xFB	; 251
 876:	80 83       	st	Z, r24
 878:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <_ZL19I2C_MASTER_hw_mutex>
 87c:	81 e0       	ldi	r24, 0x01	; 1
 87e:	08 95       	ret
 880:	83 e0       	ldi	r24, 0x03	; 3
 882:	08 95       	ret

00000884 <_Z19I2C_MASTER_readDatac>:
 884:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <_ZL19I2C_MASTER_hw_mutex>
 888:	91 11       	cpse	r25, r1
 88a:	37 c0       	rjmp	.+110    	; 0x8fa <_Z19I2C_MASTER_readDatac+0x76>
 88c:	91 e0       	ldi	r25, 0x01	; 1
 88e:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <_ZL19I2C_MASTER_hw_mutex>
 892:	94 ea       	ldi	r25, 0xA4	; 164
 894:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 898:	ec eb       	ldi	r30, 0xBC	; 188
 89a:	f0 e0       	ldi	r31, 0x00	; 0
 89c:	90 81       	ld	r25, Z
 89e:	99 23       	and	r25, r25
 8a0:	ec f7       	brge	.-6      	; 0x89c <_Z19I2C_MASTER_readDatac+0x18>
 8a2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 8a6:	98 7f       	andi	r25, 0xF8	; 248
 8a8:	98 30       	cpi	r25, 0x08	; 8
 8aa:	b1 f4       	brne	.+44     	; 0x8d8 <_Z19I2C_MASTER_readDatac+0x54>
 8ac:	88 0f       	add	r24, r24
 8ae:	8f 5f       	subi	r24, 0xFF	; 255
 8b0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 8b4:	84 e8       	ldi	r24, 0x84	; 132
 8b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 8ba:	ec eb       	ldi	r30, 0xBC	; 188
 8bc:	f0 e0       	ldi	r31, 0x00	; 0
 8be:	80 81       	ld	r24, Z
 8c0:	88 23       	and	r24, r24
 8c2:	ec f7       	brge	.-6      	; 0x8be <_Z19I2C_MASTER_readDatac+0x3a>
 8c4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 8c8:	88 7f       	andi	r24, 0xF8	; 248
 8ca:	88 34       	cpi	r24, 0x48	; 72
 8cc:	29 f0       	breq	.+10     	; 0x8d8 <_Z19I2C_MASTER_readDatac+0x54>
 8ce:	85 e8       	ldi	r24, 0x85	; 133
 8d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 8d4:	80 e0       	ldi	r24, 0x00	; 0
 8d6:	08 95       	ret
 8d8:	84 e9       	ldi	r24, 0x94	; 148
 8da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 8de:	ec eb       	ldi	r30, 0xBC	; 188
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	80 81       	ld	r24, Z
 8e4:	84 fd       	sbrc	r24, 4
 8e6:	fd cf       	rjmp	.-6      	; 0x8e2 <_Z19I2C_MASTER_readDatac+0x5e>
 8e8:	ec eb       	ldi	r30, 0xBC	; 188
 8ea:	f0 e0       	ldi	r31, 0x00	; 0
 8ec:	80 81       	ld	r24, Z
 8ee:	8b 7f       	andi	r24, 0xFB	; 251
 8f0:	80 83       	st	Z, r24
 8f2:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <_ZL19I2C_MASTER_hw_mutex>
 8f6:	82 e0       	ldi	r24, 0x02	; 2
 8f8:	08 95       	ret
 8fa:	83 e0       	ldi	r24, 0x03	; 3
 8fc:	08 95       	ret

000008fe <__vector_24>:

//Read data from TWI
ISR(TWI_vect) {
 8fe:	1f 92       	push	r1
 900:	0f 92       	push	r0
 902:	0f b6       	in	r0, 0x3f	; 63
 904:	0f 92       	push	r0
 906:	11 24       	eor	r1, r1
 908:	8f 93       	push	r24
 90a:	ef 93       	push	r30
 90c:	ff 93       	push	r31

	//Save data
	local_read_data = TWDR;
 90e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 912:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <_ZL15local_read_data>
	
	//Set flag
	data_ready_flag = true;
 916:	81 e0       	ldi	r24, 0x01	; 1
 918:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <_ZL15data_ready_flag>
	
	//Send stop and stop interrupts
	TWCR = (1 << TWEN) | (1 << TWSTO) | (1 << TWINT);
 91c:	84 e9       	ldi	r24, 0x94	; 148
 91e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	//Enable interrupt nesting
	sei();
 922:	78 94       	sei
	
	//Wait for stop-bit send
	while(TWCR & (1 << TWSTO));
 924:	ec eb       	ldi	r30, 0xBC	; 188
 926:	f0 e0       	ldi	r31, 0x00	; 0
 928:	80 81       	ld	r24, Z
 92a:	84 fd       	sbrc	r24, 4
 92c:	fd cf       	rjmp	.-6      	; 0x928 <__stack+0x29>

	//Unlock mutex from read
	I2C_MASTER_hw_mutex = false;
 92e:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <_ZL19I2C_MASTER_hw_mutex>
	
}
 932:	ff 91       	pop	r31
 934:	ef 91       	pop	r30
 936:	8f 91       	pop	r24
 938:	0f 90       	pop	r0
 93a:	0f be       	out	0x3f, r0	; 63
 93c:	0f 90       	pop	r0
 93e:	1f 90       	pop	r1
 940:	18 95       	reti

00000942 <_Z17initPanControllerv>:
static volatile uint8_t local_read_data = 0;
static volatile bool data_ready_flag = false;

void I2C_MASTER_init(char bitRate, I2C_MASTER_prescale_t pre)
{
	TWBR = bitRate;	//Set bitRate
 942:	82 e3       	ldi	r24, 0x32	; 50
 944:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
	TWSR = (char)pre;	//Set prescaler
 948:	82 e0       	ldi	r24, 0x02	; 2
 94a:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	
	TWCR = (1 << TWEN);	//Setup TWI to send NACK when data is recieved and enable HW
 94e:	84 e0       	ldi	r24, 0x04	; 4
 950:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 954:	08 95       	ret

00000956 <_Z14waitForFreePanv>:
void initPanController() {
	I2C_MASTER_init(I2C_BIT_RATE, I2C_MASTER_PRESCALE_16);
}

void waitForFreePan() {
	while (I2C_MASTER_sendData(I2C_PAN_ADDR, GET_FIRST_PAN_STATUS) != I2C_OK);	
 956:	61 e0       	ldi	r22, 0x01	; 1
 958:	80 e7       	ldi	r24, 0x70	; 112
 95a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <_Z19I2C_MASTER_sendDatac14I2C_commands_t>
 95e:	81 11       	cpse	r24, r1
 960:	fa cf       	rjmp	.-12     	; 0x956 <_Z14waitForFreePanv>
	I2C_MASTER_readData(I2C_PAN_ADDR);
 962:	80 e7       	ldi	r24, 0x70	; 112
 964:	0e 94 42 04 	call	0x884	; 0x884 <_Z19I2C_MASTER_readDatac>
 968:	08 95       	ret

0000096a <_Z12cookingBeginv>:
} 

void cookingBegin() {
	I2C_MASTER_sendData(I2C_PAN_ADDR, BEGIN_COOKING);
 96a:	62 e0       	ldi	r22, 0x02	; 2
 96c:	80 e7       	ldi	r24, 0x70	; 112
 96e:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <_Z19I2C_MASTER_sendDatac14I2C_commands_t>
 972:	08 95       	ret

00000974 <__vector_4>:
#include "UltraSonic.h"

volatile uint16_t batterLevel_ = 0;
bool isEcho_ = false;

ISR(PCINT1_vect) {
 974:	1f 92       	push	r1
 976:	0f 92       	push	r0
 978:	0f b6       	in	r0, 0x3f	; 63
 97a:	0f 92       	push	r0
 97c:	11 24       	eor	r1, r1
 97e:	2f 93       	push	r18
 980:	3f 93       	push	r19
 982:	4f 93       	push	r20
 984:	5f 93       	push	r21
 986:	6f 93       	push	r22
 988:	7f 93       	push	r23
 98a:	8f 93       	push	r24
 98c:	9f 93       	push	r25
 98e:	af 93       	push	r26
 990:	bf 93       	push	r27
 992:	ef 93       	push	r30
 994:	ff 93       	push	r31
	/* If currently timing PW */
	if (isEcho_)
 996:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <isEcho_>
 99a:	88 23       	and	r24, r24
 99c:	99 f1       	breq	.+102    	; 0xa04 <__vector_4+0x90>
	{
		/* Turn off timer2 */
		ULTRSNC_TCCRB = 0;
 99e:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
		
		/* Calculate and save distance */
		batterLevel_ = static_cast<uint16_t>(10*REGRESSION(ULTRSNC_TCNT)); // Distance in mm
 9a2:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
 9a6:	70 e0       	ldi	r23, 0x00	; 0
 9a8:	80 e0       	ldi	r24, 0x00	; 0
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	0e 94 dd 05 	call	0xbba	; 0xbba <__floatsisf>
 9b0:	29 ee       	ldi	r18, 0xE9	; 233
 9b2:	38 e4       	ldi	r19, 0x48	; 72
 9b4:	4e e8       	ldi	r20, 0x8E	; 142
 9b6:	5e e3       	ldi	r21, 0x3E	; 62
 9b8:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__mulsf3>
 9bc:	2a ee       	ldi	r18, 0xEA	; 234
 9be:	34 e0       	ldi	r19, 0x04	; 4
 9c0:	44 e7       	ldi	r20, 0x74	; 116
 9c2:	5e e3       	ldi	r21, 0x3E	; 62
 9c4:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__subsf3>
 9c8:	20 e0       	ldi	r18, 0x00	; 0
 9ca:	30 e0       	ldi	r19, 0x00	; 0
 9cc:	40 e2       	ldi	r20, 0x20	; 32
 9ce:	51 e4       	ldi	r21, 0x41	; 65
 9d0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__mulsf3>
 9d4:	0e 94 ac 05 	call	0xb58	; 0xb58 <__fixunssfsi>
 9d8:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <batterLevel_+0x1>
 9dc:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <batterLevel_>
		
		/* Calculate batter level from bottom of container */
		batterLevel_ = CNTNR_H - batterLevel_;
 9e0:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <batterLevel_>
 9e4:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <batterLevel_+0x1>
 9e8:	84 e6       	ldi	r24, 0x64	; 100
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	82 1b       	sub	r24, r18
 9ee:	93 0b       	sbc	r25, r19
 9f0:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <batterLevel_+0x1>
 9f4:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <batterLevel_>
		
		/* Turn off pin change 13 interrupt */
		ULTRSNC_PCMSK &= ~(1 << ULTRSNC_PCINT);
 9f8:	ec e6       	ldi	r30, 0x6C	; 108
 9fa:	f0 e0       	ldi	r31, 0x00	; 0
 9fc:	80 81       	ld	r24, Z
 9fe:	8b 7f       	andi	r24, 0xFB	; 251
 a00:	80 83       	st	Z, r24
 a02:	08 c0       	rjmp	.+16     	; 0xa14 <__vector_4+0xa0>
	}
	else
	{
		/* Reset and start timer2 */
		ULTRSNC_TCNT = 0;
 a04:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
		ULTRSNC_TCCRB = 0b00000110;
 a08:	86 e0       	ldi	r24, 0x06	; 6
 a0a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
		
		isEcho_ = true;
 a0e:	81 e0       	ldi	r24, 0x01	; 1
 a10:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <isEcho_>
	}
}
 a14:	ff 91       	pop	r31
 a16:	ef 91       	pop	r30
 a18:	bf 91       	pop	r27
 a1a:	af 91       	pop	r26
 a1c:	9f 91       	pop	r25
 a1e:	8f 91       	pop	r24
 a20:	7f 91       	pop	r23
 a22:	6f 91       	pop	r22
 a24:	5f 91       	pop	r21
 a26:	4f 91       	pop	r20
 a28:	3f 91       	pop	r19
 a2a:	2f 91       	pop	r18
 a2c:	0f 90       	pop	r0
 a2e:	0f be       	out	0x3f, r0	; 63
 a30:	0f 90       	pop	r0
 a32:	1f 90       	pop	r1
 a34:	18 95       	reti

00000a36 <_Z14initUltrasonicv>:

void initUltrasonic() {
	ULTRSNC_TRGGR_DDR |=  (1<<ULTRSNC_TRGGR_PORT_NUM); // Trigger pin
 a36:	39 9a       	sbi	0x07, 1	; 7
	ULTRSNC_ECHO_DDR &= ~(1<<ULTRSNC_ECHO_PIN_NUM); // Echo pin
 a38:	3a 98       	cbi	0x07, 2	; 7
	ULTRSNC_TCCRA = 0; // Clear timer2 register A
 a3a:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
	PCICR |= (1 << ULTRSNC_PCIE); // enable pin change interrupt 1
 a3e:	e8 e6       	ldi	r30, 0x68	; 104
 a40:	f0 e0       	ldi	r31, 0x00	; 0
 a42:	80 81       	ld	r24, Z
 a44:	82 60       	ori	r24, 0x02	; 2
 a46:	80 83       	st	Z, r24
 a48:	08 95       	ret

00000a4a <_Z16readBatterAmountv>:
}

int readBatterAmount() {
	isEcho_ = false;
 a4a:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <isEcho_>
	
	/* Set PC1 to trigger on pin 13, PINC5 */
	ULTRSNC_PCMSK |= (1 << ULTRSNC_PCINT);
 a4e:	ec e6       	ldi	r30, 0x6C	; 108
 a50:	f0 e0       	ldi	r31, 0x00	; 0
 a52:	80 81       	ld	r24, Z
 a54:	84 60       	ori	r24, 0x04	; 4
 a56:	80 83       	st	Z, r24
	
	/* Pulse trigger pin */
	ULTRSNC_TRGGR_PORT |= (1<<ULTRSNC_TRGGR_PORT_NUM);
 a58:	41 9a       	sbi	0x08, 1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a5a:	85 e3       	ldi	r24, 0x35	; 53
 a5c:	8a 95       	dec	r24
 a5e:	f1 f7       	brne	.-4      	; 0xa5c <_Z16readBatterAmountv+0x12>
 a60:	00 00       	nop
	_delay_us(10);
	ULTRSNC_TRGGR_PORT &= ~(1<<ULTRSNC_TRGGR_PORT_NUM);
 a62:	41 98       	cbi	0x08, 1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a64:	8f e3       	ldi	r24, 0x3F	; 63
 a66:	9c e9       	ldi	r25, 0x9C	; 156
 a68:	01 97       	sbiw	r24, 0x01	; 1
 a6a:	f1 f7       	brne	.-4      	; 0xa68 <_Z16readBatterAmountv+0x1e>
 a6c:	00 c0       	rjmp	.+0      	; 0xa6e <_Z16readBatterAmountv+0x24>
 a6e:	00 00       	nop
	
	/* Calculate amount of pancakes that can be made with current amount of batter 
	float batterVolume = batterLevel_ * CNTNR_W * CNTNR_L;
	int pancakesLeft = batterVolume / DSG_VOL;*/
	
	DDRB |= 1<<DDB3;
 a70:	23 9a       	sbi	0x04, 3	; 4
	return (PINB & (1<<PINB3) ? 1 : 0);
 a72:	83 b1       	in	r24, 0x03	; 3
	//return batterLevel_; //Skal returnere mellem 80-FF
 a74:	83 fb       	bst	r24, 3
 a76:	88 27       	eor	r24, r24
 a78:	80 f9       	bld	r24, 0
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	08 95       	ret

00000a7e <__subsf3>:
 a7e:	50 58       	subi	r21, 0x80	; 128

00000a80 <__addsf3>:
 a80:	bb 27       	eor	r27, r27
 a82:	aa 27       	eor	r26, r26
 a84:	0e 94 57 05 	call	0xaae	; 0xaae <__addsf3x>
 a88:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__fp_round>
 a8c:	0e 94 21 06 	call	0xc42	; 0xc42 <__fp_pscA>
 a90:	38 f0       	brcs	.+14     	; 0xaa0 <__addsf3+0x20>
 a92:	0e 94 28 06 	call	0xc50	; 0xc50 <__fp_pscB>
 a96:	20 f0       	brcs	.+8      	; 0xaa0 <__addsf3+0x20>
 a98:	39 f4       	brne	.+14     	; 0xaa8 <__addsf3+0x28>
 a9a:	9f 3f       	cpi	r25, 0xFF	; 255
 a9c:	19 f4       	brne	.+6      	; 0xaa4 <__addsf3+0x24>
 a9e:	26 f4       	brtc	.+8      	; 0xaa8 <__addsf3+0x28>
 aa0:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__fp_nan>
 aa4:	0e f4       	brtc	.+2      	; 0xaa8 <__addsf3+0x28>
 aa6:	e0 95       	com	r30
 aa8:	e7 fb       	bst	r30, 7
 aaa:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_inf>

00000aae <__addsf3x>:
 aae:	e9 2f       	mov	r30, r25
 ab0:	0e 94 40 06 	call	0xc80	; 0xc80 <__fp_split3>
 ab4:	58 f3       	brcs	.-42     	; 0xa8c <__addsf3+0xc>
 ab6:	ba 17       	cp	r27, r26
 ab8:	62 07       	cpc	r22, r18
 aba:	73 07       	cpc	r23, r19
 abc:	84 07       	cpc	r24, r20
 abe:	95 07       	cpc	r25, r21
 ac0:	20 f0       	brcs	.+8      	; 0xaca <__addsf3x+0x1c>
 ac2:	79 f4       	brne	.+30     	; 0xae2 <__addsf3x+0x34>
 ac4:	a6 f5       	brtc	.+104    	; 0xb2e <__addsf3x+0x80>
 ac6:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__fp_zero>
 aca:	0e f4       	brtc	.+2      	; 0xace <__addsf3x+0x20>
 acc:	e0 95       	com	r30
 ace:	0b 2e       	mov	r0, r27
 ad0:	ba 2f       	mov	r27, r26
 ad2:	a0 2d       	mov	r26, r0
 ad4:	0b 01       	movw	r0, r22
 ad6:	b9 01       	movw	r22, r18
 ad8:	90 01       	movw	r18, r0
 ada:	0c 01       	movw	r0, r24
 adc:	ca 01       	movw	r24, r20
 ade:	a0 01       	movw	r20, r0
 ae0:	11 24       	eor	r1, r1
 ae2:	ff 27       	eor	r31, r31
 ae4:	59 1b       	sub	r21, r25
 ae6:	99 f0       	breq	.+38     	; 0xb0e <__addsf3x+0x60>
 ae8:	59 3f       	cpi	r21, 0xF9	; 249
 aea:	50 f4       	brcc	.+20     	; 0xb00 <__addsf3x+0x52>
 aec:	50 3e       	cpi	r21, 0xE0	; 224
 aee:	68 f1       	brcs	.+90     	; 0xb4a <__addsf3x+0x9c>
 af0:	1a 16       	cp	r1, r26
 af2:	f0 40       	sbci	r31, 0x00	; 0
 af4:	a2 2f       	mov	r26, r18
 af6:	23 2f       	mov	r18, r19
 af8:	34 2f       	mov	r19, r20
 afa:	44 27       	eor	r20, r20
 afc:	58 5f       	subi	r21, 0xF8	; 248
 afe:	f3 cf       	rjmp	.-26     	; 0xae6 <__addsf3x+0x38>
 b00:	46 95       	lsr	r20
 b02:	37 95       	ror	r19
 b04:	27 95       	ror	r18
 b06:	a7 95       	ror	r26
 b08:	f0 40       	sbci	r31, 0x00	; 0
 b0a:	53 95       	inc	r21
 b0c:	c9 f7       	brne	.-14     	; 0xb00 <__addsf3x+0x52>
 b0e:	7e f4       	brtc	.+30     	; 0xb2e <__addsf3x+0x80>
 b10:	1f 16       	cp	r1, r31
 b12:	ba 0b       	sbc	r27, r26
 b14:	62 0b       	sbc	r22, r18
 b16:	73 0b       	sbc	r23, r19
 b18:	84 0b       	sbc	r24, r20
 b1a:	ba f0       	brmi	.+46     	; 0xb4a <__addsf3x+0x9c>
 b1c:	91 50       	subi	r25, 0x01	; 1
 b1e:	a1 f0       	breq	.+40     	; 0xb48 <__addsf3x+0x9a>
 b20:	ff 0f       	add	r31, r31
 b22:	bb 1f       	adc	r27, r27
 b24:	66 1f       	adc	r22, r22
 b26:	77 1f       	adc	r23, r23
 b28:	88 1f       	adc	r24, r24
 b2a:	c2 f7       	brpl	.-16     	; 0xb1c <__addsf3x+0x6e>
 b2c:	0e c0       	rjmp	.+28     	; 0xb4a <__addsf3x+0x9c>
 b2e:	ba 0f       	add	r27, r26
 b30:	62 1f       	adc	r22, r18
 b32:	73 1f       	adc	r23, r19
 b34:	84 1f       	adc	r24, r20
 b36:	48 f4       	brcc	.+18     	; 0xb4a <__addsf3x+0x9c>
 b38:	87 95       	ror	r24
 b3a:	77 95       	ror	r23
 b3c:	67 95       	ror	r22
 b3e:	b7 95       	ror	r27
 b40:	f7 95       	ror	r31
 b42:	9e 3f       	cpi	r25, 0xFE	; 254
 b44:	08 f0       	brcs	.+2      	; 0xb48 <__addsf3x+0x9a>
 b46:	b0 cf       	rjmp	.-160    	; 0xaa8 <__addsf3+0x28>
 b48:	93 95       	inc	r25
 b4a:	88 0f       	add	r24, r24
 b4c:	08 f0       	brcs	.+2      	; 0xb50 <__addsf3x+0xa2>
 b4e:	99 27       	eor	r25, r25
 b50:	ee 0f       	add	r30, r30
 b52:	97 95       	ror	r25
 b54:	87 95       	ror	r24
 b56:	08 95       	ret

00000b58 <__fixunssfsi>:
 b58:	0e 94 48 06 	call	0xc90	; 0xc90 <__fp_splitA>
 b5c:	88 f0       	brcs	.+34     	; 0xb80 <__fixunssfsi+0x28>
 b5e:	9f 57       	subi	r25, 0x7F	; 127
 b60:	98 f0       	brcs	.+38     	; 0xb88 <__fixunssfsi+0x30>
 b62:	b9 2f       	mov	r27, r25
 b64:	99 27       	eor	r25, r25
 b66:	b7 51       	subi	r27, 0x17	; 23
 b68:	b0 f0       	brcs	.+44     	; 0xb96 <__fixunssfsi+0x3e>
 b6a:	e1 f0       	breq	.+56     	; 0xba4 <__fixunssfsi+0x4c>
 b6c:	66 0f       	add	r22, r22
 b6e:	77 1f       	adc	r23, r23
 b70:	88 1f       	adc	r24, r24
 b72:	99 1f       	adc	r25, r25
 b74:	1a f0       	brmi	.+6      	; 0xb7c <__fixunssfsi+0x24>
 b76:	ba 95       	dec	r27
 b78:	c9 f7       	brne	.-14     	; 0xb6c <__fixunssfsi+0x14>
 b7a:	14 c0       	rjmp	.+40     	; 0xba4 <__fixunssfsi+0x4c>
 b7c:	b1 30       	cpi	r27, 0x01	; 1
 b7e:	91 f0       	breq	.+36     	; 0xba4 <__fixunssfsi+0x4c>
 b80:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__fp_zero>
 b84:	b1 e0       	ldi	r27, 0x01	; 1
 b86:	08 95       	ret
 b88:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__fp_zero>
 b8c:	67 2f       	mov	r22, r23
 b8e:	78 2f       	mov	r23, r24
 b90:	88 27       	eor	r24, r24
 b92:	b8 5f       	subi	r27, 0xF8	; 248
 b94:	39 f0       	breq	.+14     	; 0xba4 <__fixunssfsi+0x4c>
 b96:	b9 3f       	cpi	r27, 0xF9	; 249
 b98:	cc f3       	brlt	.-14     	; 0xb8c <__fixunssfsi+0x34>
 b9a:	86 95       	lsr	r24
 b9c:	77 95       	ror	r23
 b9e:	67 95       	ror	r22
 ba0:	b3 95       	inc	r27
 ba2:	d9 f7       	brne	.-10     	; 0xb9a <__fixunssfsi+0x42>
 ba4:	3e f4       	brtc	.+14     	; 0xbb4 <__fixunssfsi+0x5c>
 ba6:	90 95       	com	r25
 ba8:	80 95       	com	r24
 baa:	70 95       	com	r23
 bac:	61 95       	neg	r22
 bae:	7f 4f       	sbci	r23, 0xFF	; 255
 bb0:	8f 4f       	sbci	r24, 0xFF	; 255
 bb2:	9f 4f       	sbci	r25, 0xFF	; 255
 bb4:	08 95       	ret

00000bb6 <__floatunsisf>:
 bb6:	e8 94       	clt
 bb8:	09 c0       	rjmp	.+18     	; 0xbcc <__floatsisf+0x12>

00000bba <__floatsisf>:
 bba:	97 fb       	bst	r25, 7
 bbc:	3e f4       	brtc	.+14     	; 0xbcc <__floatsisf+0x12>
 bbe:	90 95       	com	r25
 bc0:	80 95       	com	r24
 bc2:	70 95       	com	r23
 bc4:	61 95       	neg	r22
 bc6:	7f 4f       	sbci	r23, 0xFF	; 255
 bc8:	8f 4f       	sbci	r24, 0xFF	; 255
 bca:	9f 4f       	sbci	r25, 0xFF	; 255
 bcc:	99 23       	and	r25, r25
 bce:	a9 f0       	breq	.+42     	; 0xbfa <__floatsisf+0x40>
 bd0:	f9 2f       	mov	r31, r25
 bd2:	96 e9       	ldi	r25, 0x96	; 150
 bd4:	bb 27       	eor	r27, r27
 bd6:	93 95       	inc	r25
 bd8:	f6 95       	lsr	r31
 bda:	87 95       	ror	r24
 bdc:	77 95       	ror	r23
 bde:	67 95       	ror	r22
 be0:	b7 95       	ror	r27
 be2:	f1 11       	cpse	r31, r1
 be4:	f8 cf       	rjmp	.-16     	; 0xbd6 <__floatsisf+0x1c>
 be6:	fa f4       	brpl	.+62     	; 0xc26 <__floatsisf+0x6c>
 be8:	bb 0f       	add	r27, r27
 bea:	11 f4       	brne	.+4      	; 0xbf0 <__floatsisf+0x36>
 bec:	60 ff       	sbrs	r22, 0
 bee:	1b c0       	rjmp	.+54     	; 0xc26 <__floatsisf+0x6c>
 bf0:	6f 5f       	subi	r22, 0xFF	; 255
 bf2:	7f 4f       	sbci	r23, 0xFF	; 255
 bf4:	8f 4f       	sbci	r24, 0xFF	; 255
 bf6:	9f 4f       	sbci	r25, 0xFF	; 255
 bf8:	16 c0       	rjmp	.+44     	; 0xc26 <__floatsisf+0x6c>
 bfa:	88 23       	and	r24, r24
 bfc:	11 f0       	breq	.+4      	; 0xc02 <__floatsisf+0x48>
 bfe:	96 e9       	ldi	r25, 0x96	; 150
 c00:	11 c0       	rjmp	.+34     	; 0xc24 <__floatsisf+0x6a>
 c02:	77 23       	and	r23, r23
 c04:	21 f0       	breq	.+8      	; 0xc0e <__floatsisf+0x54>
 c06:	9e e8       	ldi	r25, 0x8E	; 142
 c08:	87 2f       	mov	r24, r23
 c0a:	76 2f       	mov	r23, r22
 c0c:	05 c0       	rjmp	.+10     	; 0xc18 <__floatsisf+0x5e>
 c0e:	66 23       	and	r22, r22
 c10:	71 f0       	breq	.+28     	; 0xc2e <__floatsisf+0x74>
 c12:	96 e8       	ldi	r25, 0x86	; 134
 c14:	86 2f       	mov	r24, r22
 c16:	70 e0       	ldi	r23, 0x00	; 0
 c18:	60 e0       	ldi	r22, 0x00	; 0
 c1a:	2a f0       	brmi	.+10     	; 0xc26 <__floatsisf+0x6c>
 c1c:	9a 95       	dec	r25
 c1e:	66 0f       	add	r22, r22
 c20:	77 1f       	adc	r23, r23
 c22:	88 1f       	adc	r24, r24
 c24:	da f7       	brpl	.-10     	; 0xc1c <__floatsisf+0x62>
 c26:	88 0f       	add	r24, r24
 c28:	96 95       	lsr	r25
 c2a:	87 95       	ror	r24
 c2c:	97 f9       	bld	r25, 7
 c2e:	08 95       	ret

00000c30 <__fp_inf>:
 c30:	97 f9       	bld	r25, 7
 c32:	9f 67       	ori	r25, 0x7F	; 127
 c34:	80 e8       	ldi	r24, 0x80	; 128
 c36:	70 e0       	ldi	r23, 0x00	; 0
 c38:	60 e0       	ldi	r22, 0x00	; 0
 c3a:	08 95       	ret

00000c3c <__fp_nan>:
 c3c:	9f ef       	ldi	r25, 0xFF	; 255
 c3e:	80 ec       	ldi	r24, 0xC0	; 192
 c40:	08 95       	ret

00000c42 <__fp_pscA>:
 c42:	00 24       	eor	r0, r0
 c44:	0a 94       	dec	r0
 c46:	16 16       	cp	r1, r22
 c48:	17 06       	cpc	r1, r23
 c4a:	18 06       	cpc	r1, r24
 c4c:	09 06       	cpc	r0, r25
 c4e:	08 95       	ret

00000c50 <__fp_pscB>:
 c50:	00 24       	eor	r0, r0
 c52:	0a 94       	dec	r0
 c54:	12 16       	cp	r1, r18
 c56:	13 06       	cpc	r1, r19
 c58:	14 06       	cpc	r1, r20
 c5a:	05 06       	cpc	r0, r21
 c5c:	08 95       	ret

00000c5e <__fp_round>:
 c5e:	09 2e       	mov	r0, r25
 c60:	03 94       	inc	r0
 c62:	00 0c       	add	r0, r0
 c64:	11 f4       	brne	.+4      	; 0xc6a <__fp_round+0xc>
 c66:	88 23       	and	r24, r24
 c68:	52 f0       	brmi	.+20     	; 0xc7e <__fp_round+0x20>
 c6a:	bb 0f       	add	r27, r27
 c6c:	40 f4       	brcc	.+16     	; 0xc7e <__fp_round+0x20>
 c6e:	bf 2b       	or	r27, r31
 c70:	11 f4       	brne	.+4      	; 0xc76 <__fp_round+0x18>
 c72:	60 ff       	sbrs	r22, 0
 c74:	04 c0       	rjmp	.+8      	; 0xc7e <__fp_round+0x20>
 c76:	6f 5f       	subi	r22, 0xFF	; 255
 c78:	7f 4f       	sbci	r23, 0xFF	; 255
 c7a:	8f 4f       	sbci	r24, 0xFF	; 255
 c7c:	9f 4f       	sbci	r25, 0xFF	; 255
 c7e:	08 95       	ret

00000c80 <__fp_split3>:
 c80:	57 fd       	sbrc	r21, 7
 c82:	90 58       	subi	r25, 0x80	; 128
 c84:	44 0f       	add	r20, r20
 c86:	55 1f       	adc	r21, r21
 c88:	59 f0       	breq	.+22     	; 0xca0 <__fp_splitA+0x10>
 c8a:	5f 3f       	cpi	r21, 0xFF	; 255
 c8c:	71 f0       	breq	.+28     	; 0xcaa <__fp_splitA+0x1a>
 c8e:	47 95       	ror	r20

00000c90 <__fp_splitA>:
 c90:	88 0f       	add	r24, r24
 c92:	97 fb       	bst	r25, 7
 c94:	99 1f       	adc	r25, r25
 c96:	61 f0       	breq	.+24     	; 0xcb0 <__fp_splitA+0x20>
 c98:	9f 3f       	cpi	r25, 0xFF	; 255
 c9a:	79 f0       	breq	.+30     	; 0xcba <__fp_splitA+0x2a>
 c9c:	87 95       	ror	r24
 c9e:	08 95       	ret
 ca0:	12 16       	cp	r1, r18
 ca2:	13 06       	cpc	r1, r19
 ca4:	14 06       	cpc	r1, r20
 ca6:	55 1f       	adc	r21, r21
 ca8:	f2 cf       	rjmp	.-28     	; 0xc8e <__fp_split3+0xe>
 caa:	46 95       	lsr	r20
 cac:	f1 df       	rcall	.-30     	; 0xc90 <__fp_splitA>
 cae:	08 c0       	rjmp	.+16     	; 0xcc0 <__fp_splitA+0x30>
 cb0:	16 16       	cp	r1, r22
 cb2:	17 06       	cpc	r1, r23
 cb4:	18 06       	cpc	r1, r24
 cb6:	99 1f       	adc	r25, r25
 cb8:	f1 cf       	rjmp	.-30     	; 0xc9c <__fp_splitA+0xc>
 cba:	86 95       	lsr	r24
 cbc:	71 05       	cpc	r23, r1
 cbe:	61 05       	cpc	r22, r1
 cc0:	08 94       	sec
 cc2:	08 95       	ret

00000cc4 <__fp_zero>:
 cc4:	e8 94       	clt

00000cc6 <__fp_szero>:
 cc6:	bb 27       	eor	r27, r27
 cc8:	66 27       	eor	r22, r22
 cca:	77 27       	eor	r23, r23
 ccc:	cb 01       	movw	r24, r22
 cce:	97 f9       	bld	r25, 7
 cd0:	08 95       	ret

00000cd2 <__mulsf3>:
 cd2:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__mulsf3x>
 cd6:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__fp_round>
 cda:	0e 94 21 06 	call	0xc42	; 0xc42 <__fp_pscA>
 cde:	38 f0       	brcs	.+14     	; 0xcee <__mulsf3+0x1c>
 ce0:	0e 94 28 06 	call	0xc50	; 0xc50 <__fp_pscB>
 ce4:	20 f0       	brcs	.+8      	; 0xcee <__mulsf3+0x1c>
 ce6:	95 23       	and	r25, r21
 ce8:	11 f0       	breq	.+4      	; 0xcee <__mulsf3+0x1c>
 cea:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_inf>
 cee:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__fp_nan>
 cf2:	11 24       	eor	r1, r1
 cf4:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_szero>

00000cf8 <__mulsf3x>:
 cf8:	0e 94 40 06 	call	0xc80	; 0xc80 <__fp_split3>
 cfc:	70 f3       	brcs	.-36     	; 0xcda <__mulsf3+0x8>

00000cfe <__mulsf3_pse>:
 cfe:	95 9f       	mul	r25, r21
 d00:	c1 f3       	breq	.-16     	; 0xcf2 <__mulsf3+0x20>
 d02:	95 0f       	add	r25, r21
 d04:	50 e0       	ldi	r21, 0x00	; 0
 d06:	55 1f       	adc	r21, r21
 d08:	62 9f       	mul	r22, r18
 d0a:	f0 01       	movw	r30, r0
 d0c:	72 9f       	mul	r23, r18
 d0e:	bb 27       	eor	r27, r27
 d10:	f0 0d       	add	r31, r0
 d12:	b1 1d       	adc	r27, r1
 d14:	63 9f       	mul	r22, r19
 d16:	aa 27       	eor	r26, r26
 d18:	f0 0d       	add	r31, r0
 d1a:	b1 1d       	adc	r27, r1
 d1c:	aa 1f       	adc	r26, r26
 d1e:	64 9f       	mul	r22, r20
 d20:	66 27       	eor	r22, r22
 d22:	b0 0d       	add	r27, r0
 d24:	a1 1d       	adc	r26, r1
 d26:	66 1f       	adc	r22, r22
 d28:	82 9f       	mul	r24, r18
 d2a:	22 27       	eor	r18, r18
 d2c:	b0 0d       	add	r27, r0
 d2e:	a1 1d       	adc	r26, r1
 d30:	62 1f       	adc	r22, r18
 d32:	73 9f       	mul	r23, r19
 d34:	b0 0d       	add	r27, r0
 d36:	a1 1d       	adc	r26, r1
 d38:	62 1f       	adc	r22, r18
 d3a:	83 9f       	mul	r24, r19
 d3c:	a0 0d       	add	r26, r0
 d3e:	61 1d       	adc	r22, r1
 d40:	22 1f       	adc	r18, r18
 d42:	74 9f       	mul	r23, r20
 d44:	33 27       	eor	r19, r19
 d46:	a0 0d       	add	r26, r0
 d48:	61 1d       	adc	r22, r1
 d4a:	23 1f       	adc	r18, r19
 d4c:	84 9f       	mul	r24, r20
 d4e:	60 0d       	add	r22, r0
 d50:	21 1d       	adc	r18, r1
 d52:	82 2f       	mov	r24, r18
 d54:	76 2f       	mov	r23, r22
 d56:	6a 2f       	mov	r22, r26
 d58:	11 24       	eor	r1, r1
 d5a:	9f 57       	subi	r25, 0x7F	; 127
 d5c:	50 40       	sbci	r21, 0x00	; 0
 d5e:	9a f0       	brmi	.+38     	; 0xd86 <__mulsf3_pse+0x88>
 d60:	f1 f0       	breq	.+60     	; 0xd9e <__mulsf3_pse+0xa0>
 d62:	88 23       	and	r24, r24
 d64:	4a f0       	brmi	.+18     	; 0xd78 <__mulsf3_pse+0x7a>
 d66:	ee 0f       	add	r30, r30
 d68:	ff 1f       	adc	r31, r31
 d6a:	bb 1f       	adc	r27, r27
 d6c:	66 1f       	adc	r22, r22
 d6e:	77 1f       	adc	r23, r23
 d70:	88 1f       	adc	r24, r24
 d72:	91 50       	subi	r25, 0x01	; 1
 d74:	50 40       	sbci	r21, 0x00	; 0
 d76:	a9 f7       	brne	.-22     	; 0xd62 <__mulsf3_pse+0x64>
 d78:	9e 3f       	cpi	r25, 0xFE	; 254
 d7a:	51 05       	cpc	r21, r1
 d7c:	80 f0       	brcs	.+32     	; 0xd9e <__mulsf3_pse+0xa0>
 d7e:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_inf>
 d82:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_szero>
 d86:	5f 3f       	cpi	r21, 0xFF	; 255
 d88:	e4 f3       	brlt	.-8      	; 0xd82 <__mulsf3_pse+0x84>
 d8a:	98 3e       	cpi	r25, 0xE8	; 232
 d8c:	d4 f3       	brlt	.-12     	; 0xd82 <__mulsf3_pse+0x84>
 d8e:	86 95       	lsr	r24
 d90:	77 95       	ror	r23
 d92:	67 95       	ror	r22
 d94:	b7 95       	ror	r27
 d96:	f7 95       	ror	r31
 d98:	e7 95       	ror	r30
 d9a:	9f 5f       	subi	r25, 0xFF	; 255
 d9c:	c1 f7       	brne	.-16     	; 0xd8e <__mulsf3_pse+0x90>
 d9e:	fe 2b       	or	r31, r30
 da0:	88 0f       	add	r24, r24
 da2:	91 1d       	adc	r25, r1
 da4:	96 95       	lsr	r25
 da6:	87 95       	ror	r24
 da8:	97 f9       	bld	r25, 7
 daa:	08 95       	ret

00000dac <_exit>:
 dac:	f8 94       	cli

00000dae <__stop_program>:
 dae:	ff cf       	rjmp	.-2      	; 0xdae <__stop_program>
